
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004004  08004004  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004004  08004004  00014004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800400c  0800400c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004010  08004010  00014010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a4  2**0
                  CONTENTS
 10 .bss          000007f0  200000a4  200000a4  000200a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000894  20000894  000200a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000cd1e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000efd6  00000000  00000000  0002cdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d67  00000000  00000000  0003bdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ba0  00000000  00000000  0003db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000db04c  00000000  00000000  0003e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ac8  00000000  00000000  00119720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024615  00000000  00000000  0011a1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e7fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003444  00000000  00000000  0013e850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003f88 	.word	0x08003f88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a8 	.word	0x200000a8
 80001ec:	08003f88 	.word	0x08003f88

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@   r0: vector
@   r1: longitud
@
.thumb_func
    asm_zeros:
    	mov r2, 0
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <.asm_zeros_loop>:
    .asm_zeros_loop:
    	str r2, [r0], 4
 80001fc:	f840 2b04 	str.w	r2, [r0], #4
    	subs r1, 1
 8000200:	3901      	subs	r1, #1
    	bne .asm_zeros_loop
 8000202:	d1fb      	bne.n	80001fc <.asm_zeros_loop>
    	bx lr
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
@   r2: longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar32:
    	mov r4, 0
 8000206:	f04f 0400 	mov.w	r4, #0
    	mov r5, 0
 800020a:	f04f 0500 	mov.w	r5, #0

0800020e <.asm_productoEscalar32_loop>:
    .asm_productoEscalar32_loop:
    	ldr r4, [r0], 4
 800020e:	f850 4b04 	ldr.w	r4, [r0], #4
    	mul r5, r4, r3
 8000212:	fb04 f503 	mul.w	r5, r4, r3
    	str r5, [r1], 4
 8000216:	f841 5b04 	str.w	r5, [r1], #4
    	subs r2, 1
 800021a:	3a01      	subs	r2, #1
    	bne .asm_productoEscalar32_loop
 800021c:	d1f7      	bne.n	800020e <.asm_productoEscalar32_loop>
    	bx lr
 800021e:	4770      	bx	lr

08000220 <asm_productoEscalar16>:
@   r2: longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar16:
    	mov r4, 0
 8000220:	f04f 0400 	mov.w	r4, #0
    	mov r5, 0
 8000224:	f04f 0500 	mov.w	r5, #0

08000228 <.asm_productoEscalar16_loop>:
    .asm_productoEscalar16_loop:
    	ldrh r4, [r0], 2
 8000228:	f830 4b02 	ldrh.w	r4, [r0], #2
    	ldrh r5, [r1]
 800022c:	880d      	ldrh	r5, [r1, #0]
    	mul r5, r4, r3
 800022e:	fb04 f503 	mul.w	r5, r4, r3
    	strh r5, [r1], 2
 8000232:	f821 5b02 	strh.w	r5, [r1], #2
    	subs r2, 1
 8000236:	3a01      	subs	r2, #1
    	bne .asm_productoEscalar16_loop
 8000238:	d1f6      	bne.n	8000228 <.asm_productoEscalar16_loop>
    	bx lr
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr
 800024c:	0000      	movs	r0, r0
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <asignarEscalar32>:


/* Functions definitions -----------------------------------------------------*/

void asignarEscalar32(uint32_t *vector, uint32_t longitud, uint32_t escalar)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
	while (longitud--) {
 8000600:	e004      	b.n	800060c <asignarEscalar32+0x18>
		*vector++ = escalar;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	1d1a      	adds	r2, r3, #4
 8000606:	60fa      	str	r2, [r7, #12]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	601a      	str	r2, [r3, #0]
	while (longitud--) {
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	60ba      	str	r2, [r7, #8]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f5      	bne.n	8000602 <asignarEscalar32+0xe>
	}
}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <asignarEscalar16>:

void asignarEscalar16(uint16_t *vector, uint16_t longitud, uint16_t escalar)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
 8000630:	4613      	mov	r3, r2
 8000632:	803b      	strh	r3, [r7, #0]
	while (longitud--) {
 8000634:	e004      	b.n	8000640 <asignarEscalar16+0x1c>
		*vector++ = escalar;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	1c9a      	adds	r2, r3, #2
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	883a      	ldrh	r2, [r7, #0]
 800063e:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 8000640:	887b      	ldrh	r3, [r7, #2]
 8000642:	1e5a      	subs	r2, r3, #1
 8000644:	807a      	strh	r2, [r7, #2]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1f5      	bne.n	8000636 <asignarEscalar16+0x12>
	}
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <zeros>:

void zeros(uint32_t *vector, uint32_t longitud)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	while (longitud--) {
 8000662:	e004      	b.n	800066e <zeros+0x16>
		*vector++ = 0u;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	1d1a      	adds	r2, r3, #4
 8000668:	607a      	str	r2, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
	while (longitud--) {
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	1e5a      	subs	r2, r3, #1
 8000672:	603a      	str	r2, [r7, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d1f5      	bne.n	8000664 <zeros+0xc>
	}
}
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 8000686:	b480      	push	{r7}
 8000688:	b085      	sub	sp, #20
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
 8000692:	603b      	str	r3, [r7, #0]
	while (longitud--) {
 8000694:	e00a      	b.n	80006ac <productoEscalar32+0x26>
		*vectorOut++ = *vectorIn++ * escalar;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	1d1a      	adds	r2, r3, #4
 800069a:	60fa      	str	r2, [r7, #12]
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	1d19      	adds	r1, r3, #4
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	6839      	ldr	r1, [r7, #0]
 80006a6:	fb01 f202 	mul.w	r2, r1, r2
 80006aa:	601a      	str	r2, [r3, #0]
	while (longitud--) {
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	607a      	str	r2, [r7, #4]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1ef      	bne.n	8000696 <productoEscalar32+0x10>
	}
}
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	4611      	mov	r1, r2
 80006d0:	461a      	mov	r2, r3
 80006d2:	460b      	mov	r3, r1
 80006d4:	80fb      	strh	r3, [r7, #6]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80bb      	strh	r3, [r7, #4]
	while (longitud--) {
 80006da:	e00b      	b.n	80006f4 <productoEscalar16+0x30>
		*vectorOut++ = *vectorIn++ * escalar;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	1c9a      	adds	r2, r3, #2
 80006e0:	60fa      	str	r2, [r7, #12]
 80006e2:	881a      	ldrh	r2, [r3, #0]
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	1c99      	adds	r1, r3, #2
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	88b9      	ldrh	r1, [r7, #4]
 80006ec:	fb11 f202 	smulbb	r2, r1, r2
 80006f0:	b292      	uxth	r2, r2
 80006f2:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 80006f4:	88fb      	ldrh	r3, [r7, #6]
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	80fa      	strh	r2, [r7, #6]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1ee      	bne.n	80006dc <productoEscalar16+0x18>
	}
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	4611      	mov	r1, r2
 8000718:	461a      	mov	r2, r3
 800071a:	460b      	mov	r3, r1
 800071c:	80fb      	strh	r3, [r7, #6]
 800071e:	4613      	mov	r3, r2
 8000720:	80bb      	strh	r3, [r7, #4]
	while (longitud--) {
 8000722:	e00e      	b.n	8000742 <productoEscalar12+0x36>
		*vectorOut++ = (*vectorIn++ * escalar) & 0x0FFF;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	1c9a      	adds	r2, r3, #2
 8000728:	60fa      	str	r2, [r7, #12]
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	88ba      	ldrh	r2, [r7, #4]
 800072e:	fb12 f303 	smulbb	r3, r2, r3
 8000732:	b29a      	uxth	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	1c99      	adds	r1, r3, #2
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800073e:	b292      	uxth	r2, r2
 8000740:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 8000742:	88fb      	ldrh	r3, [r7, #6]
 8000744:	1e5a      	subs	r2, r3, #1
 8000746:	80fa      	strh	r2, [r7, #6]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1eb      	bne.n	8000724 <productoEscalar12+0x18>
	}
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr

0800075a <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b088      	sub	sp, #32
 800075e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000760:	f3ef 8314 	mrs	r3, CONTROL
 8000764:	607b      	str	r3, [r7, #4]
  return(result);
 8000766:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000768:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	f383 8814 	msr	CONTROL, r3
}
 800077c:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800077e:	f3ef 8314 	mrs	r3, CONTROL
 8000782:	60fb      	str	r3, [r7, #12]
  return(result);
 8000784:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000786:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	f023 0301 	bic.w	r3, r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	f383 8814 	msr	CONTROL, r3
}
 800079a:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800079c:	f3ef 8314 	mrs	r3, CONTROL
 80007a0:	617b      	str	r3, [r7, #20]
  return(result);
 80007a2:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80007a4:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80007a6:	f7ff fd23 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80007aa:	f3ef 8314 	mrs	r3, CONTROL
 80007ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80007b0:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80007b2:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fc73 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f87f 	bl	80008c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 80007ca:	4837      	ldr	r0, [pc, #220]	; (80008a8 <main+0xec>)
 80007cc:	f7ff fd36 	bl	800023c <strlen>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	230a      	movs	r3, #10
 80007d6:	4934      	ldr	r1, [pc, #208]	; (80008a8 <main+0xec>)
 80007d8:	4834      	ldr	r0, [pc, #208]	; (80008ac <main+0xf0>)
 80007da:	f002 f8be 	bl	800295a <HAL_UART_Transmit>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 f983 	bl	8000ae8 <MX_GPIO_Init>
  MX_ETH_Init();
 80007e2:	f000 f8db 	bl	800099c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80007e6:	f000 f927 	bl	8000a38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007ea:	f000 f94f 	bl	8000a8c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 80007ee:	f7ff ffb4 	bl	800075a <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 80007f2:	2103      	movs	r1, #3
 80007f4:	2005      	movs	r0, #5
 80007f6:	f7ff fcfd 	bl	80001f4 <asm_sum>
 80007fa:	6078      	str	r0, [r7, #4]
  /* USER CODE END 2 */

  sprintf( buffer, "asm_sum(5,3) = %lu\r\n", (uint32_t)Resultado );
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	492c      	ldr	r1, [pc, #176]	; (80008b0 <main+0xf4>)
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <main+0xec>)
 8000802:	f002 ff53 	bl	80036ac <siprintf>
  HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 8000806:	4828      	ldr	r0, [pc, #160]	; (80008a8 <main+0xec>)
 8000808:	f7ff fd18 	bl	800023c <strlen>
 800080c:	4603      	mov	r3, r0
 800080e:	b29a      	uxth	r2, r3
 8000810:	230a      	movs	r3, #10
 8000812:	4925      	ldr	r1, [pc, #148]	; (80008a8 <main+0xec>)
 8000814:	4825      	ldr	r0, [pc, #148]	; (80008ac <main+0xf0>)
 8000816:	f002 f8a0 	bl	800295a <HAL_UART_Transmit>

  zeros(buffer_zeros, (uint32_t)LENGTH_BUFFER_IN_OUT);
 800081a:	2105      	movs	r1, #5
 800081c:	4825      	ldr	r0, [pc, #148]	; (80008b4 <main+0xf8>)
 800081e:	f7ff ff1b 	bl	8000658 <zeros>
  productoEscalar32(buffer_in_32, buffer_out_32, (uint32_t)LENGTH_BUFFER_IN_OUT, 5u);
 8000822:	2305      	movs	r3, #5
 8000824:	2205      	movs	r2, #5
 8000826:	4924      	ldr	r1, [pc, #144]	; (80008b8 <main+0xfc>)
 8000828:	4824      	ldr	r0, [pc, #144]	; (80008bc <main+0x100>)
 800082a:	f7ff ff2c 	bl	8000686 <productoEscalar32>
  productoEscalar16(buffer_in_16, buffer_out_16, (uint16_t)LENGTH_BUFFER_IN_OUT, 2u);
 800082e:	2302      	movs	r3, #2
 8000830:	2205      	movs	r2, #5
 8000832:	4923      	ldr	r1, [pc, #140]	; (80008c0 <main+0x104>)
 8000834:	4823      	ldr	r0, [pc, #140]	; (80008c4 <main+0x108>)
 8000836:	f7ff ff45 	bl	80006c4 <productoEscalar16>
  productoEscalar12(buffer_in_16, buffer_out_16, (uint16_t)LENGTH_BUFFER_IN_OUT, 1024u);
 800083a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083e:	2205      	movs	r2, #5
 8000840:	491f      	ldr	r1, [pc, #124]	; (80008c0 <main+0x104>)
 8000842:	4820      	ldr	r0, [pc, #128]	; (80008c4 <main+0x108>)
 8000844:	f7ff ff62 	bl	800070c <productoEscalar12>

  sprintf( buffer, "asm_sum(5,3) = %lu\r\n", (uint32_t)Resultado );
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4919      	ldr	r1, [pc, #100]	; (80008b0 <main+0xf4>)
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <main+0xec>)
 800084e:	f002 ff2d 	bl	80036ac <siprintf>
  HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 8000852:	4815      	ldr	r0, [pc, #84]	; (80008a8 <main+0xec>)
 8000854:	f7ff fcf2 	bl	800023c <strlen>
 8000858:	4603      	mov	r3, r0
 800085a:	b29a      	uxth	r2, r3
 800085c:	230a      	movs	r3, #10
 800085e:	4912      	ldr	r1, [pc, #72]	; (80008a8 <main+0xec>)
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <main+0xf0>)
 8000862:	f002 f87a 	bl	800295a <HAL_UART_Transmit>

  asignarEscalar32(buffer_zeros, (uint32_t)LENGTH_BUFFER_IN_OUT, (uint32_t)0xFFFFFFFF);
 8000866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800086a:	2105      	movs	r1, #5
 800086c:	4811      	ldr	r0, [pc, #68]	; (80008b4 <main+0xf8>)
 800086e:	f7ff fec1 	bl	80005f4 <asignarEscalar32>
  asignarEscalar32(buffer_in_32, (uint32_t)LENGTH_BUFFER_IN_OUT, (uint32_t)5u);
 8000872:	2205      	movs	r2, #5
 8000874:	2105      	movs	r1, #5
 8000876:	4811      	ldr	r0, [pc, #68]	; (80008bc <main+0x100>)
 8000878:	f7ff febc 	bl	80005f4 <asignarEscalar32>
  asignarEscalar16(buffer_in_16, (uint16_t)LENGTH_BUFFER_IN_OUT, (uint16_t)3u);
 800087c:	2203      	movs	r2, #3
 800087e:	2105      	movs	r1, #5
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <main+0x108>)
 8000882:	f7ff fecf 	bl	8000624 <asignarEscalar16>

  asm_zeros(buffer_zeros, LENGTH_BUFFER_IN_OUT);
 8000886:	2105      	movs	r1, #5
 8000888:	480a      	ldr	r0, [pc, #40]	; (80008b4 <main+0xf8>)
 800088a:	f7ff fcb5 	bl	80001f8 <asm_zeros>
  asm_productoEscalar32(buffer_in_32, buffer_out_32, (uint32_t)LENGTH_BUFFER_IN_OUT, 5u);
 800088e:	2305      	movs	r3, #5
 8000890:	2205      	movs	r2, #5
 8000892:	4909      	ldr	r1, [pc, #36]	; (80008b8 <main+0xfc>)
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <main+0x100>)
 8000896:	f7ff fcb6 	bl	8000206 <asm_productoEscalar32>
  asm_productoEscalar16(buffer_in_16, buffer_out_16, (uint32_t)LENGTH_BUFFER_IN_OUT, 2u);
 800089a:	2302      	movs	r3, #2
 800089c:	2205      	movs	r2, #5
 800089e:	4908      	ldr	r1, [pc, #32]	; (80008c0 <main+0x104>)
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <main+0x108>)
 80008a2:	f7ff fcbd 	bl	8000220 <asm_productoEscalar16>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <main+0xea>
 80008a8:	20000838 	.word	0x20000838
 80008ac:	200002e8 	.word	0x200002e8
 80008b0:	08003fa0 	.word	0x08003fa0
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000854 	.word	0x20000854
 80008bc:	20000014 	.word	0x20000014
 80008c0:	20000868 	.word	0x20000868
 80008c4:	20000028 	.word	0x20000028

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fee0 	bl	800369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b28      	ldr	r3, [pc, #160]	; (8000994 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a27      	ldr	r2, [pc, #156]	; (8000994 <SystemClock_Config+0xcc>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b25      	ldr	r3, [pc, #148]	; (8000994 <SystemClock_Config+0xcc>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <SystemClock_Config+0xd0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a21      	ldr	r2, [pc, #132]	; (8000998 <SystemClock_Config+0xd0>)
 8000912:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <SystemClock_Config+0xd0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000928:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092e:	2302      	movs	r3, #2
 8000930:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000938:	2304      	movs	r3, #4
 800093a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800093c:	23a8      	movs	r3, #168	; 0xa8
 800093e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000940:	2302      	movs	r3, #2
 8000942:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000944:	2307      	movs	r3, #7
 8000946:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4618      	mov	r0, r3
 800094e:	f001 fb1f 	bl	8001f90 <HAL_RCC_OscConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000958:	f000 f974 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095c:	230f      	movs	r3, #15
 800095e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000960:	2302      	movs	r3, #2
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000968:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800096c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2105      	movs	r1, #5
 800097a:	4618      	mov	r0, r3
 800097c:	f001 fd80 	bl	8002480 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000986:	f000 f95d 	bl	8000c44 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3750      	adds	r7, #80	; 0x50
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40007000 	.word	0x40007000

0800099c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ETH_Init+0x84>)
 80009a2:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <MX_ETH_Init+0x88>)
 80009a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009a6:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ae:	2280      	movs	r2, #128	; 0x80
 80009b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009b4:	22e1      	movs	r2, #225	; 0xe1
 80009b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009c4:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ETH_Init+0x84>)
 80009cc:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <MX_ETH_Init+0x8c>)
 80009ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_ETH_Init+0x84>)
 80009d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_ETH_Init+0x84>)
 80009da:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <MX_ETH_Init+0x90>)
 80009dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_ETH_Init+0x84>)
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_ETH_Init+0x94>)
 80009e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_ETH_Init+0x84>)
 80009e6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80009ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_ETH_Init+0x84>)
 80009ee:	f000 fcd9 	bl	80013a4 <HAL_ETH_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80009f8:	f000 f924 	bl	8000c44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009fc:	2238      	movs	r2, #56	; 0x38
 80009fe:	2100      	movs	r1, #0
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a02:	f002 fe4b 	bl	800369c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a08:	2221      	movs	r2, #33	; 0x21
 8000a0a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a0e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a12:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_ETH_Init+0x98>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000238 	.word	0x20000238
 8000a24:	40028000 	.word	0x40028000
 8000a28:	20000874 	.word	0x20000874
 8000a2c:	20000198 	.word	0x20000198
 8000a30:	200000f8 	.word	0x200000f8
 8000a34:	200000c0 	.word	0x200000c0

08000a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a3c:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a3e:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <MX_USART3_UART_Init+0x50>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_USART3_UART_Init+0x4c>)
 8000a70:	f001 ff26 	bl	80028c0 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a7a:	f000 f8e3 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200002e8 	.word	0x200002e8
 8000a88:	40004800 	.word	0x40004800

08000a8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a92:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aac:	2202      	movs	r2, #2
 8000aae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	f001 f941 	bl	8001d56 <HAL_PCD_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ada:	f000 f8b3 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000032c 	.word	0x2000032c

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b4c      	ldr	r3, [pc, #304]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a4b      	ldr	r2, [pc, #300]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b49      	ldr	r3, [pc, #292]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b45      	ldr	r3, [pc, #276]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a44      	ldr	r2, [pc, #272]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b42      	ldr	r3, [pc, #264]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a3d      	ldr	r2, [pc, #244]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b3b      	ldr	r3, [pc, #236]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a36      	ldr	r2, [pc, #216]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b34      	ldr	r3, [pc, #208]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b78:	f043 0308 	orr.w	r3, r3, #8
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2d      	ldr	r3, [pc, #180]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0308 	and.w	r3, r3, #8
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a28      	ldr	r2, [pc, #160]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_GPIO_Init+0x14c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bac:	4822      	ldr	r0, [pc, #136]	; (8000c38 <MX_GPIO_Init+0x150>)
 8000bae:	f001 f8b9 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	4821      	ldr	r0, [pc, #132]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000bb8:	f001 f8b4 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_GPIO_Init+0x158>)
 8000bd4:	f000 fefa 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bd8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4811      	ldr	r0, [pc, #68]	; (8000c38 <MX_GPIO_Init+0x150>)
 8000bf2:	f000 feeb 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000bf6:	2340      	movs	r3, #64	; 0x40
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000c0e:	f000 fedd 	bl	80019cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_GPIO_Init+0x154>)
 8000c26:	f000 fed1 	bl	80019cc <HAL_GPIO_Init>

}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	; 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40021800 	.word	0x40021800
 8000c40:	40020800 	.word	0x40020800

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a55      	ldr	r2, [pc, #340]	; (8000e14 <HAL_ETH_MspInit+0x174>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	f040 80a4 	bne.w	8000e0c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ccc:	4a52      	ldr	r2, [pc, #328]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd4:	4b50      	ldr	r3, [pc, #320]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cdc:	623b      	str	r3, [r7, #32]
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
 8000ce4:	4b4c      	ldr	r3, [pc, #304]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a4b      	ldr	r2, [pc, #300]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b49      	ldr	r3, [pc, #292]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000cf8:	61fb      	str	r3, [r7, #28]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
 8000d00:	4b45      	ldr	r3, [pc, #276]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d04:	4a44      	ldr	r2, [pc, #272]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0c:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	4b3e      	ldr	r3, [pc, #248]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a3d      	ldr	r2, [pc, #244]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b3b      	ldr	r3, [pc, #236]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a36      	ldr	r2, [pc, #216]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b34      	ldr	r3, [pc, #208]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	4b30      	ldr	r3, [pc, #192]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d58:	4a2f      	ldr	r2, [pc, #188]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d60:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	60fb      	str	r3, [r7, #12]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a28      	ldr	r2, [pc, #160]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <HAL_ETH_MspInit+0x178>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d88:	2332      	movs	r3, #50	; 0x32
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d98:	230b      	movs	r3, #11
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	481e      	ldr	r0, [pc, #120]	; (8000e1c <HAL_ETH_MspInit+0x17c>)
 8000da4:	f000 fe12 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000da8:	2386      	movs	r3, #134	; 0x86
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000db8:	230b      	movs	r3, #11
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4817      	ldr	r0, [pc, #92]	; (8000e20 <HAL_ETH_MspInit+0x180>)
 8000dc4:	f000 fe02 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	480f      	ldr	r0, [pc, #60]	; (8000e24 <HAL_ETH_MspInit+0x184>)
 8000de6:	f000 fdf1 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4808      	ldr	r0, [pc, #32]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000e08:	f000 fde0 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40028000 	.word	0x40028000
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40021800 	.word	0x40021800

08000e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a19      	ldr	r2, [pc, #100]	; (8000eb0 <HAL_UART_MspInit+0x84>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d12c      	bne.n	8000ea8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_UART_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e94:	2303      	movs	r3, #3
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_UART_MspInit+0x8c>)
 8000ea4:	f000 fd92 	bl	80019cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004800 	.word	0x40004800
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020c00 	.word	0x40020c00

08000ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000edc:	d13f      	bne.n	8000f5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000efa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	2302      	movs	r3, #2
 8000f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f0c:	230a      	movs	r3, #10
 8000f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4815      	ldr	r0, [pc, #84]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f18:	f000 fd58 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <HAL_PCD_MspInit+0xb0>)
 8000f32:	f000 fd4b 	bl	80019cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f40:	6353      	str	r3, [r2, #52]	; 0x34
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_PCD_MspInit+0xac>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f8c8 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f002 fb28 	bl	8003648 <__errno>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20030000 	.word	0x20030000
 8001024:	00000400 	.word	0x00000400
 8001028:	2000087c 	.word	0x2000087c
 800102c:	20000898 	.word	0x20000898

08001030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <SystemInit+0x20>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <SystemInit+0x20>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  nop
 8001054:	bf00      	nop
  nop
 8001056:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001082:	f7ff ffd5 	bl	8001030 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 fae5 	bl	8003654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fb97 	bl	80007bc <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001090:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 800109c:	08004014 	.word	0x08004014
  ldr r2, =_sbss
 80010a0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80010a4:	20000894 	.word	0x20000894

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f931 	bl	800133c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fdb6 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f93b 	bl	800138a <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112c:	f000 f911 	bl	8001352 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000034 	.word	0x20000034
 8001148:	2000003c 	.word	0x2000003c
 800114c:	20000038 	.word	0x20000038

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000003c 	.word	0x2000003c
 8001174:	20000880 	.word	0x20000880

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000880 	.word	0x20000880

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000003c 	.word	0x2000003c

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	2b00      	cmp	r3, #0
 800124e:	db0a      	blt.n	8001266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	b2da      	uxtb	r2, r3
 8001254:	490c      	ldr	r1, [pc, #48]	; (8001288 <__NVIC_SetPriority+0x4c>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	0112      	lsls	r2, r2, #4
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	440b      	add	r3, r1
 8001260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001264:	e00a      	b.n	800127c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4908      	ldr	r1, [pc, #32]	; (800128c <__NVIC_SetPriority+0x50>)
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	3b04      	subs	r3, #4
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	440b      	add	r3, r1
 800127a:	761a      	strb	r2, [r3, #24]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000e100 	.word	0xe000e100
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001290:	b480      	push	{r7}
 8001292:	b089      	sub	sp, #36	; 0x24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f1c3 0307 	rsb	r3, r3, #7
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	bf28      	it	cs
 80012ae:	2304      	movcs	r3, #4
 80012b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3304      	adds	r3, #4
 80012b6:	2b06      	cmp	r3, #6
 80012b8:	d902      	bls.n	80012c0 <NVIC_EncodePriority+0x30>
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3b03      	subs	r3, #3
 80012be:	e000      	b.n	80012c2 <NVIC_EncodePriority+0x32>
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43da      	mvns	r2, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	401a      	ands	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43d9      	mvns	r1, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e8:	4313      	orrs	r3, r2
         );
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001308:	d301      	bcc.n	800130e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130a:	2301      	movs	r3, #1
 800130c:	e00f      	b.n	800132e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <SysTick_Config+0x40>)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001316:	210f      	movs	r1, #15
 8001318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800131c:	f7ff ff8e 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SysTick_Config+0x40>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001326:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x40>)
 8001328:	2207      	movs	r2, #7
 800132a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff ff47 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001352:	b580      	push	{r7, lr}
 8001354:	b086      	sub	sp, #24
 8001356:	af00      	add	r7, sp, #0
 8001358:	4603      	mov	r3, r0
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001364:	f7ff ff5c 	bl	8001220 <__NVIC_GetPriorityGrouping>
 8001368:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	68b9      	ldr	r1, [r7, #8]
 800136e:	6978      	ldr	r0, [r7, #20]
 8001370:	f7ff ff8e 	bl	8001290 <NVIC_EncodePriority>
 8001374:	4602      	mov	r2, r0
 8001376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	bf00      	nop
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffb0 	bl	80012f8 <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e06c      	b.n	8001490 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d106      	bne.n	80013ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2223      	movs	r2, #35	; 0x23
 80013c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fc69 	bl	8000ca0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_ETH_Init+0xf4>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a30      	ldr	r2, [pc, #192]	; (8001498 <HAL_ETH_Init+0xf4>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <HAL_ETH_Init+0xf4>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ea:	4b2c      	ldr	r3, [pc, #176]	; (800149c <HAL_ETH_Init+0xf8>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a2b      	ldr	r2, [pc, #172]	; (800149c <HAL_ETH_Init+0xf8>)
 80013f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013f6:	4b29      	ldr	r3, [pc, #164]	; (800149c <HAL_ETH_Init+0xf8>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	4927      	ldr	r1, [pc, #156]	; (800149c <HAL_ETH_Init+0xf8>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001404:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_ETH_Init+0xf8>)
 8001406:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800141e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff feaa 	bl	8001178 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001426:	e011      	b.n	800144c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001428:	f7ff fea6 	bl	8001178 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001436:	d909      	bls.n	800144c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2204      	movs	r2, #4
 800143c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	22e0      	movs	r2, #224	; 0xe0
 8001444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e021      	b.n	8001490 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1e4      	bne.n	8001428 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f944 	bl	80016ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f9eb 	bl	8001840 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 fa41 	bl	80018f2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	461a      	mov	r2, r3
 8001476:	2100      	movs	r1, #0
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 f9a9 	bl	80017d0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2210      	movs	r2, #16
 800148a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40013800 	.word	0x40013800

080014a0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <ETH_SetMACConfig+0x134>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7c1b      	ldrb	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d102      	bne.n	80014c8 <ETH_SetMACConfig+0x28>
 80014c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014c6:	e000      	b.n	80014ca <ETH_SetMACConfig+0x2a>
 80014c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	7c5b      	ldrb	r3, [r3, #17]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d102      	bne.n	80014d8 <ETH_SetMACConfig+0x38>
 80014d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d6:	e000      	b.n	80014da <ETH_SetMACConfig+0x3a>
 80014d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	7fdb      	ldrb	r3, [r3, #31]
 80014e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	7f92      	ldrb	r2, [r2, #30]
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d102      	bne.n	80014fe <ETH_SetMACConfig+0x5e>
 80014f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014fc:	e000      	b.n	8001500 <ETH_SetMACConfig+0x60>
 80014fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8001500:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001508:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800150e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	791b      	ldrb	r3, [r3, #4]
 8001514:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001516:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800151e:	2a00      	cmp	r2, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetMACConfig+0x88>
 8001522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001526:	e000      	b.n	800152a <ETH_SetMACConfig+0x8a>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800152a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	7bdb      	ldrb	r3, [r3, #15]
 8001530:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001532:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001540:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001542:	4313      	orrs	r3, r2
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800155a:	2001      	movs	r0, #1
 800155c:	f7ff fe18 	bl	8001190 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001586:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 800158c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001594:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800159c:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015a4:	4313      	orrs	r3, r2
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff fde7 	bl	8001190 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	ff20810f 	.word	0xff20810f

080015d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <ETH_SetDMAConfig+0x110>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7b1b      	ldrb	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <ETH_SetDMAConfig+0x2c>
 80015fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001602:	e000      	b.n	8001606 <ETH_SetDMAConfig+0x2e>
 8001604:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	7b5b      	ldrb	r3, [r3, #13]
 800160a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800160c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	7f52      	ldrb	r2, [r2, #29]
 8001612:	2a00      	cmp	r2, #0
 8001614:	d102      	bne.n	800161c <ETH_SetDMAConfig+0x44>
 8001616:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800161a:	e000      	b.n	800161e <ETH_SetDMAConfig+0x46>
 800161c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800161e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7b9b      	ldrb	r3, [r3, #14]
 8001624:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001626:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800162c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7f1b      	ldrb	r3, [r3, #28]
 8001632:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001634:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	7f9b      	ldrb	r3, [r3, #30]
 800163a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800163c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001642:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800164a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800164c:	4313      	orrs	r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	461a      	mov	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fd8e 	bl	8001190 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800167c:	461a      	mov	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800168c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001692:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001698:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff fd5f 	bl	8001190 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	f8de3f23 	.word	0xf8de3f23

080016ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0a6      	sub	sp, #152	; 0x98
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001700:	2300      	movs	r3, #0
 8001702:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001728:	2300      	movs	r3, #0
 800172a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001732:	2300      	movs	r3, #0
 8001734:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800174e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001758:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fe9a 	bl	80014a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800176c:	2301      	movs	r3, #1
 800176e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001770:	2301      	movs	r3, #1
 8001772:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001774:	2301      	movs	r3, #1
 8001776:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001792:	2301      	movs	r3, #1
 8001794:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001798:	2301      	movs	r3, #1
 800179a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4619      	mov	r1, r3
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f7ff ff08 	bl	80015d8 <ETH_SetDMAConfig>
}
 80017c8:	bf00      	nop
 80017ca:	3798      	adds	r7, #152	; 0x98
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3305      	adds	r3, #5
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	3204      	adds	r2, #4
 80017e8:	7812      	ldrb	r2, [r2, #0]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017ee:	68ba      	ldr	r2, [r7, #8]
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <ETH_MACAddressConfig+0x68>)
 80017f2:	4413      	add	r3, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3303      	adds	r3, #3
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	061a      	lsls	r2, r3, #24
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3302      	adds	r3, #2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	041b      	lsls	r3, r3, #16
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3301      	adds	r3, #1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	021b      	lsls	r3, r3, #8
 8001814:	4313      	orrs	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <ETH_MACAddressConfig+0x6c>)
 8001822:	4413      	add	r3, r2
 8001824:	461a      	mov	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	6013      	str	r3, [r2, #0]
}
 800182a:	bf00      	nop
 800182c:	371c      	adds	r7, #28
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40028040 	.word	0x40028040
 800183c:	40028044 	.word	0x40028044

08001840 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e03e      	b.n	80018cc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68d9      	ldr	r1, [r3, #12]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	3206      	adds	r2, #6
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d80c      	bhi.n	80018b0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68d9      	ldr	r1, [r3, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	440b      	add	r3, r1
 80018a8:	461a      	mov	r2, r3
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	e004      	b.n	80018ba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	461a      	mov	r2, r3
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	3301      	adds	r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b03      	cmp	r3, #3
 80018d0:	d9bd      	bls.n	800184e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018e4:	611a      	str	r2, [r3, #16]
}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	e046      	b.n	800198e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6919      	ldr	r1, [r3, #16]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800193c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001944:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	3212      	adds	r2, #18
 800195a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d80c      	bhi.n	800197e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6919      	ldr	r1, [r3, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	461a      	mov	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	e004      	b.n	8001988 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	461a      	mov	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	3301      	adds	r3, #1
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d9b5      	bls.n	8001900 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691a      	ldr	r2, [r3, #16]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019be:	60da      	str	r2, [r3, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e177      	b.n	8001cd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 8166 	bne.w	8001cd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d130      	bne.n	8001a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d017      	beq.n	8001abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80c0 	beq.w	8001cd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a61      	ldr	r2, [pc, #388]	; (8001cf4 <HAL_GPIO_Init+0x328>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_GPIO_Init+0x32c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d037      	beq.n	8001c0a <HAL_GPIO_Init+0x23e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <HAL_GPIO_Init+0x330>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d031      	beq.n	8001c06 <HAL_GPIO_Init+0x23a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a56      	ldr	r2, [pc, #344]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d02b      	beq.n	8001c02 <HAL_GPIO_Init+0x236>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a55      	ldr	r2, [pc, #340]	; (8001d04 <HAL_GPIO_Init+0x338>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d025      	beq.n	8001bfe <HAL_GPIO_Init+0x232>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a54      	ldr	r2, [pc, #336]	; (8001d08 <HAL_GPIO_Init+0x33c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d01f      	beq.n	8001bfa <HAL_GPIO_Init+0x22e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a53      	ldr	r2, [pc, #332]	; (8001d0c <HAL_GPIO_Init+0x340>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d019      	beq.n	8001bf6 <HAL_GPIO_Init+0x22a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_GPIO_Init+0x344>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a51      	ldr	r2, [pc, #324]	; (8001d14 <HAL_GPIO_Init+0x348>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d00d      	beq.n	8001bee <HAL_GPIO_Init+0x222>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a50      	ldr	r2, [pc, #320]	; (8001d18 <HAL_GPIO_Init+0x34c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d007      	beq.n	8001bea <HAL_GPIO_Init+0x21e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a4f      	ldr	r2, [pc, #316]	; (8001d1c <HAL_GPIO_Init+0x350>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d101      	bne.n	8001be6 <HAL_GPIO_Init+0x21a>
 8001be2:	2309      	movs	r3, #9
 8001be4:	e012      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001be6:	230a      	movs	r3, #10
 8001be8:	e010      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bea:	2308      	movs	r3, #8
 8001bec:	e00e      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bee:	2307      	movs	r3, #7
 8001bf0:	e00c      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	e00a      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x240>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c1c:	4935      	ldr	r1, [pc, #212]	; (8001cf4 <HAL_GPIO_Init+0x328>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a34      	ldr	r2, [pc, #208]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a29      	ldr	r2, [pc, #164]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7e:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_GPIO_Init+0x354>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	f67f ae84 	bls.w	80019e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40021400 	.word	0x40021400
 8001d10:	40021800 	.word	0x40021800
 8001d14:	40021c00 	.word	0x40021c00
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40022400 	.word	0x40022400
 8001d20:	40013c00 	.word	0x40013c00

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
 8001d30:	4613      	mov	r3, r2
 8001d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d34:	787b      	ldrb	r3, [r7, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d40:	e003      	b.n	8001d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d58:	b08f      	sub	sp, #60	; 0x3c
 8001d5a:	af0a      	add	r7, sp, #40	; 0x28
 8001d5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e10f      	b.n	8001f88 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d106      	bne.n	8001d88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff f89a 	bl	8000ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 f9ad 	bl	8003106 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	687e      	ldr	r6, [r7, #4]
 8001db4:	466d      	mov	r5, sp
 8001db6:	f106 0410 	add.w	r4, r6, #16
 8001dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dca:	1d33      	adds	r3, r6, #4
 8001dcc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dce:	6838      	ldr	r0, [r7, #0]
 8001dd0:	f001 f938 	bl	8003044 <USB_CoreInit>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d005      	beq.n	8001de6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0d0      	b.n	8001f88 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 f99b 	bl	8003128 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e04a      	b.n	8001e8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	333d      	adds	r3, #61	; 0x3d
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	333c      	adds	r3, #60	; 0x3c
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	b298      	uxth	r0, r3
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3344      	adds	r3, #68	; 0x44
 8001e34:	4602      	mov	r2, r0
 8001e36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	3340      	adds	r3, #64	; 0x40
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e4c:	7bfa      	ldrb	r2, [r7, #15]
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	4413      	add	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3348      	adds	r3, #72	; 0x48
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	334c      	adds	r3, #76	; 0x4c
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	3354      	adds	r3, #84	; 0x54
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e88:	7bfb      	ldrb	r3, [r7, #15]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3af      	bcc.n	8001df8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e044      	b.n	8001f28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ee0:	7bfa      	ldrb	r2, [r7, #15]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	3301      	adds	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	7bfa      	ldrb	r2, [r7, #15]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d3b5      	bcc.n	8001e9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	687e      	ldr	r6, [r7, #4]
 8001f3a:	466d      	mov	r5, sp
 8001f3c:	f106 0410 	add.w	r4, r6, #16
 8001f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f50:	1d33      	adds	r3, r6, #4
 8001f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f54:	6838      	ldr	r0, [r7, #0]
 8001f56:	f001 f933 	bl	80031c0 <USB_DevInit>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e00d      	b.n	8001f88 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f001 fafe 	bl	8003582 <USB_DevDisconnect>

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e267      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d075      	beq.n	800209a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fae:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fba:	4b85      	ldr	r3, [pc, #532]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d112      	bne.n	8001fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc6:	4b82      	ldr	r3, [pc, #520]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fd2:	d10b      	bne.n	8001fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	4b7e      	ldr	r3, [pc, #504]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d05b      	beq.n	8002098 <HAL_RCC_OscConfig+0x108>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d157      	bne.n	8002098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e242      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff4:	d106      	bne.n	8002004 <HAL_RCC_OscConfig+0x74>
 8001ff6:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a75      	ldr	r2, [pc, #468]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xb0>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x98>
 800200e:	4b70      	ldr	r3, [pc, #448]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a6f      	ldr	r2, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6d      	ldr	r3, [pc, #436]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6c      	ldr	r2, [pc, #432]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xb0>
 8002028:	4b69      	ldr	r3, [pc, #420]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a68      	ldr	r2, [pc, #416]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b66      	ldr	r3, [pc, #408]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a65      	ldr	r2, [pc, #404]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff f896 	bl	8001178 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff f892 	bl	8001178 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e207      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xc0>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff f882 	bl	8001178 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff f87e 	bl	8001178 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1f3      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0xe8>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020a6:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020be:	4b44      	ldr	r3, [pc, #272]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x152>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1c7      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4937      	ldr	r1, [pc, #220]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <HAL_RCC_OscConfig+0x244>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002106:	f7ff f837 	bl	8001178 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210e:	f7ff f833 	bl	8001178 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1a8      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4925      	ldr	r1, [pc, #148]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_RCC_OscConfig+0x244>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff f816 	bl	8001178 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff f812 	bl	8001178 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e187      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d036      	beq.n	80021e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d016      	beq.n	80021b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_RCC_OscConfig+0x248>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe fff6 	bl	8001178 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002190:	f7fe fff2 	bl	8001178 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e167      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_OscConfig+0x240>)
 80021a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x200>
 80021ae:	e01b      	b.n	80021e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b0:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_OscConfig+0x248>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7fe ffdf 	bl	8001178 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	e00e      	b.n	80021dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe ffdb 	bl	8001178 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d907      	bls.n	80021dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e150      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
 80021d0:	40023800 	.word	0x40023800
 80021d4:	42470000 	.word	0x42470000
 80021d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	4b88      	ldr	r3, [pc, #544]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 80021de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ea      	bne.n	80021be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8097 	beq.w	8002324 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b81      	ldr	r3, [pc, #516]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10f      	bne.n	8002226 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a7c      	ldr	r2, [pc, #496]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b7a      	ldr	r3, [pc, #488]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b77      	ldr	r3, [pc, #476]	; (8002404 <HAL_RCC_OscConfig+0x474>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b74      	ldr	r3, [pc, #464]	; (8002404 <HAL_RCC_OscConfig+0x474>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a73      	ldr	r2, [pc, #460]	; (8002404 <HAL_RCC_OscConfig+0x474>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7fe ff9b 	bl	8001178 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe ff97 	bl	8001178 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e10c      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <HAL_RCC_OscConfig+0x474>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x2ea>
 800226c:	4b64      	ldr	r3, [pc, #400]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 800226e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002270:	4a63      	ldr	r2, [pc, #396]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6713      	str	r3, [r2, #112]	; 0x70
 8002278:	e01c      	b.n	80022b4 <HAL_RCC_OscConfig+0x324>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b05      	cmp	r3, #5
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x30c>
 8002282:	4b5f      	ldr	r3, [pc, #380]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a5e      	ldr	r2, [pc, #376]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	4b5c      	ldr	r3, [pc, #368]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002292:	4a5b      	ldr	r2, [pc, #364]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6713      	str	r3, [r2, #112]	; 0x70
 800229a:	e00b      	b.n	80022b4 <HAL_RCC_OscConfig+0x324>
 800229c:	4b58      	ldr	r3, [pc, #352]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a57      	ldr	r2, [pc, #348]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 80022a2:	f023 0301 	bic.w	r3, r3, #1
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
 80022a8:	4b55      	ldr	r3, [pc, #340]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ac:	4a54      	ldr	r2, [pc, #336]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 80022ae:	f023 0304 	bic.w	r3, r3, #4
 80022b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d015      	beq.n	80022e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7fe ff5c 	bl	8001178 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7fe ff58 	bl	8001178 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e0cb      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022da:	4b49      	ldr	r3, [pc, #292]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0ee      	beq.n	80022c4 <HAL_RCC_OscConfig+0x334>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7fe ff46 	bl	8001178 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe ff42 	bl	8001178 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0b5      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002306:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ee      	bne.n	80022f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002312:	7dfb      	ldrb	r3, [r7, #23]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	4a38      	ldr	r2, [pc, #224]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 80a1 	beq.w	8002470 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800232e:	4b34      	ldr	r3, [pc, #208]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b08      	cmp	r3, #8
 8002338:	d05c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b02      	cmp	r3, #2
 8002340:	d141      	bne.n	80023c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002342:	4b31      	ldr	r3, [pc, #196]	; (8002408 <HAL_RCC_OscConfig+0x478>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe ff16 	bl	8001178 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002350:	f7fe ff12 	bl	8001178 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e087      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	4b27      	ldr	r3, [pc, #156]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	491b      	ldr	r1, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 8002394:	4313      	orrs	r3, r2
 8002396:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x478>)
 800239a:	2201      	movs	r2, #1
 800239c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239e:	f7fe feeb 	bl	8001178 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe fee7 	bl	8001178 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e05c      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b8:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0f0      	beq.n	80023a6 <HAL_RCC_OscConfig+0x416>
 80023c4:	e054      	b.n	8002470 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_OscConfig+0x478>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fed4 	bl	8001178 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fed0 	bl	8001178 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e045      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_RCC_OscConfig+0x470>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x444>
 80023f2:	e03d      	b.n	8002470 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e038      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
 8002400:	40023800 	.word	0x40023800
 8002404:	40007000 	.word	0x40007000
 8002408:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_OscConfig+0x4ec>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d028      	beq.n	800246c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d121      	bne.n	800246c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002432:	429a      	cmp	r2, r3
 8002434:	d11a      	bne.n	800246c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800243c:	4013      	ands	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002442:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002444:	4293      	cmp	r3, r2
 8002446:	d111      	bne.n	800246c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	085b      	lsrs	r3, r3, #1
 8002454:	3b01      	subs	r3, #1
 8002456:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d107      	bne.n	800246c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002466:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800

08002480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0cc      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002494:	4b68      	ldr	r3, [pc, #416]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d90c      	bls.n	80024bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a2:	4b65      	ldr	r3, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d044      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d119      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d003      	beq.n	800253e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253a:	2b03      	cmp	r3, #3
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253e:	4b3f      	ldr	r3, [pc, #252]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06f      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254e:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e067      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f023 0203 	bic.w	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	4934      	ldr	r1, [pc, #208]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	4313      	orrs	r3, r2
 800256e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002570:	f7fe fe02 	bl	8001178 <HAL_GetTick>
 8002574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002576:	e00a      	b.n	800258e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002578:	f7fe fdfe 	bl	8001178 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	; 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e04f      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 020c 	and.w	r2, r3, #12
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	429a      	cmp	r2, r3
 800259e:	d1eb      	bne.n	8002578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d20c      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f821 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c0>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1c4>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1c8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fd62 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40023c00 	.word	0x40023c00
 800263c:	40023800 	.word	0x40023800
 8002640:	08003fb8 	.word	0x08003fb8
 8002644:	20000034 	.word	0x20000034
 8002648:	20000038 	.word	0x20000038

0800264c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002650:	b094      	sub	sp, #80	; 0x50
 8002652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002654:	2300      	movs	r3, #0
 8002656:	647b      	str	r3, [r7, #68]	; 0x44
 8002658:	2300      	movs	r3, #0
 800265a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800265c:	2300      	movs	r3, #0
 800265e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002664:	4b79      	ldr	r3, [pc, #484]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d00d      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x40>
 8002670:	2b08      	cmp	r3, #8
 8002672:	f200 80e1 	bhi.w	8002838 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0x34>
 800267a:	2b04      	cmp	r3, #4
 800267c:	d003      	beq.n	8002686 <HAL_RCC_GetSysClockFreq+0x3a>
 800267e:	e0db      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b73      	ldr	r3, [pc, #460]	; (8002850 <HAL_RCC_GetSysClockFreq+0x204>)
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002684:	e0db      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002686:	4b73      	ldr	r3, [pc, #460]	; (8002854 <HAL_RCC_GetSysClockFreq+0x208>)
 8002688:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800268a:	e0d8      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800268c:	4b6f      	ldr	r3, [pc, #444]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002696:	4b6d      	ldr	r3, [pc, #436]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d063      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a2:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	099b      	lsrs	r3, r3, #6
 80026a8:	2200      	movs	r2, #0
 80026aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
 80026b6:	2300      	movs	r3, #0
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
 80026ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026be:	4622      	mov	r2, r4
 80026c0:	462b      	mov	r3, r5
 80026c2:	f04f 0000 	mov.w	r0, #0
 80026c6:	f04f 0100 	mov.w	r1, #0
 80026ca:	0159      	lsls	r1, r3, #5
 80026cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026d0:	0150      	lsls	r0, r2, #5
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4621      	mov	r1, r4
 80026d8:	1a51      	subs	r1, r2, r1
 80026da:	6139      	str	r1, [r7, #16]
 80026dc:	4629      	mov	r1, r5
 80026de:	eb63 0301 	sbc.w	r3, r3, r1
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026f0:	4659      	mov	r1, fp
 80026f2:	018b      	lsls	r3, r1, #6
 80026f4:	4651      	mov	r1, sl
 80026f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026fa:	4651      	mov	r1, sl
 80026fc:	018a      	lsls	r2, r1, #6
 80026fe:	4651      	mov	r1, sl
 8002700:	ebb2 0801 	subs.w	r8, r2, r1
 8002704:	4659      	mov	r1, fp
 8002706:	eb63 0901 	sbc.w	r9, r3, r1
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002716:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800271a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800271e:	4690      	mov	r8, r2
 8002720:	4699      	mov	r9, r3
 8002722:	4623      	mov	r3, r4
 8002724:	eb18 0303 	adds.w	r3, r8, r3
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	462b      	mov	r3, r5
 800272c:	eb49 0303 	adc.w	r3, r9, r3
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800273e:	4629      	mov	r1, r5
 8002740:	024b      	lsls	r3, r1, #9
 8002742:	4621      	mov	r1, r4
 8002744:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002748:	4621      	mov	r1, r4
 800274a:	024a      	lsls	r2, r1, #9
 800274c:	4610      	mov	r0, r2
 800274e:	4619      	mov	r1, r3
 8002750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002752:	2200      	movs	r2, #0
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
 8002756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002758:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800275c:	f7fd fdc8 	bl	80002f0 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4613      	mov	r3, r2
 8002766:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002768:	e058      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276a:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	2200      	movs	r2, #0
 8002772:	4618      	mov	r0, r3
 8002774:	4611      	mov	r1, r2
 8002776:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800277a:	623b      	str	r3, [r7, #32]
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
 8002780:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002784:	4642      	mov	r2, r8
 8002786:	464b      	mov	r3, r9
 8002788:	f04f 0000 	mov.w	r0, #0
 800278c:	f04f 0100 	mov.w	r1, #0
 8002790:	0159      	lsls	r1, r3, #5
 8002792:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002796:	0150      	lsls	r0, r2, #5
 8002798:	4602      	mov	r2, r0
 800279a:	460b      	mov	r3, r1
 800279c:	4641      	mov	r1, r8
 800279e:	ebb2 0a01 	subs.w	sl, r2, r1
 80027a2:	4649      	mov	r1, r9
 80027a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027bc:	ebb2 040a 	subs.w	r4, r2, sl
 80027c0:	eb63 050b 	sbc.w	r5, r3, fp
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	f04f 0300 	mov.w	r3, #0
 80027cc:	00eb      	lsls	r3, r5, #3
 80027ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027d2:	00e2      	lsls	r2, r4, #3
 80027d4:	4614      	mov	r4, r2
 80027d6:	461d      	mov	r5, r3
 80027d8:	4643      	mov	r3, r8
 80027da:	18e3      	adds	r3, r4, r3
 80027dc:	603b      	str	r3, [r7, #0]
 80027de:	464b      	mov	r3, r9
 80027e0:	eb45 0303 	adc.w	r3, r5, r3
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027f2:	4629      	mov	r1, r5
 80027f4:	028b      	lsls	r3, r1, #10
 80027f6:	4621      	mov	r1, r4
 80027f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027fc:	4621      	mov	r1, r4
 80027fe:	028a      	lsls	r2, r1, #10
 8002800:	4610      	mov	r0, r2
 8002802:	4619      	mov	r1, r3
 8002804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002806:	2200      	movs	r2, #0
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	61fa      	str	r2, [r7, #28]
 800280c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002810:	f7fd fd6e 	bl	80002f0 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4613      	mov	r3, r2
 800281a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_GetSysClockFreq+0x200>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	0c1b      	lsrs	r3, r3, #16
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	3301      	adds	r3, #1
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800282c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800282e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002836:	e002      	b.n	800283e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_RCC_GetSysClockFreq+0x204>)
 800283a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800283c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800283e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002840:	4618      	mov	r0, r3
 8002842:	3750      	adds	r7, #80	; 0x50
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	00f42400 	.word	0x00f42400
 8002854:	007a1200 	.word	0x007a1200

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_RCC_GetHCLKFreq+0x14>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000034 	.word	0x20000034

08002870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002874:	f7ff fff0 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	08003fc8 	.word	0x08003fc8

08002898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800289c:	f7ff ffdc 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0b5b      	lsrs	r3, r3, #13
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08003fc8 	.word	0x08003fc8

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e03f      	b.n	8002952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe faa0 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f929 	bl	8002b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b08a      	sub	sp, #40	; 0x28
 800295e:	af02      	add	r7, sp, #8
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4613      	mov	r3, r2
 8002968:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b20      	cmp	r3, #32
 8002978:	d17c      	bne.n	8002a74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d002      	beq.n	8002986 <HAL_UART_Transmit+0x2c>
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e075      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002990:	2b01      	cmp	r3, #1
 8002992:	d101      	bne.n	8002998 <HAL_UART_Transmit+0x3e>
 8002994:	2302      	movs	r3, #2
 8002996:	e06e      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2221      	movs	r2, #33	; 0x21
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ae:	f7fe fbe3 	bl	8001178 <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	88fa      	ldrh	r2, [r7, #6]
 80029be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d108      	bne.n	80029dc <HAL_UART_Transmit+0x82>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e003      	b.n	80029e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029ec:	e02a      	b.n	8002a44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2200      	movs	r2, #0
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f840 	bl	8002a7e <UART_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e036      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10b      	bne.n	8002a26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	3302      	adds	r3, #2
 8002a22:	61bb      	str	r3, [r7, #24]
 8002a24:	e007      	b.n	8002a36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	3301      	adds	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1cf      	bne.n	80029ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f810 	bl	8002a7e <UART_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e006      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
  }
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b090      	sub	sp, #64	; 0x40
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	60f8      	str	r0, [r7, #12]
 8002a86:	60b9      	str	r1, [r7, #8]
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a8e:	e050      	b.n	8002b32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a96:	d04c      	beq.n	8002b32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <UART_WaitOnFlagUntilTimeout+0x30>
 8002a9e:	f7fe fb6b 	bl	8001178 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d241      	bcs.n	8002b32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	e853 3f00 	ldrex	r3, [r3]
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330c      	adds	r3, #12
 8002acc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ace:	637a      	str	r2, [r7, #52]	; 0x34
 8002ad0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ad4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e5      	bne.n	8002aae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	613b      	str	r3, [r7, #16]
   return(result);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3314      	adds	r3, #20
 8002b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b02:	623a      	str	r2, [r7, #32]
 8002b04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b06:	69f9      	ldr	r1, [r7, #28]
 8002b08:	6a3a      	ldr	r2, [r7, #32]
 8002b0a:	e841 2300 	strex	r3, r2, [r1]
 8002b0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1e5      	bne.n	8002ae2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2220      	movs	r2, #32
 8002b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e00f      	b.n	8002b52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	461a      	mov	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d09f      	beq.n	8002a90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3740      	adds	r7, #64	; 0x40
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b0c0      	sub	sp, #256	; 0x100
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	ea40 0301 	orr.w	r3, r0, r1
 8002b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	431a      	orrs	r2, r3
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bb4:	f021 010c 	bic.w	r1, r1, #12
 8002bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd6:	6999      	ldr	r1, [r3, #24]
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	ea40 0301 	orr.w	r3, r0, r1
 8002be2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	4b8f      	ldr	r3, [pc, #572]	; (8002e28 <UART_SetConfig+0x2cc>)
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d005      	beq.n	8002bfc <UART_SetConfig+0xa0>
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	4b8d      	ldr	r3, [pc, #564]	; (8002e2c <UART_SetConfig+0x2d0>)
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d104      	bne.n	8002c06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002bfc:	f7ff fe4c 	bl	8002898 <HAL_RCC_GetPCLK2Freq>
 8002c00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c04:	e003      	b.n	8002c0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c06:	f7ff fe33 	bl	8002870 <HAL_RCC_GetPCLK1Freq>
 8002c0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c18:	f040 810c 	bne.w	8002e34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c2e:	4622      	mov	r2, r4
 8002c30:	462b      	mov	r3, r5
 8002c32:	1891      	adds	r1, r2, r2
 8002c34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002c36:	415b      	adcs	r3, r3
 8002c38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002c3e:	4621      	mov	r1, r4
 8002c40:	eb12 0801 	adds.w	r8, r2, r1
 8002c44:	4629      	mov	r1, r5
 8002c46:	eb43 0901 	adc.w	r9, r3, r1
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c5e:	4690      	mov	r8, r2
 8002c60:	4699      	mov	r9, r3
 8002c62:	4623      	mov	r3, r4
 8002c64:	eb18 0303 	adds.w	r3, r8, r3
 8002c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002c6c:	462b      	mov	r3, r5
 8002c6e:	eb49 0303 	adc.w	r3, r9, r3
 8002c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	18db      	adds	r3, r3, r3
 8002c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002c90:	4613      	mov	r3, r2
 8002c92:	eb42 0303 	adc.w	r3, r2, r3
 8002c96:	657b      	str	r3, [r7, #84]	; 0x54
 8002c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002c9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ca0:	f7fd fb26 	bl	80002f0 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002caa:	fba3 2302 	umull	r2, r3, r3, r2
 8002cae:	095b      	lsrs	r3, r3, #5
 8002cb0:	011c      	lsls	r4, r3, #4
 8002cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002cbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002cc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002cc4:	4642      	mov	r2, r8
 8002cc6:	464b      	mov	r3, r9
 8002cc8:	1891      	adds	r1, r2, r2
 8002cca:	64b9      	str	r1, [r7, #72]	; 0x48
 8002ccc:	415b      	adcs	r3, r3
 8002cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002cd4:	4641      	mov	r1, r8
 8002cd6:	eb12 0a01 	adds.w	sl, r2, r1
 8002cda:	4649      	mov	r1, r9
 8002cdc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002cec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf4:	4692      	mov	sl, r2
 8002cf6:	469b      	mov	fp, r3
 8002cf8:	4643      	mov	r3, r8
 8002cfa:	eb1a 0303 	adds.w	r3, sl, r3
 8002cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d02:	464b      	mov	r3, r9
 8002d04:	eb4b 0303 	adc.w	r3, fp, r3
 8002d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d20:	460b      	mov	r3, r1
 8002d22:	18db      	adds	r3, r3, r3
 8002d24:	643b      	str	r3, [r7, #64]	; 0x40
 8002d26:	4613      	mov	r3, r2
 8002d28:	eb42 0303 	adc.w	r3, r2, r3
 8002d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002d36:	f7fd fadb 	bl	80002f0 <__aeabi_uldivmod>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4b3b      	ldr	r3, [pc, #236]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002d42:	fba3 2301 	umull	r2, r3, r3, r1
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2264      	movs	r2, #100	; 0x64
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	1acb      	subs	r3, r1, r3
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002d56:	4b36      	ldr	r3, [pc, #216]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002d58:	fba3 2302 	umull	r2, r3, r3, r2
 8002d5c:	095b      	lsrs	r3, r3, #5
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d64:	441c      	add	r4, r3
 8002d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002d74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002d78:	4642      	mov	r2, r8
 8002d7a:	464b      	mov	r3, r9
 8002d7c:	1891      	adds	r1, r2, r2
 8002d7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d80:	415b      	adcs	r3, r3
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d88:	4641      	mov	r1, r8
 8002d8a:	1851      	adds	r1, r2, r1
 8002d8c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d8e:	4649      	mov	r1, r9
 8002d90:	414b      	adcs	r3, r1
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002da0:	4659      	mov	r1, fp
 8002da2:	00cb      	lsls	r3, r1, #3
 8002da4:	4651      	mov	r1, sl
 8002da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002daa:	4651      	mov	r1, sl
 8002dac:	00ca      	lsls	r2, r1, #3
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	4642      	mov	r2, r8
 8002db6:	189b      	adds	r3, r3, r2
 8002db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dbc:	464b      	mov	r3, r9
 8002dbe:	460a      	mov	r2, r1
 8002dc0:	eb42 0303 	adc.w	r3, r2, r3
 8002dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002dd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ddc:	460b      	mov	r3, r1
 8002dde:	18db      	adds	r3, r3, r3
 8002de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002de2:	4613      	mov	r3, r2
 8002de4:	eb42 0303 	adc.w	r3, r2, r3
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002df2:	f7fd fa7d 	bl	80002f0 <__aeabi_uldivmod>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002e00:	095b      	lsrs	r3, r3, #5
 8002e02:	2164      	movs	r1, #100	; 0x64
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	3332      	adds	r3, #50	; 0x32
 8002e0e:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <UART_SetConfig+0x2d4>)
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	f003 0207 	and.w	r2, r3, #7
 8002e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4422      	add	r2, r4
 8002e22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e24:	e105      	b.n	8003032 <UART_SetConfig+0x4d6>
 8002e26:	bf00      	nop
 8002e28:	40011000 	.word	0x40011000
 8002e2c:	40011400 	.word	0x40011400
 8002e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002e46:	4642      	mov	r2, r8
 8002e48:	464b      	mov	r3, r9
 8002e4a:	1891      	adds	r1, r2, r2
 8002e4c:	6239      	str	r1, [r7, #32]
 8002e4e:	415b      	adcs	r3, r3
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
 8002e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e56:	4641      	mov	r1, r8
 8002e58:	1854      	adds	r4, r2, r1
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	eb43 0501 	adc.w	r5, r3, r1
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	00eb      	lsls	r3, r5, #3
 8002e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e6e:	00e2      	lsls	r2, r4, #3
 8002e70:	4614      	mov	r4, r2
 8002e72:	461d      	mov	r5, r3
 8002e74:	4643      	mov	r3, r8
 8002e76:	18e3      	adds	r3, r4, r3
 8002e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002e7c:	464b      	mov	r3, r9
 8002e7e:	eb45 0303 	adc.w	r3, r5, r3
 8002e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	008b      	lsls	r3, r1, #2
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eac:	4621      	mov	r1, r4
 8002eae:	008a      	lsls	r2, r1, #2
 8002eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002eb4:	f7fd fa1c 	bl	80002f0 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4b60      	ldr	r3, [pc, #384]	; (8003040 <UART_SetConfig+0x4e4>)
 8002ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	011c      	lsls	r4, r3, #4
 8002ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ed0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ed8:	4642      	mov	r2, r8
 8002eda:	464b      	mov	r3, r9
 8002edc:	1891      	adds	r1, r2, r2
 8002ede:	61b9      	str	r1, [r7, #24]
 8002ee0:	415b      	adcs	r3, r3
 8002ee2:	61fb      	str	r3, [r7, #28]
 8002ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ee8:	4641      	mov	r1, r8
 8002eea:	1851      	adds	r1, r2, r1
 8002eec:	6139      	str	r1, [r7, #16]
 8002eee:	4649      	mov	r1, r9
 8002ef0:	414b      	adcs	r3, r1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f00:	4659      	mov	r1, fp
 8002f02:	00cb      	lsls	r3, r1, #3
 8002f04:	4651      	mov	r1, sl
 8002f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	00ca      	lsls	r2, r1, #3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	4642      	mov	r2, r8
 8002f16:	189b      	adds	r3, r3, r2
 8002f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f1c:	464b      	mov	r3, r9
 8002f1e:	460a      	mov	r2, r1
 8002f20:	eb42 0303 	adc.w	r3, r2, r3
 8002f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002f40:	4649      	mov	r1, r9
 8002f42:	008b      	lsls	r3, r1, #2
 8002f44:	4641      	mov	r1, r8
 8002f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	008a      	lsls	r2, r1, #2
 8002f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002f52:	f7fd f9cd 	bl	80002f0 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4b39      	ldr	r3, [pc, #228]	; (8003040 <UART_SetConfig+0x4e4>)
 8002f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	2164      	movs	r1, #100	; 0x64
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	3332      	adds	r3, #50	; 0x32
 8002f6e:	4a34      	ldr	r2, [pc, #208]	; (8003040 <UART_SetConfig+0x4e4>)
 8002f70:	fba2 2303 	umull	r2, r3, r2, r3
 8002f74:	095b      	lsrs	r3, r3, #5
 8002f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f7a:	441c      	add	r4, r3
 8002f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f80:	2200      	movs	r2, #0
 8002f82:	673b      	str	r3, [r7, #112]	; 0x70
 8002f84:	677a      	str	r2, [r7, #116]	; 0x74
 8002f86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002f8a:	4642      	mov	r2, r8
 8002f8c:	464b      	mov	r3, r9
 8002f8e:	1891      	adds	r1, r2, r2
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	415b      	adcs	r3, r3
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f9a:	4641      	mov	r1, r8
 8002f9c:	1851      	adds	r1, r2, r1
 8002f9e:	6039      	str	r1, [r7, #0]
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	414b      	adcs	r3, r1
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002fb2:	4659      	mov	r1, fp
 8002fb4:	00cb      	lsls	r3, r1, #3
 8002fb6:	4651      	mov	r1, sl
 8002fb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fbc:	4651      	mov	r1, sl
 8002fbe:	00ca      	lsls	r2, r1, #3
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4642      	mov	r2, r8
 8002fc8:	189b      	adds	r3, r3, r2
 8002fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fcc:	464b      	mov	r3, r9
 8002fce:	460a      	mov	r2, r1
 8002fd0:	eb42 0303 	adc.w	r3, r2, r3
 8002fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe0:	667a      	str	r2, [r7, #100]	; 0x64
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002fee:	4649      	mov	r1, r9
 8002ff0:	008b      	lsls	r3, r1, #2
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	008a      	lsls	r2, r1, #2
 8002ffc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003000:	f7fd f976 	bl	80002f0 <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4b0d      	ldr	r3, [pc, #52]	; (8003040 <UART_SetConfig+0x4e4>)
 800300a:	fba3 1302 	umull	r1, r3, r3, r2
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2164      	movs	r1, #100	; 0x64
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	3332      	adds	r3, #50	; 0x32
 800301c:	4a08      	ldr	r2, [pc, #32]	; (8003040 <UART_SetConfig+0x4e4>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	f003 020f 	and.w	r2, r3, #15
 8003028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4422      	add	r2, r4
 8003030:	609a      	str	r2, [r3, #8]
}
 8003032:	bf00      	nop
 8003034:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003038:	46bd      	mov	sp, r7
 800303a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800303e:	bf00      	nop
 8003040:	51eb851f 	.word	0x51eb851f

08003044 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003044:	b084      	sub	sp, #16
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	f107 001c 	add.w	r0, r7, #28
 8003052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	2b01      	cmp	r3, #1
 800305a:	d122      	bne.n	80030a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003086:	2b01      	cmp	r3, #1
 8003088:	d105      	bne.n	8003096 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 faa2 	bl	80035e0 <USB_CoreReset>
 800309c:	4603      	mov	r3, r0
 800309e:	73fb      	strb	r3, [r7, #15]
 80030a0:	e01a      	b.n	80030d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa96 	bl	80035e0 <USB_CoreReset>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80030b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	639a      	str	r2, [r3, #56]	; 0x38
 80030ca:	e005      	b.n	80030d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80030d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10b      	bne.n	80030f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f043 0206 	orr.w	r2, r3, #6
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f043 0220 	orr.w	r2, r3, #32
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003102:	b004      	add	sp, #16
 8003104:	4770      	bx	lr

08003106 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f023 0201 	bic.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	460b      	mov	r3, r1
 8003132:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003144:	78fb      	ldrb	r3, [r7, #3]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d115      	bne.n	8003176 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003156:	2001      	movs	r0, #1
 8003158:	f7fe f81a 	bl	8001190 <HAL_Delay>
      ms++;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3301      	adds	r3, #1
 8003160:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa2e 	bl	80035c4 <USB_GetMode>
 8003168:	4603      	mov	r3, r0
 800316a:	2b01      	cmp	r3, #1
 800316c:	d01e      	beq.n	80031ac <USB_SetCurrentMode+0x84>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2b31      	cmp	r3, #49	; 0x31
 8003172:	d9f0      	bls.n	8003156 <USB_SetCurrentMode+0x2e>
 8003174:	e01a      	b.n	80031ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d115      	bne.n	80031a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003188:	2001      	movs	r0, #1
 800318a:	f7fe f801 	bl	8001190 <HAL_Delay>
      ms++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3301      	adds	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa15 	bl	80035c4 <USB_GetMode>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <USB_SetCurrentMode+0x84>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2b31      	cmp	r3, #49	; 0x31
 80031a4:	d9f0      	bls.n	8003188 <USB_SetCurrentMode+0x60>
 80031a6:	e001      	b.n	80031ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e005      	b.n	80031b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b32      	cmp	r3, #50	; 0x32
 80031b0:	d101      	bne.n	80031b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e000      	b.n	80031b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80031c0:	b084      	sub	sp, #16
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80031ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	e009      	b.n	80031f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	3340      	adds	r3, #64	; 0x40
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	2200      	movs	r2, #0
 80031ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3301      	adds	r3, #1
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b0e      	cmp	r3, #14
 80031f8:	d9f2      	bls.n	80031e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80031fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d11c      	bne.n	800323a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800320e:	f043 0302 	orr.w	r3, r3, #2
 8003212:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	639a      	str	r2, [r3, #56]	; 0x38
 8003238:	e00b      	b.n	8003252 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003258:	461a      	mov	r2, r3
 800325a:	2300      	movs	r3, #0
 800325c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003264:	4619      	mov	r1, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326c:	461a      	mov	r2, r3
 800326e:	680b      	ldr	r3, [r1, #0]
 8003270:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10c      	bne.n	8003292 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d104      	bne.n	8003288 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800327e:	2100      	movs	r1, #0
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f965 	bl	8003550 <USB_SetDevSpeed>
 8003286:	e008      	b.n	800329a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003288:	2101      	movs	r1, #1
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f960 	bl	8003550 <USB_SetDevSpeed>
 8003290:	e003      	b.n	800329a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003292:	2103      	movs	r1, #3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f95b 	bl	8003550 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800329a:	2110      	movs	r1, #16
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8f3 	bl	8003488 <USB_FlushTxFifo>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f91f 	bl	80034f0 <USB_FlushRxFifo>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c2:	461a      	mov	r2, r3
 80032c4:	2300      	movs	r3, #0
 80032c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ce:	461a      	mov	r2, r3
 80032d0:	2300      	movs	r3, #0
 80032d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032da:	461a      	mov	r2, r3
 80032dc:	2300      	movs	r3, #0
 80032de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e043      	b.n	800336e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032fc:	d118      	bne.n	8003330 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003310:	461a      	mov	r2, r3
 8003312:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e013      	b.n	8003342 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	015a      	lsls	r2, r3, #5
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003326:	461a      	mov	r2, r3
 8003328:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e008      	b.n	8003342 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800333c:	461a      	mov	r2, r3
 800333e:	2300      	movs	r3, #0
 8003340:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334e:	461a      	mov	r2, r3
 8003350:	2300      	movs	r3, #0
 8003352:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003360:	461a      	mov	r2, r3
 8003362:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003366:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	3301      	adds	r3, #1
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3b7      	bcc.n	80032e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	e043      	b.n	8003404 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800338e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003392:	d118      	bne.n	80033c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10a      	bne.n	80033b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033a6:	461a      	mov	r2, r3
 80033a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e013      	b.n	80033d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033bc:	461a      	mov	r2, r3
 80033be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e008      	b.n	80033d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d2:	461a      	mov	r2, r3
 80033d4:	2300      	movs	r3, #0
 80033d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e4:	461a      	mov	r2, r3
 80033e6:	2300      	movs	r3, #0
 80033e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f6:	461a      	mov	r2, r3
 80033f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3301      	adds	r3, #1
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d3b7      	bcc.n	800337c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800341e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800342c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f043 0210 	orr.w	r2, r3, #16
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	4b0f      	ldr	r3, [pc, #60]	; (8003484 <USB_DevInit+0x2c4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800344c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	f043 0208 	orr.w	r2, r3, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800345e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d107      	bne.n	8003474 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800346c:	f043 0304 	orr.w	r3, r3, #4
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003474:	7dfb      	ldrb	r3, [r7, #23]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003480:	b004      	add	sp, #16
 8003482:	4770      	bx	lr
 8003484:	803c3800 	.word	0x803c3800

08003488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3301      	adds	r3, #1
 800349a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4a13      	ldr	r2, [pc, #76]	; (80034ec <USB_FlushTxFifo+0x64>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e01b      	b.n	80034e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	daf2      	bge.n	8003496 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	019b      	lsls	r3, r3, #6
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3301      	adds	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4a08      	ldr	r2, [pc, #32]	; (80034ec <USB_FlushTxFifo+0x64>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e006      	b.n	80034e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d0f0      	beq.n	80034c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	00030d40 	.word	0x00030d40

080034f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3301      	adds	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4a11      	ldr	r2, [pc, #68]	; (800354c <USB_FlushRxFifo+0x5c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e018      	b.n	8003540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	daf2      	bge.n	80034fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2210      	movs	r2, #16
 800351e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4a08      	ldr	r2, [pc, #32]	; (800354c <USB_FlushRxFifo+0x5c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e006      	b.n	8003540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	2b10      	cmp	r3, #16
 800353c:	d0f0      	beq.n	8003520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	00030d40 	.word	0x00030d40

08003550 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	68f9      	ldr	r1, [r7, #12]
 800356c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003570:	4313      	orrs	r3, r2
 8003572:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800359c:	f023 0303 	bic.w	r3, r3, #3
 80035a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0301 	and.w	r3, r3, #1
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3301      	adds	r3, #1
 80035f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a13      	ldr	r2, [pc, #76]	; (8003644 <USB_CoreReset+0x64>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e01b      	b.n	8003636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	daf2      	bge.n	80035ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003606:	2300      	movs	r3, #0
 8003608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	f043 0201 	orr.w	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3301      	adds	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a09      	ldr	r2, [pc, #36]	; (8003644 <USB_CoreReset+0x64>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d901      	bls.n	8003628 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e006      	b.n	8003636 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b01      	cmp	r3, #1
 8003632:	d0f0      	beq.n	8003616 <USB_CoreReset+0x36>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	00030d40 	.word	0x00030d40

08003648 <__errno>:
 8003648:	4b01      	ldr	r3, [pc, #4]	; (8003650 <__errno+0x8>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	20000040 	.word	0x20000040

08003654 <__libc_init_array>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	4d0d      	ldr	r5, [pc, #52]	; (800368c <__libc_init_array+0x38>)
 8003658:	4c0d      	ldr	r4, [pc, #52]	; (8003690 <__libc_init_array+0x3c>)
 800365a:	1b64      	subs	r4, r4, r5
 800365c:	10a4      	asrs	r4, r4, #2
 800365e:	2600      	movs	r6, #0
 8003660:	42a6      	cmp	r6, r4
 8003662:	d109      	bne.n	8003678 <__libc_init_array+0x24>
 8003664:	4d0b      	ldr	r5, [pc, #44]	; (8003694 <__libc_init_array+0x40>)
 8003666:	4c0c      	ldr	r4, [pc, #48]	; (8003698 <__libc_init_array+0x44>)
 8003668:	f000 fc8e 	bl	8003f88 <_init>
 800366c:	1b64      	subs	r4, r4, r5
 800366e:	10a4      	asrs	r4, r4, #2
 8003670:	2600      	movs	r6, #0
 8003672:	42a6      	cmp	r6, r4
 8003674:	d105      	bne.n	8003682 <__libc_init_array+0x2e>
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	f855 3b04 	ldr.w	r3, [r5], #4
 800367c:	4798      	blx	r3
 800367e:	3601      	adds	r6, #1
 8003680:	e7ee      	b.n	8003660 <__libc_init_array+0xc>
 8003682:	f855 3b04 	ldr.w	r3, [r5], #4
 8003686:	4798      	blx	r3
 8003688:	3601      	adds	r6, #1
 800368a:	e7f2      	b.n	8003672 <__libc_init_array+0x1e>
 800368c:	0800400c 	.word	0x0800400c
 8003690:	0800400c 	.word	0x0800400c
 8003694:	0800400c 	.word	0x0800400c
 8003698:	08004010 	.word	0x08004010

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <siprintf>:
 80036ac:	b40e      	push	{r1, r2, r3}
 80036ae:	b500      	push	{lr}
 80036b0:	b09c      	sub	sp, #112	; 0x70
 80036b2:	ab1d      	add	r3, sp, #116	; 0x74
 80036b4:	9002      	str	r0, [sp, #8]
 80036b6:	9006      	str	r0, [sp, #24]
 80036b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80036bc:	4809      	ldr	r0, [pc, #36]	; (80036e4 <siprintf+0x38>)
 80036be:	9107      	str	r1, [sp, #28]
 80036c0:	9104      	str	r1, [sp, #16]
 80036c2:	4909      	ldr	r1, [pc, #36]	; (80036e8 <siprintf+0x3c>)
 80036c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80036c8:	9105      	str	r1, [sp, #20]
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	9301      	str	r3, [sp, #4]
 80036ce:	a902      	add	r1, sp, #8
 80036d0:	f000 f868 	bl	80037a4 <_svfiprintf_r>
 80036d4:	9b02      	ldr	r3, [sp, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	b01c      	add	sp, #112	; 0x70
 80036dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80036e0:	b003      	add	sp, #12
 80036e2:	4770      	bx	lr
 80036e4:	20000040 	.word	0x20000040
 80036e8:	ffff0208 	.word	0xffff0208

080036ec <__ssputs_r>:
 80036ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f0:	688e      	ldr	r6, [r1, #8]
 80036f2:	429e      	cmp	r6, r3
 80036f4:	4682      	mov	sl, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	4690      	mov	r8, r2
 80036fa:	461f      	mov	r7, r3
 80036fc:	d838      	bhi.n	8003770 <__ssputs_r+0x84>
 80036fe:	898a      	ldrh	r2, [r1, #12]
 8003700:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003704:	d032      	beq.n	800376c <__ssputs_r+0x80>
 8003706:	6825      	ldr	r5, [r4, #0]
 8003708:	6909      	ldr	r1, [r1, #16]
 800370a:	eba5 0901 	sub.w	r9, r5, r1
 800370e:	6965      	ldr	r5, [r4, #20]
 8003710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003714:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003718:	3301      	adds	r3, #1
 800371a:	444b      	add	r3, r9
 800371c:	106d      	asrs	r5, r5, #1
 800371e:	429d      	cmp	r5, r3
 8003720:	bf38      	it	cc
 8003722:	461d      	movcc	r5, r3
 8003724:	0553      	lsls	r3, r2, #21
 8003726:	d531      	bpl.n	800378c <__ssputs_r+0xa0>
 8003728:	4629      	mov	r1, r5
 800372a:	f000 fb63 	bl	8003df4 <_malloc_r>
 800372e:	4606      	mov	r6, r0
 8003730:	b950      	cbnz	r0, 8003748 <__ssputs_r+0x5c>
 8003732:	230c      	movs	r3, #12
 8003734:	f8ca 3000 	str.w	r3, [sl]
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373e:	81a3      	strh	r3, [r4, #12]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003748:	6921      	ldr	r1, [r4, #16]
 800374a:	464a      	mov	r2, r9
 800374c:	f000 fabe 	bl	8003ccc <memcpy>
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800375a:	81a3      	strh	r3, [r4, #12]
 800375c:	6126      	str	r6, [r4, #16]
 800375e:	6165      	str	r5, [r4, #20]
 8003760:	444e      	add	r6, r9
 8003762:	eba5 0509 	sub.w	r5, r5, r9
 8003766:	6026      	str	r6, [r4, #0]
 8003768:	60a5      	str	r5, [r4, #8]
 800376a:	463e      	mov	r6, r7
 800376c:	42be      	cmp	r6, r7
 800376e:	d900      	bls.n	8003772 <__ssputs_r+0x86>
 8003770:	463e      	mov	r6, r7
 8003772:	6820      	ldr	r0, [r4, #0]
 8003774:	4632      	mov	r2, r6
 8003776:	4641      	mov	r1, r8
 8003778:	f000 fab6 	bl	8003ce8 <memmove>
 800377c:	68a3      	ldr	r3, [r4, #8]
 800377e:	1b9b      	subs	r3, r3, r6
 8003780:	60a3      	str	r3, [r4, #8]
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	4433      	add	r3, r6
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	2000      	movs	r0, #0
 800378a:	e7db      	b.n	8003744 <__ssputs_r+0x58>
 800378c:	462a      	mov	r2, r5
 800378e:	f000 fba5 	bl	8003edc <_realloc_r>
 8003792:	4606      	mov	r6, r0
 8003794:	2800      	cmp	r0, #0
 8003796:	d1e1      	bne.n	800375c <__ssputs_r+0x70>
 8003798:	6921      	ldr	r1, [r4, #16]
 800379a:	4650      	mov	r0, sl
 800379c:	f000 fabe 	bl	8003d1c <_free_r>
 80037a0:	e7c7      	b.n	8003732 <__ssputs_r+0x46>
	...

080037a4 <_svfiprintf_r>:
 80037a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a8:	4698      	mov	r8, r3
 80037aa:	898b      	ldrh	r3, [r1, #12]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	b09d      	sub	sp, #116	; 0x74
 80037b0:	4607      	mov	r7, r0
 80037b2:	460d      	mov	r5, r1
 80037b4:	4614      	mov	r4, r2
 80037b6:	d50e      	bpl.n	80037d6 <_svfiprintf_r+0x32>
 80037b8:	690b      	ldr	r3, [r1, #16]
 80037ba:	b963      	cbnz	r3, 80037d6 <_svfiprintf_r+0x32>
 80037bc:	2140      	movs	r1, #64	; 0x40
 80037be:	f000 fb19 	bl	8003df4 <_malloc_r>
 80037c2:	6028      	str	r0, [r5, #0]
 80037c4:	6128      	str	r0, [r5, #16]
 80037c6:	b920      	cbnz	r0, 80037d2 <_svfiprintf_r+0x2e>
 80037c8:	230c      	movs	r3, #12
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037d0:	e0d1      	b.n	8003976 <_svfiprintf_r+0x1d2>
 80037d2:	2340      	movs	r3, #64	; 0x40
 80037d4:	616b      	str	r3, [r5, #20]
 80037d6:	2300      	movs	r3, #0
 80037d8:	9309      	str	r3, [sp, #36]	; 0x24
 80037da:	2320      	movs	r3, #32
 80037dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037e4:	2330      	movs	r3, #48	; 0x30
 80037e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003990 <_svfiprintf_r+0x1ec>
 80037ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ee:	f04f 0901 	mov.w	r9, #1
 80037f2:	4623      	mov	r3, r4
 80037f4:	469a      	mov	sl, r3
 80037f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037fa:	b10a      	cbz	r2, 8003800 <_svfiprintf_r+0x5c>
 80037fc:	2a25      	cmp	r2, #37	; 0x25
 80037fe:	d1f9      	bne.n	80037f4 <_svfiprintf_r+0x50>
 8003800:	ebba 0b04 	subs.w	fp, sl, r4
 8003804:	d00b      	beq.n	800381e <_svfiprintf_r+0x7a>
 8003806:	465b      	mov	r3, fp
 8003808:	4622      	mov	r2, r4
 800380a:	4629      	mov	r1, r5
 800380c:	4638      	mov	r0, r7
 800380e:	f7ff ff6d 	bl	80036ec <__ssputs_r>
 8003812:	3001      	adds	r0, #1
 8003814:	f000 80aa 	beq.w	800396c <_svfiprintf_r+0x1c8>
 8003818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800381a:	445a      	add	r2, fp
 800381c:	9209      	str	r2, [sp, #36]	; 0x24
 800381e:	f89a 3000 	ldrb.w	r3, [sl]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80a2 	beq.w	800396c <_svfiprintf_r+0x1c8>
 8003828:	2300      	movs	r3, #0
 800382a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800382e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003832:	f10a 0a01 	add.w	sl, sl, #1
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	9307      	str	r3, [sp, #28]
 800383a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800383e:	931a      	str	r3, [sp, #104]	; 0x68
 8003840:	4654      	mov	r4, sl
 8003842:	2205      	movs	r2, #5
 8003844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003848:	4851      	ldr	r0, [pc, #324]	; (8003990 <_svfiprintf_r+0x1ec>)
 800384a:	f7fc fd01 	bl	8000250 <memchr>
 800384e:	9a04      	ldr	r2, [sp, #16]
 8003850:	b9d8      	cbnz	r0, 800388a <_svfiprintf_r+0xe6>
 8003852:	06d0      	lsls	r0, r2, #27
 8003854:	bf44      	itt	mi
 8003856:	2320      	movmi	r3, #32
 8003858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800385c:	0711      	lsls	r1, r2, #28
 800385e:	bf44      	itt	mi
 8003860:	232b      	movmi	r3, #43	; 0x2b
 8003862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003866:	f89a 3000 	ldrb.w	r3, [sl]
 800386a:	2b2a      	cmp	r3, #42	; 0x2a
 800386c:	d015      	beq.n	800389a <_svfiprintf_r+0xf6>
 800386e:	9a07      	ldr	r2, [sp, #28]
 8003870:	4654      	mov	r4, sl
 8003872:	2000      	movs	r0, #0
 8003874:	f04f 0c0a 	mov.w	ip, #10
 8003878:	4621      	mov	r1, r4
 800387a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800387e:	3b30      	subs	r3, #48	; 0x30
 8003880:	2b09      	cmp	r3, #9
 8003882:	d94e      	bls.n	8003922 <_svfiprintf_r+0x17e>
 8003884:	b1b0      	cbz	r0, 80038b4 <_svfiprintf_r+0x110>
 8003886:	9207      	str	r2, [sp, #28]
 8003888:	e014      	b.n	80038b4 <_svfiprintf_r+0x110>
 800388a:	eba0 0308 	sub.w	r3, r0, r8
 800388e:	fa09 f303 	lsl.w	r3, r9, r3
 8003892:	4313      	orrs	r3, r2
 8003894:	9304      	str	r3, [sp, #16]
 8003896:	46a2      	mov	sl, r4
 8003898:	e7d2      	b.n	8003840 <_svfiprintf_r+0x9c>
 800389a:	9b03      	ldr	r3, [sp, #12]
 800389c:	1d19      	adds	r1, r3, #4
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	9103      	str	r1, [sp, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bfbb      	ittet	lt
 80038a6:	425b      	neglt	r3, r3
 80038a8:	f042 0202 	orrlt.w	r2, r2, #2
 80038ac:	9307      	strge	r3, [sp, #28]
 80038ae:	9307      	strlt	r3, [sp, #28]
 80038b0:	bfb8      	it	lt
 80038b2:	9204      	strlt	r2, [sp, #16]
 80038b4:	7823      	ldrb	r3, [r4, #0]
 80038b6:	2b2e      	cmp	r3, #46	; 0x2e
 80038b8:	d10c      	bne.n	80038d4 <_svfiprintf_r+0x130>
 80038ba:	7863      	ldrb	r3, [r4, #1]
 80038bc:	2b2a      	cmp	r3, #42	; 0x2a
 80038be:	d135      	bne.n	800392c <_svfiprintf_r+0x188>
 80038c0:	9b03      	ldr	r3, [sp, #12]
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	9203      	str	r2, [sp, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bfb8      	it	lt
 80038cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80038d0:	3402      	adds	r4, #2
 80038d2:	9305      	str	r3, [sp, #20]
 80038d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80039a0 <_svfiprintf_r+0x1fc>
 80038d8:	7821      	ldrb	r1, [r4, #0]
 80038da:	2203      	movs	r2, #3
 80038dc:	4650      	mov	r0, sl
 80038de:	f7fc fcb7 	bl	8000250 <memchr>
 80038e2:	b140      	cbz	r0, 80038f6 <_svfiprintf_r+0x152>
 80038e4:	2340      	movs	r3, #64	; 0x40
 80038e6:	eba0 000a 	sub.w	r0, r0, sl
 80038ea:	fa03 f000 	lsl.w	r0, r3, r0
 80038ee:	9b04      	ldr	r3, [sp, #16]
 80038f0:	4303      	orrs	r3, r0
 80038f2:	3401      	adds	r4, #1
 80038f4:	9304      	str	r3, [sp, #16]
 80038f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038fa:	4826      	ldr	r0, [pc, #152]	; (8003994 <_svfiprintf_r+0x1f0>)
 80038fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003900:	2206      	movs	r2, #6
 8003902:	f7fc fca5 	bl	8000250 <memchr>
 8003906:	2800      	cmp	r0, #0
 8003908:	d038      	beq.n	800397c <_svfiprintf_r+0x1d8>
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <_svfiprintf_r+0x1f4>)
 800390c:	bb1b      	cbnz	r3, 8003956 <_svfiprintf_r+0x1b2>
 800390e:	9b03      	ldr	r3, [sp, #12]
 8003910:	3307      	adds	r3, #7
 8003912:	f023 0307 	bic.w	r3, r3, #7
 8003916:	3308      	adds	r3, #8
 8003918:	9303      	str	r3, [sp, #12]
 800391a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800391c:	4433      	add	r3, r6
 800391e:	9309      	str	r3, [sp, #36]	; 0x24
 8003920:	e767      	b.n	80037f2 <_svfiprintf_r+0x4e>
 8003922:	fb0c 3202 	mla	r2, ip, r2, r3
 8003926:	460c      	mov	r4, r1
 8003928:	2001      	movs	r0, #1
 800392a:	e7a5      	b.n	8003878 <_svfiprintf_r+0xd4>
 800392c:	2300      	movs	r3, #0
 800392e:	3401      	adds	r4, #1
 8003930:	9305      	str	r3, [sp, #20]
 8003932:	4619      	mov	r1, r3
 8003934:	f04f 0c0a 	mov.w	ip, #10
 8003938:	4620      	mov	r0, r4
 800393a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800393e:	3a30      	subs	r2, #48	; 0x30
 8003940:	2a09      	cmp	r2, #9
 8003942:	d903      	bls.n	800394c <_svfiprintf_r+0x1a8>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0c5      	beq.n	80038d4 <_svfiprintf_r+0x130>
 8003948:	9105      	str	r1, [sp, #20]
 800394a:	e7c3      	b.n	80038d4 <_svfiprintf_r+0x130>
 800394c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003950:	4604      	mov	r4, r0
 8003952:	2301      	movs	r3, #1
 8003954:	e7f0      	b.n	8003938 <_svfiprintf_r+0x194>
 8003956:	ab03      	add	r3, sp, #12
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	462a      	mov	r2, r5
 800395c:	4b0f      	ldr	r3, [pc, #60]	; (800399c <_svfiprintf_r+0x1f8>)
 800395e:	a904      	add	r1, sp, #16
 8003960:	4638      	mov	r0, r7
 8003962:	f3af 8000 	nop.w
 8003966:	1c42      	adds	r2, r0, #1
 8003968:	4606      	mov	r6, r0
 800396a:	d1d6      	bne.n	800391a <_svfiprintf_r+0x176>
 800396c:	89ab      	ldrh	r3, [r5, #12]
 800396e:	065b      	lsls	r3, r3, #25
 8003970:	f53f af2c 	bmi.w	80037cc <_svfiprintf_r+0x28>
 8003974:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003976:	b01d      	add	sp, #116	; 0x74
 8003978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397c:	ab03      	add	r3, sp, #12
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	462a      	mov	r2, r5
 8003982:	4b06      	ldr	r3, [pc, #24]	; (800399c <_svfiprintf_r+0x1f8>)
 8003984:	a904      	add	r1, sp, #16
 8003986:	4638      	mov	r0, r7
 8003988:	f000 f87a 	bl	8003a80 <_printf_i>
 800398c:	e7eb      	b.n	8003966 <_svfiprintf_r+0x1c2>
 800398e:	bf00      	nop
 8003990:	08003fd0 	.word	0x08003fd0
 8003994:	08003fda 	.word	0x08003fda
 8003998:	00000000 	.word	0x00000000
 800399c:	080036ed 	.word	0x080036ed
 80039a0:	08003fd6 	.word	0x08003fd6

080039a4 <_printf_common>:
 80039a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a8:	4616      	mov	r6, r2
 80039aa:	4699      	mov	r9, r3
 80039ac:	688a      	ldr	r2, [r1, #8]
 80039ae:	690b      	ldr	r3, [r1, #16]
 80039b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	bfb8      	it	lt
 80039b8:	4613      	movlt	r3, r2
 80039ba:	6033      	str	r3, [r6, #0]
 80039bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039c0:	4607      	mov	r7, r0
 80039c2:	460c      	mov	r4, r1
 80039c4:	b10a      	cbz	r2, 80039ca <_printf_common+0x26>
 80039c6:	3301      	adds	r3, #1
 80039c8:	6033      	str	r3, [r6, #0]
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	0699      	lsls	r1, r3, #26
 80039ce:	bf42      	ittt	mi
 80039d0:	6833      	ldrmi	r3, [r6, #0]
 80039d2:	3302      	addmi	r3, #2
 80039d4:	6033      	strmi	r3, [r6, #0]
 80039d6:	6825      	ldr	r5, [r4, #0]
 80039d8:	f015 0506 	ands.w	r5, r5, #6
 80039dc:	d106      	bne.n	80039ec <_printf_common+0x48>
 80039de:	f104 0a19 	add.w	sl, r4, #25
 80039e2:	68e3      	ldr	r3, [r4, #12]
 80039e4:	6832      	ldr	r2, [r6, #0]
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	42ab      	cmp	r3, r5
 80039ea:	dc26      	bgt.n	8003a3a <_printf_common+0x96>
 80039ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039f0:	1e13      	subs	r3, r2, #0
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	bf18      	it	ne
 80039f6:	2301      	movne	r3, #1
 80039f8:	0692      	lsls	r2, r2, #26
 80039fa:	d42b      	bmi.n	8003a54 <_printf_common+0xb0>
 80039fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a00:	4649      	mov	r1, r9
 8003a02:	4638      	mov	r0, r7
 8003a04:	47c0      	blx	r8
 8003a06:	3001      	adds	r0, #1
 8003a08:	d01e      	beq.n	8003a48 <_printf_common+0xa4>
 8003a0a:	6823      	ldr	r3, [r4, #0]
 8003a0c:	68e5      	ldr	r5, [r4, #12]
 8003a0e:	6832      	ldr	r2, [r6, #0]
 8003a10:	f003 0306 	and.w	r3, r3, #6
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	bf08      	it	eq
 8003a18:	1aad      	subeq	r5, r5, r2
 8003a1a:	68a3      	ldr	r3, [r4, #8]
 8003a1c:	6922      	ldr	r2, [r4, #16]
 8003a1e:	bf0c      	ite	eq
 8003a20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a24:	2500      	movne	r5, #0
 8003a26:	4293      	cmp	r3, r2
 8003a28:	bfc4      	itt	gt
 8003a2a:	1a9b      	subgt	r3, r3, r2
 8003a2c:	18ed      	addgt	r5, r5, r3
 8003a2e:	2600      	movs	r6, #0
 8003a30:	341a      	adds	r4, #26
 8003a32:	42b5      	cmp	r5, r6
 8003a34:	d11a      	bne.n	8003a6c <_printf_common+0xc8>
 8003a36:	2000      	movs	r0, #0
 8003a38:	e008      	b.n	8003a4c <_printf_common+0xa8>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	4652      	mov	r2, sl
 8003a3e:	4649      	mov	r1, r9
 8003a40:	4638      	mov	r0, r7
 8003a42:	47c0      	blx	r8
 8003a44:	3001      	adds	r0, #1
 8003a46:	d103      	bne.n	8003a50 <_printf_common+0xac>
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a50:	3501      	adds	r5, #1
 8003a52:	e7c6      	b.n	80039e2 <_printf_common+0x3e>
 8003a54:	18e1      	adds	r1, r4, r3
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	2030      	movs	r0, #48	; 0x30
 8003a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a5e:	4422      	add	r2, r4
 8003a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a68:	3302      	adds	r3, #2
 8003a6a:	e7c7      	b.n	80039fc <_printf_common+0x58>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	4622      	mov	r2, r4
 8003a70:	4649      	mov	r1, r9
 8003a72:	4638      	mov	r0, r7
 8003a74:	47c0      	blx	r8
 8003a76:	3001      	adds	r0, #1
 8003a78:	d0e6      	beq.n	8003a48 <_printf_common+0xa4>
 8003a7a:	3601      	adds	r6, #1
 8003a7c:	e7d9      	b.n	8003a32 <_printf_common+0x8e>
	...

08003a80 <_printf_i>:
 8003a80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	7e0f      	ldrb	r7, [r1, #24]
 8003a86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a88:	2f78      	cmp	r7, #120	; 0x78
 8003a8a:	4691      	mov	r9, r2
 8003a8c:	4680      	mov	r8, r0
 8003a8e:	460c      	mov	r4, r1
 8003a90:	469a      	mov	sl, r3
 8003a92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a96:	d807      	bhi.n	8003aa8 <_printf_i+0x28>
 8003a98:	2f62      	cmp	r7, #98	; 0x62
 8003a9a:	d80a      	bhi.n	8003ab2 <_printf_i+0x32>
 8003a9c:	2f00      	cmp	r7, #0
 8003a9e:	f000 80d8 	beq.w	8003c52 <_printf_i+0x1d2>
 8003aa2:	2f58      	cmp	r7, #88	; 0x58
 8003aa4:	f000 80a3 	beq.w	8003bee <_printf_i+0x16e>
 8003aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ab0:	e03a      	b.n	8003b28 <_printf_i+0xa8>
 8003ab2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ab6:	2b15      	cmp	r3, #21
 8003ab8:	d8f6      	bhi.n	8003aa8 <_printf_i+0x28>
 8003aba:	a101      	add	r1, pc, #4	; (adr r1, 8003ac0 <_printf_i+0x40>)
 8003abc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ac0:	08003b19 	.word	0x08003b19
 8003ac4:	08003b2d 	.word	0x08003b2d
 8003ac8:	08003aa9 	.word	0x08003aa9
 8003acc:	08003aa9 	.word	0x08003aa9
 8003ad0:	08003aa9 	.word	0x08003aa9
 8003ad4:	08003aa9 	.word	0x08003aa9
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003aa9 	.word	0x08003aa9
 8003ae0:	08003aa9 	.word	0x08003aa9
 8003ae4:	08003aa9 	.word	0x08003aa9
 8003ae8:	08003aa9 	.word	0x08003aa9
 8003aec:	08003c39 	.word	0x08003c39
 8003af0:	08003b5d 	.word	0x08003b5d
 8003af4:	08003c1b 	.word	0x08003c1b
 8003af8:	08003aa9 	.word	0x08003aa9
 8003afc:	08003aa9 	.word	0x08003aa9
 8003b00:	08003c5b 	.word	0x08003c5b
 8003b04:	08003aa9 	.word	0x08003aa9
 8003b08:	08003b5d 	.word	0x08003b5d
 8003b0c:	08003aa9 	.word	0x08003aa9
 8003b10:	08003aa9 	.word	0x08003aa9
 8003b14:	08003c23 	.word	0x08003c23
 8003b18:	682b      	ldr	r3, [r5, #0]
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	602a      	str	r2, [r5, #0]
 8003b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0a3      	b.n	8003c74 <_printf_i+0x1f4>
 8003b2c:	6820      	ldr	r0, [r4, #0]
 8003b2e:	6829      	ldr	r1, [r5, #0]
 8003b30:	0606      	lsls	r6, r0, #24
 8003b32:	f101 0304 	add.w	r3, r1, #4
 8003b36:	d50a      	bpl.n	8003b4e <_printf_i+0xce>
 8003b38:	680e      	ldr	r6, [r1, #0]
 8003b3a:	602b      	str	r3, [r5, #0]
 8003b3c:	2e00      	cmp	r6, #0
 8003b3e:	da03      	bge.n	8003b48 <_printf_i+0xc8>
 8003b40:	232d      	movs	r3, #45	; 0x2d
 8003b42:	4276      	negs	r6, r6
 8003b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b48:	485e      	ldr	r0, [pc, #376]	; (8003cc4 <_printf_i+0x244>)
 8003b4a:	230a      	movs	r3, #10
 8003b4c:	e019      	b.n	8003b82 <_printf_i+0x102>
 8003b4e:	680e      	ldr	r6, [r1, #0]
 8003b50:	602b      	str	r3, [r5, #0]
 8003b52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b56:	bf18      	it	ne
 8003b58:	b236      	sxthne	r6, r6
 8003b5a:	e7ef      	b.n	8003b3c <_printf_i+0xbc>
 8003b5c:	682b      	ldr	r3, [r5, #0]
 8003b5e:	6820      	ldr	r0, [r4, #0]
 8003b60:	1d19      	adds	r1, r3, #4
 8003b62:	6029      	str	r1, [r5, #0]
 8003b64:	0601      	lsls	r1, r0, #24
 8003b66:	d501      	bpl.n	8003b6c <_printf_i+0xec>
 8003b68:	681e      	ldr	r6, [r3, #0]
 8003b6a:	e002      	b.n	8003b72 <_printf_i+0xf2>
 8003b6c:	0646      	lsls	r6, r0, #25
 8003b6e:	d5fb      	bpl.n	8003b68 <_printf_i+0xe8>
 8003b70:	881e      	ldrh	r6, [r3, #0]
 8003b72:	4854      	ldr	r0, [pc, #336]	; (8003cc4 <_printf_i+0x244>)
 8003b74:	2f6f      	cmp	r7, #111	; 0x6f
 8003b76:	bf0c      	ite	eq
 8003b78:	2308      	moveq	r3, #8
 8003b7a:	230a      	movne	r3, #10
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b82:	6865      	ldr	r5, [r4, #4]
 8003b84:	60a5      	str	r5, [r4, #8]
 8003b86:	2d00      	cmp	r5, #0
 8003b88:	bfa2      	ittt	ge
 8003b8a:	6821      	ldrge	r1, [r4, #0]
 8003b8c:	f021 0104 	bicge.w	r1, r1, #4
 8003b90:	6021      	strge	r1, [r4, #0]
 8003b92:	b90e      	cbnz	r6, 8003b98 <_printf_i+0x118>
 8003b94:	2d00      	cmp	r5, #0
 8003b96:	d04d      	beq.n	8003c34 <_printf_i+0x1b4>
 8003b98:	4615      	mov	r5, r2
 8003b9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b9e:	fb03 6711 	mls	r7, r3, r1, r6
 8003ba2:	5dc7      	ldrb	r7, [r0, r7]
 8003ba4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ba8:	4637      	mov	r7, r6
 8003baa:	42bb      	cmp	r3, r7
 8003bac:	460e      	mov	r6, r1
 8003bae:	d9f4      	bls.n	8003b9a <_printf_i+0x11a>
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d10b      	bne.n	8003bcc <_printf_i+0x14c>
 8003bb4:	6823      	ldr	r3, [r4, #0]
 8003bb6:	07de      	lsls	r6, r3, #31
 8003bb8:	d508      	bpl.n	8003bcc <_printf_i+0x14c>
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	6861      	ldr	r1, [r4, #4]
 8003bbe:	4299      	cmp	r1, r3
 8003bc0:	bfde      	ittt	le
 8003bc2:	2330      	movle	r3, #48	; 0x30
 8003bc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003bcc:	1b52      	subs	r2, r2, r5
 8003bce:	6122      	str	r2, [r4, #16]
 8003bd0:	f8cd a000 	str.w	sl, [sp]
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	aa03      	add	r2, sp, #12
 8003bd8:	4621      	mov	r1, r4
 8003bda:	4640      	mov	r0, r8
 8003bdc:	f7ff fee2 	bl	80039a4 <_printf_common>
 8003be0:	3001      	adds	r0, #1
 8003be2:	d14c      	bne.n	8003c7e <_printf_i+0x1fe>
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be8:	b004      	add	sp, #16
 8003bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bee:	4835      	ldr	r0, [pc, #212]	; (8003cc4 <_printf_i+0x244>)
 8003bf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bf4:	6829      	ldr	r1, [r5, #0]
 8003bf6:	6823      	ldr	r3, [r4, #0]
 8003bf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bfc:	6029      	str	r1, [r5, #0]
 8003bfe:	061d      	lsls	r5, r3, #24
 8003c00:	d514      	bpl.n	8003c2c <_printf_i+0x1ac>
 8003c02:	07df      	lsls	r7, r3, #31
 8003c04:	bf44      	itt	mi
 8003c06:	f043 0320 	orrmi.w	r3, r3, #32
 8003c0a:	6023      	strmi	r3, [r4, #0]
 8003c0c:	b91e      	cbnz	r6, 8003c16 <_printf_i+0x196>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	f023 0320 	bic.w	r3, r3, #32
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	2310      	movs	r3, #16
 8003c18:	e7b0      	b.n	8003b7c <_printf_i+0xfc>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	f043 0320 	orr.w	r3, r3, #32
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	2378      	movs	r3, #120	; 0x78
 8003c24:	4828      	ldr	r0, [pc, #160]	; (8003cc8 <_printf_i+0x248>)
 8003c26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c2a:	e7e3      	b.n	8003bf4 <_printf_i+0x174>
 8003c2c:	0659      	lsls	r1, r3, #25
 8003c2e:	bf48      	it	mi
 8003c30:	b2b6      	uxthmi	r6, r6
 8003c32:	e7e6      	b.n	8003c02 <_printf_i+0x182>
 8003c34:	4615      	mov	r5, r2
 8003c36:	e7bb      	b.n	8003bb0 <_printf_i+0x130>
 8003c38:	682b      	ldr	r3, [r5, #0]
 8003c3a:	6826      	ldr	r6, [r4, #0]
 8003c3c:	6961      	ldr	r1, [r4, #20]
 8003c3e:	1d18      	adds	r0, r3, #4
 8003c40:	6028      	str	r0, [r5, #0]
 8003c42:	0635      	lsls	r5, r6, #24
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	d501      	bpl.n	8003c4c <_printf_i+0x1cc>
 8003c48:	6019      	str	r1, [r3, #0]
 8003c4a:	e002      	b.n	8003c52 <_printf_i+0x1d2>
 8003c4c:	0670      	lsls	r0, r6, #25
 8003c4e:	d5fb      	bpl.n	8003c48 <_printf_i+0x1c8>
 8003c50:	8019      	strh	r1, [r3, #0]
 8003c52:	2300      	movs	r3, #0
 8003c54:	6123      	str	r3, [r4, #16]
 8003c56:	4615      	mov	r5, r2
 8003c58:	e7ba      	b.n	8003bd0 <_printf_i+0x150>
 8003c5a:	682b      	ldr	r3, [r5, #0]
 8003c5c:	1d1a      	adds	r2, r3, #4
 8003c5e:	602a      	str	r2, [r5, #0]
 8003c60:	681d      	ldr	r5, [r3, #0]
 8003c62:	6862      	ldr	r2, [r4, #4]
 8003c64:	2100      	movs	r1, #0
 8003c66:	4628      	mov	r0, r5
 8003c68:	f7fc faf2 	bl	8000250 <memchr>
 8003c6c:	b108      	cbz	r0, 8003c72 <_printf_i+0x1f2>
 8003c6e:	1b40      	subs	r0, r0, r5
 8003c70:	6060      	str	r0, [r4, #4]
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	6123      	str	r3, [r4, #16]
 8003c76:	2300      	movs	r3, #0
 8003c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c7c:	e7a8      	b.n	8003bd0 <_printf_i+0x150>
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	462a      	mov	r2, r5
 8003c82:	4649      	mov	r1, r9
 8003c84:	4640      	mov	r0, r8
 8003c86:	47d0      	blx	sl
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d0ab      	beq.n	8003be4 <_printf_i+0x164>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	079b      	lsls	r3, r3, #30
 8003c90:	d413      	bmi.n	8003cba <_printf_i+0x23a>
 8003c92:	68e0      	ldr	r0, [r4, #12]
 8003c94:	9b03      	ldr	r3, [sp, #12]
 8003c96:	4298      	cmp	r0, r3
 8003c98:	bfb8      	it	lt
 8003c9a:	4618      	movlt	r0, r3
 8003c9c:	e7a4      	b.n	8003be8 <_printf_i+0x168>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	4632      	mov	r2, r6
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	4640      	mov	r0, r8
 8003ca6:	47d0      	blx	sl
 8003ca8:	3001      	adds	r0, #1
 8003caa:	d09b      	beq.n	8003be4 <_printf_i+0x164>
 8003cac:	3501      	adds	r5, #1
 8003cae:	68e3      	ldr	r3, [r4, #12]
 8003cb0:	9903      	ldr	r1, [sp, #12]
 8003cb2:	1a5b      	subs	r3, r3, r1
 8003cb4:	42ab      	cmp	r3, r5
 8003cb6:	dcf2      	bgt.n	8003c9e <_printf_i+0x21e>
 8003cb8:	e7eb      	b.n	8003c92 <_printf_i+0x212>
 8003cba:	2500      	movs	r5, #0
 8003cbc:	f104 0619 	add.w	r6, r4, #25
 8003cc0:	e7f5      	b.n	8003cae <_printf_i+0x22e>
 8003cc2:	bf00      	nop
 8003cc4:	08003fe1 	.word	0x08003fe1
 8003cc8:	08003ff2 	.word	0x08003ff2

08003ccc <memcpy>:
 8003ccc:	440a      	add	r2, r1
 8003cce:	4291      	cmp	r1, r2
 8003cd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003cd4:	d100      	bne.n	8003cd8 <memcpy+0xc>
 8003cd6:	4770      	bx	lr
 8003cd8:	b510      	push	{r4, lr}
 8003cda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ce2:	4291      	cmp	r1, r2
 8003ce4:	d1f9      	bne.n	8003cda <memcpy+0xe>
 8003ce6:	bd10      	pop	{r4, pc}

08003ce8 <memmove>:
 8003ce8:	4288      	cmp	r0, r1
 8003cea:	b510      	push	{r4, lr}
 8003cec:	eb01 0402 	add.w	r4, r1, r2
 8003cf0:	d902      	bls.n	8003cf8 <memmove+0x10>
 8003cf2:	4284      	cmp	r4, r0
 8003cf4:	4623      	mov	r3, r4
 8003cf6:	d807      	bhi.n	8003d08 <memmove+0x20>
 8003cf8:	1e43      	subs	r3, r0, #1
 8003cfa:	42a1      	cmp	r1, r4
 8003cfc:	d008      	beq.n	8003d10 <memmove+0x28>
 8003cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d06:	e7f8      	b.n	8003cfa <memmove+0x12>
 8003d08:	4402      	add	r2, r0
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	428a      	cmp	r2, r1
 8003d0e:	d100      	bne.n	8003d12 <memmove+0x2a>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d1a:	e7f7      	b.n	8003d0c <memmove+0x24>

08003d1c <_free_r>:
 8003d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003d1e:	2900      	cmp	r1, #0
 8003d20:	d044      	beq.n	8003dac <_free_r+0x90>
 8003d22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d26:	9001      	str	r0, [sp, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003d2e:	bfb8      	it	lt
 8003d30:	18e4      	addlt	r4, r4, r3
 8003d32:	f000 f913 	bl	8003f5c <__malloc_lock>
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <_free_r+0x94>)
 8003d38:	9801      	ldr	r0, [sp, #4]
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	b933      	cbnz	r3, 8003d4c <_free_r+0x30>
 8003d3e:	6063      	str	r3, [r4, #4]
 8003d40:	6014      	str	r4, [r2, #0]
 8003d42:	b003      	add	sp, #12
 8003d44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003d48:	f000 b90e 	b.w	8003f68 <__malloc_unlock>
 8003d4c:	42a3      	cmp	r3, r4
 8003d4e:	d908      	bls.n	8003d62 <_free_r+0x46>
 8003d50:	6825      	ldr	r5, [r4, #0]
 8003d52:	1961      	adds	r1, r4, r5
 8003d54:	428b      	cmp	r3, r1
 8003d56:	bf01      	itttt	eq
 8003d58:	6819      	ldreq	r1, [r3, #0]
 8003d5a:	685b      	ldreq	r3, [r3, #4]
 8003d5c:	1949      	addeq	r1, r1, r5
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	e7ed      	b.n	8003d3e <_free_r+0x22>
 8003d62:	461a      	mov	r2, r3
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	b10b      	cbz	r3, 8003d6c <_free_r+0x50>
 8003d68:	42a3      	cmp	r3, r4
 8003d6a:	d9fa      	bls.n	8003d62 <_free_r+0x46>
 8003d6c:	6811      	ldr	r1, [r2, #0]
 8003d6e:	1855      	adds	r5, r2, r1
 8003d70:	42a5      	cmp	r5, r4
 8003d72:	d10b      	bne.n	8003d8c <_free_r+0x70>
 8003d74:	6824      	ldr	r4, [r4, #0]
 8003d76:	4421      	add	r1, r4
 8003d78:	1854      	adds	r4, r2, r1
 8003d7a:	42a3      	cmp	r3, r4
 8003d7c:	6011      	str	r1, [r2, #0]
 8003d7e:	d1e0      	bne.n	8003d42 <_free_r+0x26>
 8003d80:	681c      	ldr	r4, [r3, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	6053      	str	r3, [r2, #4]
 8003d86:	4421      	add	r1, r4
 8003d88:	6011      	str	r1, [r2, #0]
 8003d8a:	e7da      	b.n	8003d42 <_free_r+0x26>
 8003d8c:	d902      	bls.n	8003d94 <_free_r+0x78>
 8003d8e:	230c      	movs	r3, #12
 8003d90:	6003      	str	r3, [r0, #0]
 8003d92:	e7d6      	b.n	8003d42 <_free_r+0x26>
 8003d94:	6825      	ldr	r5, [r4, #0]
 8003d96:	1961      	adds	r1, r4, r5
 8003d98:	428b      	cmp	r3, r1
 8003d9a:	bf04      	itt	eq
 8003d9c:	6819      	ldreq	r1, [r3, #0]
 8003d9e:	685b      	ldreq	r3, [r3, #4]
 8003da0:	6063      	str	r3, [r4, #4]
 8003da2:	bf04      	itt	eq
 8003da4:	1949      	addeq	r1, r1, r5
 8003da6:	6021      	streq	r1, [r4, #0]
 8003da8:	6054      	str	r4, [r2, #4]
 8003daa:	e7ca      	b.n	8003d42 <_free_r+0x26>
 8003dac:	b003      	add	sp, #12
 8003dae:	bd30      	pop	{r4, r5, pc}
 8003db0:	20000884 	.word	0x20000884

08003db4 <sbrk_aligned>:
 8003db4:	b570      	push	{r4, r5, r6, lr}
 8003db6:	4e0e      	ldr	r6, [pc, #56]	; (8003df0 <sbrk_aligned+0x3c>)
 8003db8:	460c      	mov	r4, r1
 8003dba:	6831      	ldr	r1, [r6, #0]
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	b911      	cbnz	r1, 8003dc6 <sbrk_aligned+0x12>
 8003dc0:	f000 f8bc 	bl	8003f3c <_sbrk_r>
 8003dc4:	6030      	str	r0, [r6, #0]
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 f8b7 	bl	8003f3c <_sbrk_r>
 8003dce:	1c43      	adds	r3, r0, #1
 8003dd0:	d00a      	beq.n	8003de8 <sbrk_aligned+0x34>
 8003dd2:	1cc4      	adds	r4, r0, #3
 8003dd4:	f024 0403 	bic.w	r4, r4, #3
 8003dd8:	42a0      	cmp	r0, r4
 8003dda:	d007      	beq.n	8003dec <sbrk_aligned+0x38>
 8003ddc:	1a21      	subs	r1, r4, r0
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f8ac 	bl	8003f3c <_sbrk_r>
 8003de4:	3001      	adds	r0, #1
 8003de6:	d101      	bne.n	8003dec <sbrk_aligned+0x38>
 8003de8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003dec:	4620      	mov	r0, r4
 8003dee:	bd70      	pop	{r4, r5, r6, pc}
 8003df0:	20000888 	.word	0x20000888

08003df4 <_malloc_r>:
 8003df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df8:	1ccd      	adds	r5, r1, #3
 8003dfa:	f025 0503 	bic.w	r5, r5, #3
 8003dfe:	3508      	adds	r5, #8
 8003e00:	2d0c      	cmp	r5, #12
 8003e02:	bf38      	it	cc
 8003e04:	250c      	movcc	r5, #12
 8003e06:	2d00      	cmp	r5, #0
 8003e08:	4607      	mov	r7, r0
 8003e0a:	db01      	blt.n	8003e10 <_malloc_r+0x1c>
 8003e0c:	42a9      	cmp	r1, r5
 8003e0e:	d905      	bls.n	8003e1c <_malloc_r+0x28>
 8003e10:	230c      	movs	r3, #12
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	2600      	movs	r6, #0
 8003e16:	4630      	mov	r0, r6
 8003e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e1c:	4e2e      	ldr	r6, [pc, #184]	; (8003ed8 <_malloc_r+0xe4>)
 8003e1e:	f000 f89d 	bl	8003f5c <__malloc_lock>
 8003e22:	6833      	ldr	r3, [r6, #0]
 8003e24:	461c      	mov	r4, r3
 8003e26:	bb34      	cbnz	r4, 8003e76 <_malloc_r+0x82>
 8003e28:	4629      	mov	r1, r5
 8003e2a:	4638      	mov	r0, r7
 8003e2c:	f7ff ffc2 	bl	8003db4 <sbrk_aligned>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	4604      	mov	r4, r0
 8003e34:	d14d      	bne.n	8003ed2 <_malloc_r+0xde>
 8003e36:	6834      	ldr	r4, [r6, #0]
 8003e38:	4626      	mov	r6, r4
 8003e3a:	2e00      	cmp	r6, #0
 8003e3c:	d140      	bne.n	8003ec0 <_malloc_r+0xcc>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	4631      	mov	r1, r6
 8003e42:	4638      	mov	r0, r7
 8003e44:	eb04 0803 	add.w	r8, r4, r3
 8003e48:	f000 f878 	bl	8003f3c <_sbrk_r>
 8003e4c:	4580      	cmp	r8, r0
 8003e4e:	d13a      	bne.n	8003ec6 <_malloc_r+0xd2>
 8003e50:	6821      	ldr	r1, [r4, #0]
 8003e52:	3503      	adds	r5, #3
 8003e54:	1a6d      	subs	r5, r5, r1
 8003e56:	f025 0503 	bic.w	r5, r5, #3
 8003e5a:	3508      	adds	r5, #8
 8003e5c:	2d0c      	cmp	r5, #12
 8003e5e:	bf38      	it	cc
 8003e60:	250c      	movcc	r5, #12
 8003e62:	4629      	mov	r1, r5
 8003e64:	4638      	mov	r0, r7
 8003e66:	f7ff ffa5 	bl	8003db4 <sbrk_aligned>
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	d02b      	beq.n	8003ec6 <_malloc_r+0xd2>
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	442b      	add	r3, r5
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	e00e      	b.n	8003e94 <_malloc_r+0xa0>
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	1b52      	subs	r2, r2, r5
 8003e7a:	d41e      	bmi.n	8003eba <_malloc_r+0xc6>
 8003e7c:	2a0b      	cmp	r2, #11
 8003e7e:	d916      	bls.n	8003eae <_malloc_r+0xba>
 8003e80:	1961      	adds	r1, r4, r5
 8003e82:	42a3      	cmp	r3, r4
 8003e84:	6025      	str	r5, [r4, #0]
 8003e86:	bf18      	it	ne
 8003e88:	6059      	strne	r1, [r3, #4]
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	bf08      	it	eq
 8003e8e:	6031      	streq	r1, [r6, #0]
 8003e90:	5162      	str	r2, [r4, r5]
 8003e92:	604b      	str	r3, [r1, #4]
 8003e94:	4638      	mov	r0, r7
 8003e96:	f104 060b 	add.w	r6, r4, #11
 8003e9a:	f000 f865 	bl	8003f68 <__malloc_unlock>
 8003e9e:	f026 0607 	bic.w	r6, r6, #7
 8003ea2:	1d23      	adds	r3, r4, #4
 8003ea4:	1af2      	subs	r2, r6, r3
 8003ea6:	d0b6      	beq.n	8003e16 <_malloc_r+0x22>
 8003ea8:	1b9b      	subs	r3, r3, r6
 8003eaa:	50a3      	str	r3, [r4, r2]
 8003eac:	e7b3      	b.n	8003e16 <_malloc_r+0x22>
 8003eae:	6862      	ldr	r2, [r4, #4]
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	bf0c      	ite	eq
 8003eb4:	6032      	streq	r2, [r6, #0]
 8003eb6:	605a      	strne	r2, [r3, #4]
 8003eb8:	e7ec      	b.n	8003e94 <_malloc_r+0xa0>
 8003eba:	4623      	mov	r3, r4
 8003ebc:	6864      	ldr	r4, [r4, #4]
 8003ebe:	e7b2      	b.n	8003e26 <_malloc_r+0x32>
 8003ec0:	4634      	mov	r4, r6
 8003ec2:	6876      	ldr	r6, [r6, #4]
 8003ec4:	e7b9      	b.n	8003e3a <_malloc_r+0x46>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f000 f84c 	bl	8003f68 <__malloc_unlock>
 8003ed0:	e7a1      	b.n	8003e16 <_malloc_r+0x22>
 8003ed2:	6025      	str	r5, [r4, #0]
 8003ed4:	e7de      	b.n	8003e94 <_malloc_r+0xa0>
 8003ed6:	bf00      	nop
 8003ed8:	20000884 	.word	0x20000884

08003edc <_realloc_r>:
 8003edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee0:	4680      	mov	r8, r0
 8003ee2:	4614      	mov	r4, r2
 8003ee4:	460e      	mov	r6, r1
 8003ee6:	b921      	cbnz	r1, 8003ef2 <_realloc_r+0x16>
 8003ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eec:	4611      	mov	r1, r2
 8003eee:	f7ff bf81 	b.w	8003df4 <_malloc_r>
 8003ef2:	b92a      	cbnz	r2, 8003f00 <_realloc_r+0x24>
 8003ef4:	f7ff ff12 	bl	8003d1c <_free_r>
 8003ef8:	4625      	mov	r5, r4
 8003efa:	4628      	mov	r0, r5
 8003efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f00:	f000 f838 	bl	8003f74 <_malloc_usable_size_r>
 8003f04:	4284      	cmp	r4, r0
 8003f06:	4607      	mov	r7, r0
 8003f08:	d802      	bhi.n	8003f10 <_realloc_r+0x34>
 8003f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f0e:	d812      	bhi.n	8003f36 <_realloc_r+0x5a>
 8003f10:	4621      	mov	r1, r4
 8003f12:	4640      	mov	r0, r8
 8003f14:	f7ff ff6e 	bl	8003df4 <_malloc_r>
 8003f18:	4605      	mov	r5, r0
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	d0ed      	beq.n	8003efa <_realloc_r+0x1e>
 8003f1e:	42bc      	cmp	r4, r7
 8003f20:	4622      	mov	r2, r4
 8003f22:	4631      	mov	r1, r6
 8003f24:	bf28      	it	cs
 8003f26:	463a      	movcs	r2, r7
 8003f28:	f7ff fed0 	bl	8003ccc <memcpy>
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	4640      	mov	r0, r8
 8003f30:	f7ff fef4 	bl	8003d1c <_free_r>
 8003f34:	e7e1      	b.n	8003efa <_realloc_r+0x1e>
 8003f36:	4635      	mov	r5, r6
 8003f38:	e7df      	b.n	8003efa <_realloc_r+0x1e>
	...

08003f3c <_sbrk_r>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4d06      	ldr	r5, [pc, #24]	; (8003f58 <_sbrk_r+0x1c>)
 8003f40:	2300      	movs	r3, #0
 8003f42:	4604      	mov	r4, r0
 8003f44:	4608      	mov	r0, r1
 8003f46:	602b      	str	r3, [r5, #0]
 8003f48:	f7fd f83c 	bl	8000fc4 <_sbrk>
 8003f4c:	1c43      	adds	r3, r0, #1
 8003f4e:	d102      	bne.n	8003f56 <_sbrk_r+0x1a>
 8003f50:	682b      	ldr	r3, [r5, #0]
 8003f52:	b103      	cbz	r3, 8003f56 <_sbrk_r+0x1a>
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	bd38      	pop	{r3, r4, r5, pc}
 8003f58:	2000088c 	.word	0x2000088c

08003f5c <__malloc_lock>:
 8003f5c:	4801      	ldr	r0, [pc, #4]	; (8003f64 <__malloc_lock+0x8>)
 8003f5e:	f000 b811 	b.w	8003f84 <__retarget_lock_acquire_recursive>
 8003f62:	bf00      	nop
 8003f64:	20000890 	.word	0x20000890

08003f68 <__malloc_unlock>:
 8003f68:	4801      	ldr	r0, [pc, #4]	; (8003f70 <__malloc_unlock+0x8>)
 8003f6a:	f000 b80c 	b.w	8003f86 <__retarget_lock_release_recursive>
 8003f6e:	bf00      	nop
 8003f70:	20000890 	.word	0x20000890

08003f74 <_malloc_usable_size_r>:
 8003f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f78:	1f18      	subs	r0, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfbc      	itt	lt
 8003f7e:	580b      	ldrlt	r3, [r1, r0]
 8003f80:	18c0      	addlt	r0, r0, r3
 8003f82:	4770      	bx	lr

08003f84 <__retarget_lock_acquire_recursive>:
 8003f84:	4770      	bx	lr

08003f86 <__retarget_lock_release_recursive>:
 8003f86:	4770      	bx	lr

08003f88 <_init>:
 8003f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8a:	bf00      	nop
 8003f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8e:	bc08      	pop	{r3}
 8003f90:	469e      	mov	lr, r3
 8003f92:	4770      	bx	lr

08003f94 <_fini>:
 8003f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f96:	bf00      	nop
 8003f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9a:	bc08      	pop	{r3}
 8003f9c:	469e      	mov	lr, r3
 8003f9e:	4770      	bx	lr
