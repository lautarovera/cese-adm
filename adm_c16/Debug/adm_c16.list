
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f1c  08003f1c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f24  08003f24  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f28  08003f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007f0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000880  20000880  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000cd1e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000eed6  00000000  00000000  0002cdde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d78  00000000  00000000  0003bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b90  00000000  00000000  0003da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000daff4  00000000  00000000  0003e5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ab8  00000000  00000000  001195b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002460f  00000000  00000000  0011a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e67f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033f4  00000000  00000000  0013e6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ea0 	.word	0x08003ea0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08003ea0 	.word	0x08003ea0

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <strlen>:
 80001f8:	4603      	mov	r3, r0
 80001fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fe:	2a00      	cmp	r2, #0
 8000200:	d1fb      	bne.n	80001fa <strlen+0x2>
 8000202:	1a18      	subs	r0, r3, r0
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <zeros>:


/* Functions definitions -----------------------------------------------------*/

void zeros(uint32_t *vector, uint32_t longitud)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	/* Se podría implementar directamente con memset(vector, 0, longitud * 4u) */
	for (;vector < (&vector[0u] + longitud); vector++) {
 80005be:	e005      	b.n	80005cc <zeros+0x18>
		*vector = 0u;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	for (;vector < (&vector[0u] + longitud); vector++) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3304      	adds	r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	dcf5      	bgt.n	80005c0 <zeros+0xc>
	}
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b087      	sub	sp, #28
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	603b      	str	r3, [r7, #0]
	uint32_t tmp = 0u;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 80005f4:	e00d      	b.n	8000612 <productoEscalar32+0x30>
		tmp = *vectorIn * escalar;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
		*vectorOut++ = tmp;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	1d1a      	adds	r2, r3, #4
 8000606:	60ba      	str	r2, [r7, #8]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	601a      	str	r2, [r3, #0]
	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3304      	adds	r3, #4
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dced      	bgt.n	80005f6 <productoEscalar32+0x14>
	}
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	371c      	adds	r7, #28
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 8000628:	b480      	push	{r7}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	460b      	mov	r3, r1
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	4613      	mov	r3, r2
 800063c:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = 0u;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]

	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 8000642:	e00d      	b.n	8000660 <productoEscalar16+0x38>
		tmp = *vectorIn * escalar;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	88ba      	ldrh	r2, [r7, #4]
 800064a:	fb12 f303 	smulbb	r3, r2, r3
 800064e:	82fb      	strh	r3, [r7, #22]
		*vectorOut++ = tmp;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c9a      	adds	r2, r3, #2
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	8afa      	ldrh	r2, [r7, #22]
 8000658:	801a      	strh	r2, [r3, #0]
	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3302      	adds	r3, #2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	dced      	bgt.n	8000644 <productoEscalar16+0x1c>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 8000676:	b480      	push	{r7}
 8000678:	b087      	sub	sp, #28
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	4611      	mov	r1, r2
 8000682:	461a      	mov	r2, r3
 8000684:	460b      	mov	r3, r1
 8000686:	80fb      	strh	r3, [r7, #6]
 8000688:	4613      	mov	r3, r2
 800068a:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = 0u;
 800068c:	2300      	movs	r3, #0
 800068e:	82fb      	strh	r3, [r7, #22]

	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 8000690:	e014      	b.n	80006bc <productoEscalar12+0x46>
		tmp = (*vectorIn * escalar) ;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	88ba      	ldrh	r2, [r7, #4]
 8000698:	fb12 f303 	smulbb	r3, r2, r3
 800069c:	82fb      	strh	r3, [r7, #22]
		/* Haciendo tmp &= 0x0FFF se logra overflow a 12 bits, no saturación */
		tmp = tmp > 0x0FFF ? 0x0FFF : tmp;
 800069e:	8afb      	ldrh	r3, [r7, #22]
 80006a0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006a4:	4293      	cmp	r3, r2
 80006a6:	bf28      	it	cs
 80006a8:	4613      	movcs	r3, r2
 80006aa:	82fb      	strh	r3, [r7, #22]
		*vectorOut++ = tmp;
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1c9a      	adds	r2, r3, #2
 80006b0:	60ba      	str	r2, [r7, #8]
 80006b2:	8afa      	ldrh	r2, [r7, #22]
 80006b4:	801a      	strh	r2, [r3, #0]
	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	3302      	adds	r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	dce6      	bgt.n	8000692 <productoEscalar12+0x1c>
	}
}
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	371c      	adds	r7, #28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b088      	sub	sp, #32
 80006d6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006d8:	f3ef 8314 	mrs	r3, CONTROL
 80006dc:	607b      	str	r3, [r7, #4]
  return(result);
 80006de:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80006e0:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	61fb      	str	r3, [r7, #28]
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	f383 8814 	msr	CONTROL, r3
}
 80006f4:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006f6:	f3ef 8314 	mrs	r3, CONTROL
 80006fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80006fc:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80006fe:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f023 0301 	bic.w	r3, r3, #1
 8000706:	61fb      	str	r3, [r7, #28]
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	f383 8814 	msr	CONTROL, r3
}
 8000712:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000714:	f3ef 8314 	mrs	r3, CONTROL
 8000718:	617b      	str	r3, [r7, #20]
  return(result);
 800071a:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 800071c:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 800071e:	f7ff fd67 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000722:	f3ef 8314 	mrs	r3, CONTROL
 8000726:	61bb      	str	r3, [r7, #24]
  return(result);
 8000728:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 800072a:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 800072c:	bf00      	nop
 800072e:	3720      	adds	r7, #32
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fc43 	bl	8000fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f84f 	bl	80007e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 8000742:	4820      	ldr	r0, [pc, #128]	; (80007c4 <main+0x90>)
 8000744:	f7ff fd58 	bl	80001f8 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	230a      	movs	r3, #10
 800074e:	491d      	ldr	r1, [pc, #116]	; (80007c4 <main+0x90>)
 8000750:	481d      	ldr	r0, [pc, #116]	; (80007c8 <main+0x94>)
 8000752:	f002 f88e 	bl	8002872 <HAL_UART_Transmit>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000756:	f000 f953 	bl	8000a00 <MX_GPIO_Init>
  MX_ETH_Init();
 800075a:	f000 f8ab 	bl	80008b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800075e:	f000 f8f7 	bl	8000950 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000762:	f000 f91f 	bl	80009a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000766:	f7ff ffb4 	bl	80006d2 <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 800076a:	2103      	movs	r1, #3
 800076c:	2005      	movs	r0, #5
 800076e:	f7ff fd41 	bl	80001f4 <asm_sum>
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE END 2 */

  sprintf( buffer, "asm_sum(5,3) = %lu\r\n", (uint32_t)Resultado );
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4915      	ldr	r1, [pc, #84]	; (80007cc <main+0x98>)
 8000778:	4812      	ldr	r0, [pc, #72]	; (80007c4 <main+0x90>)
 800077a:	f002 ff23 	bl	80035c4 <siprintf>
  HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <main+0x90>)
 8000780:	f7ff fd3a 	bl	80001f8 <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	b29a      	uxth	r2, r3
 8000788:	230a      	movs	r3, #10
 800078a:	490e      	ldr	r1, [pc, #56]	; (80007c4 <main+0x90>)
 800078c:	480e      	ldr	r0, [pc, #56]	; (80007c8 <main+0x94>)
 800078e:	f002 f870 	bl	8002872 <HAL_UART_Transmit>

  zeros((uint32_t *)buffer, LENGTH_BUFFER);
 8000792:	2105      	movs	r1, #5
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <main+0x90>)
 8000796:	f7ff ff0d 	bl	80005b4 <zeros>

  productoEscalar32(buffer_in_32, buffer_out_32, (uint32_t)LENGTH_BUFFER, 5u);
 800079a:	2305      	movs	r3, #5
 800079c:	2205      	movs	r2, #5
 800079e:	490c      	ldr	r1, [pc, #48]	; (80007d0 <main+0x9c>)
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <main+0xa0>)
 80007a2:	f7ff ff1e 	bl	80005e2 <productoEscalar32>

  productoEscalar16(buffer_in_16, buffer_out_16, (uint16_t)LENGTH_BUFFER, 2u);
 80007a6:	2302      	movs	r3, #2
 80007a8:	2205      	movs	r2, #5
 80007aa:	490b      	ldr	r1, [pc, #44]	; (80007d8 <main+0xa4>)
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <main+0xa8>)
 80007ae:	f7ff ff3b 	bl	8000628 <productoEscalar16>

  productoEscalar12(buffer_in_16, buffer_out_16, (uint16_t)LENGTH_BUFFER, 1024u);
 80007b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b6:	2205      	movs	r2, #5
 80007b8:	4907      	ldr	r1, [pc, #28]	; (80007d8 <main+0xa4>)
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <main+0xa8>)
 80007bc:	f7ff ff5b 	bl	8000676 <productoEscalar12>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <main+0x8c>
 80007c2:	bf00      	nop
 80007c4:	20000824 	.word	0x20000824
 80007c8:	200002d4 	.word	0x200002d4
 80007cc:	08003eb8 	.word	0x08003eb8
 80007d0:	20000840 	.word	0x20000840
 80007d4:	20000000 	.word	0x20000000
 80007d8:	20000854 	.word	0x20000854
 80007dc:	20000014 	.word	0x20000014

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	2230      	movs	r2, #48	; 0x30
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 fee0 	bl	80035b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a27      	ldr	r2, [pc, #156]	; (80008ac <SystemClock_Config+0xcc>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b25      	ldr	r3, [pc, #148]	; (80008ac <SystemClock_Config+0xcc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	2300      	movs	r3, #0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <SystemClock_Config+0xd0>)
 800082a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <SystemClock_Config+0xd0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000840:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000854:	23a8      	movs	r3, #168	; 0xa8
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800085c:	2307      	movs	r3, #7
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fb1f 	bl	8001ea8 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000870:	f000 f974 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2302      	movs	r3, #2
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000880:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	2105      	movs	r1, #5
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fd80 	bl	8002398 <HAL_RCC_ClockConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800089e:	f000 f95d 	bl	8000b5c <Error_Handler>
  }
}
 80008a2:	bf00      	nop
 80008a4:	3750      	adds	r7, #80	; 0x50
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40007000 	.word	0x40007000

080008b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_ETH_Init+0x84>)
 80008ba:	4a20      	ldr	r2, [pc, #128]	; (800093c <MX_ETH_Init+0x88>)
 80008bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_ETH_Init+0x8c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_ETH_Init+0x8c>)
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ETH_Init+0x8c>)
 80008cc:	22e1      	movs	r2, #225	; 0xe1
 80008ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_ETH_Init+0x8c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_ETH_Init+0x8c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_ETH_Init+0x8c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_ETH_Init+0x84>)
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <MX_ETH_Init+0x8c>)
 80008e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_ETH_Init+0x84>)
 80008ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_ETH_Init+0x84>)
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <MX_ETH_Init+0x90>)
 80008f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_ETH_Init+0x84>)
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_ETH_Init+0x94>)
 80008fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008fc:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_ETH_Init+0x84>)
 80008fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000902:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_ETH_Init+0x84>)
 8000906:	f000 fcd9 	bl	80012bc <HAL_ETH_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000910:	f000 f924 	bl	8000b5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000914:	2238      	movs	r2, #56	; 0x38
 8000916:	2100      	movs	r1, #0
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <MX_ETH_Init+0x98>)
 800091a:	f002 fe4b 	bl	80035b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_ETH_Init+0x98>)
 8000920:	2221      	movs	r2, #33	; 0x21
 8000922:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_ETH_Init+0x98>)
 8000926:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800092a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_ETH_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000224 	.word	0x20000224
 800093c:	40028000 	.word	0x40028000
 8000940:	20000860 	.word	0x20000860
 8000944:	20000184 	.word	0x20000184
 8000948:	200000e4 	.word	0x200000e4
 800094c:	200000ac 	.word	0x200000ac

08000950 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART3_UART_Init+0x4c>)
 8000956:	4a12      	ldr	r2, [pc, #72]	; (80009a0 <MX_USART3_UART_Init+0x50>)
 8000958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_USART3_UART_Init+0x4c>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART3_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART3_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART3_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART3_UART_Init+0x4c>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART3_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART3_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USART3_UART_Init+0x4c>)
 8000988:	f001 ff26 	bl	80027d8 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000992:	f000 f8e3 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002d4 	.word	0x200002d4
 80009a0:	40004800 	.word	0x40004800

080009a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2202      	movs	r2, #2
 80009c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	2201      	movs	r2, #1
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009e8:	f001 f941 	bl	8001c6e <HAL_PCD_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f8b3 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000318 	.word	0x20000318

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	4b4c      	ldr	r3, [pc, #304]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a4b      	ldr	r2, [pc, #300]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b49      	ldr	r3, [pc, #292]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	4b45      	ldr	r3, [pc, #276]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a44      	ldr	r2, [pc, #272]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b42      	ldr	r3, [pc, #264]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
 8000a52:	4b3e      	ldr	r3, [pc, #248]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a3d      	ldr	r2, [pc, #244]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b3b      	ldr	r3, [pc, #236]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	4a36      	ldr	r2, [pc, #216]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a74:	f043 0302 	orr.w	r3, r3, #2
 8000a78:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7a:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	f003 0302 	and.w	r3, r3, #2
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b30      	ldr	r3, [pc, #192]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a2f      	ldr	r2, [pc, #188]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0308 	and.w	r3, r3, #8
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b29      	ldr	r3, [pc, #164]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a28      	ldr	r2, [pc, #160]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <MX_GPIO_Init+0x14c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ac4:	4822      	ldr	r0, [pc, #136]	; (8000b50 <MX_GPIO_Init+0x150>)
 8000ac6:	f001 f8b9 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2140      	movs	r1, #64	; 0x40
 8000ace:	4821      	ldr	r0, [pc, #132]	; (8000b54 <MX_GPIO_Init+0x154>)
 8000ad0:	f001 f8b4 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ada:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481b      	ldr	r0, [pc, #108]	; (8000b58 <MX_GPIO_Init+0x158>)
 8000aec:	f000 fefa 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000af0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <MX_GPIO_Init+0x150>)
 8000b0a:	f000 feeb 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <MX_GPIO_Init+0x154>)
 8000b26:	f000 fedd 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_GPIO_Init+0x154>)
 8000b3e:	f000 fed1 	bl	80018e4 <HAL_GPIO_Init>

}
 8000b42:	bf00      	nop
 8000b44:	3730      	adds	r7, #48	; 0x30
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020400 	.word	0x40020400
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40020800 	.word	0x40020800

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	; 0x38
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a55      	ldr	r2, [pc, #340]	; (8000d2c <HAL_ETH_MspInit+0x174>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	f040 80a4 	bne.w	8000d24 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	4b53      	ldr	r3, [pc, #332]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a52      	ldr	r2, [pc, #328]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000be6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	623b      	str	r3, [r7, #32]
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	4b4c      	ldr	r3, [pc, #304]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	4a4b      	ldr	r2, [pc, #300]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c06:	6313      	str	r3, [r2, #48]	; 0x30
 8000c08:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	4b45      	ldr	r3, [pc, #276]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	4a44      	ldr	r2, [pc, #272]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c22:	6313      	str	r3, [r2, #48]	; 0x30
 8000c24:	4b42      	ldr	r3, [pc, #264]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	4b3e      	ldr	r3, [pc, #248]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	4a3d      	ldr	r2, [pc, #244]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c40:	4b3b      	ldr	r3, [pc, #236]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5c:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	4a2f      	ldr	r2, [pc, #188]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c72:	f043 0302 	orr.w	r3, r3, #2
 8000c76:	6313      	str	r3, [r2, #48]	; 0x30
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a28      	ldr	r2, [pc, #160]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <HAL_ETH_MspInit+0x178>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ca0:	2332      	movs	r3, #50	; 0x32
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481e      	ldr	r0, [pc, #120]	; (8000d34 <HAL_ETH_MspInit+0x17c>)
 8000cbc:	f000 fe12 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cc0:	2386      	movs	r3, #134	; 0x86
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd0:	230b      	movs	r3, #11
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4817      	ldr	r0, [pc, #92]	; (8000d38 <HAL_ETH_MspInit+0x180>)
 8000cdc:	f000 fe02 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf2:	230b      	movs	r3, #11
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480f      	ldr	r0, [pc, #60]	; (8000d3c <HAL_ETH_MspInit+0x184>)
 8000cfe:	f000 fdf1 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d14:	230b      	movs	r3, #11
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <HAL_ETH_MspInit+0x188>)
 8000d20:	f000 fde0 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	; 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40028000 	.word	0x40028000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020800 	.word	0x40020800
 8000d38:	40020000 	.word	0x40020000
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40021800 	.word	0x40021800

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db0:	2307      	movs	r3, #7
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000dbc:	f000 fd92 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df4:	d13f      	bne.n	8000e76 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e12:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e24:	230a      	movs	r3, #10
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <HAL_PCD_MspInit+0xb0>)
 8000e30:	f000 fd58 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e42:	f107 0314 	add.w	r3, r7, #20
 8000e46:	4619      	mov	r1, r3
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <HAL_PCD_MspInit+0xb0>)
 8000e4a:	f000 fd4b 	bl	80018e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e58:	6353      	str	r3, [r2, #52]	; 0x34
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e68:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6a:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_PCD_MspInit+0xac>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020000 	.word	0x40020000

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f8c8 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <_sbrk+0x5c>)
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <_sbrk+0x60>)
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <_sbrk+0x64>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <_sbrk+0x64>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <_sbrk+0x68>)
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <_sbrk+0x64>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4413      	add	r3, r2
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d207      	bcs.n	8000f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f0c:	f002 fb28 	bl	8003560 <__errno>
 8000f10:	4603      	mov	r3, r0
 8000f12:	220c      	movs	r2, #12
 8000f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f1a:	e009      	b.n	8000f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <_sbrk+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <_sbrk+0x64>)
 8000f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20030000 	.word	0x20030000
 8000f3c:	00000400 	.word	0x00000400
 8000f40:	20000868 	.word	0x20000868
 8000f44:	20000880 	.word	0x20000880

08000f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  nop
 8000f6c:	bf00      	nop
  nop
 8000f6e:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f74:	480d      	ldr	r0, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f76:	490e      	ldr	r1, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f8c:	4c0b      	ldr	r4, [pc, #44]	; (8000fbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9a:	f7ff ffd5 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f002 fae5 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fbc7 	bl	8000734 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fa8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fb4:	08003f2c 	.word	0x08003f2c
  ldr r2, =_sbss
 8000fb8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fbc:	20000880 	.word	0x20000880

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f931 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fdb6 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f93b 	bl	80012a2 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001044:	f000 f911 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000020 	.word	0x20000020
 8001060:	20000028 	.word	0x20000028
 8001064:	20000024 	.word	0x20000024

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000028 	.word	0x20000028
 800108c:	2000086c 	.word	0x2000086c

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	; (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2000086c 	.word	0x2000086c

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000028 	.word	0x20000028

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff47 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff5c 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffb0 	bl	8001210 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e06c      	b.n	80013a8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d106      	bne.n	80012e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2223      	movs	r2, #35	; 0x23
 80012dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff fc69 	bl	8000bb8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <HAL_ETH_Init+0xf4>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <HAL_ETH_Init+0xf4>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <HAL_ETH_Init+0xf4>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001302:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <HAL_ETH_Init+0xf8>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <HAL_ETH_Init+0xf8>)
 8001308:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800130c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <HAL_ETH_Init+0xf8>)
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4927      	ldr	r1, [pc, #156]	; (80013b4 <HAL_ETH_Init+0xf8>)
 8001318:	4313      	orrs	r3, r2
 800131a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <HAL_ETH_Init+0xf8>)
 800131e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6812      	ldr	r2, [r2, #0]
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001336:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001338:	f7ff feaa 	bl	8001090 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800133e:	e011      	b.n	8001364 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001340:	f7ff fea6 	bl	8001090 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800134e:	d909      	bls.n	8001364 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2204      	movs	r2, #4
 8001354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	22e0      	movs	r2, #224	; 0xe0
 800135c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e021      	b.n	80013a8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1e4      	bne.n	8001340 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f944 	bl	8001604 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f9eb 	bl	8001758 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fa41 	bl	800180a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	461a      	mov	r2, r3
 800138e:	2100      	movs	r1, #0
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f9a9 	bl	80016e8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2210      	movs	r2, #16
 80013a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800

080013b8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4b47      	ldr	r3, [pc, #284]	; (80014ec <ETH_SetMACConfig+0x134>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	7c1b      	ldrb	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <ETH_SetMACConfig+0x28>
 80013da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013de:	e000      	b.n	80013e2 <ETH_SetMACConfig+0x2a>
 80013e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	7c5b      	ldrb	r3, [r3, #17]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <ETH_SetMACConfig+0x38>
 80013ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ee:	e000      	b.n	80013f2 <ETH_SetMACConfig+0x3a>
 80013f0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013f2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	7fdb      	ldrb	r3, [r3, #31]
 80013fe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001400:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001406:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	7f92      	ldrb	r2, [r2, #30]
 800140c:	2a00      	cmp	r2, #0
 800140e:	d102      	bne.n	8001416 <ETH_SetMACConfig+0x5e>
 8001410:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001414:	e000      	b.n	8001418 <ETH_SetMACConfig+0x60>
 8001416:	2200      	movs	r2, #0
                        macconf->Speed |
 8001418:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	7f1b      	ldrb	r3, [r3, #28]
 800141e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001420:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001426:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	791b      	ldrb	r3, [r3, #4]
 800142c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800142e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001436:	2a00      	cmp	r2, #0
 8001438:	d102      	bne.n	8001440 <ETH_SetMACConfig+0x88>
 800143a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143e:	e000      	b.n	8001442 <ETH_SetMACConfig+0x8a>
 8001440:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001442:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	7bdb      	ldrb	r3, [r3, #15]
 8001448:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800144a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001450:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001458:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800145a:	4313      	orrs	r3, r2
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001472:	2001      	movs	r0, #1
 8001474:	f7ff fe18 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800149e:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80014a4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80014ac:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80014b4:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014bc:	4313      	orrs	r3, r2
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014d4:	2001      	movs	r0, #1
 80014d6:	f7ff fde7 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	ff20810f 	.word	0xff20810f

080014f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <ETH_SetDMAConfig+0x110>)
 800150a:	4013      	ands	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	7b1b      	ldrb	r3, [r3, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d102      	bne.n	800151c <ETH_SetDMAConfig+0x2c>
 8001516:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800151a:	e000      	b.n	800151e <ETH_SetDMAConfig+0x2e>
 800151c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	7b5b      	ldrb	r3, [r3, #13]
 8001522:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001524:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	7f52      	ldrb	r2, [r2, #29]
 800152a:	2a00      	cmp	r2, #0
 800152c:	d102      	bne.n	8001534 <ETH_SetDMAConfig+0x44>
 800152e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001532:	e000      	b.n	8001536 <ETH_SetDMAConfig+0x46>
 8001534:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001536:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	7b9b      	ldrb	r3, [r3, #14]
 800153c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800153e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001544:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	7f1b      	ldrb	r3, [r3, #28]
 800154a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800154c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	7f9b      	ldrb	r3, [r3, #30]
 8001552:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001554:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800155a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001562:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001564:	4313      	orrs	r3, r2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001574:	461a      	mov	r2, r3
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff fd8e 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	791b      	ldrb	r3, [r3, #4]
 800159e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fd5f 	bl	80010a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f2:	461a      	mov	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	f8de3f23 	.word	0xf8de3f23

08001604 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b0a6      	sub	sp, #152	; 0x98
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800160c:	2301      	movs	r3, #1
 800160e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001612:	2301      	movs	r3, #1
 8001614:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001618:	2300      	movs	r3, #0
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800162e:	2301      	movs	r3, #1
 8001630:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001640:	2300      	movs	r3, #0
 8001642:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800164a:	2300      	movs	r3, #0
 800164c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001666:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800166a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800166c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001670:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001678:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800167c:	4619      	mov	r1, r3
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fe9a 	bl	80013b8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001684:	2301      	movs	r3, #1
 8001686:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001688:	2301      	movs	r3, #1
 800168a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800168c:	2301      	movs	r3, #1
 800168e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001692:	2301      	movs	r3, #1
 8001694:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016be:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4619      	mov	r1, r3
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff08 	bl	80014f0 <ETH_SetDMAConfig>
}
 80016e0:	bf00      	nop
 80016e2:	3798      	adds	r7, #152	; 0x98
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3305      	adds	r3, #5
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	3204      	adds	r2, #4
 8001700:	7812      	ldrb	r2, [r2, #0]
 8001702:	4313      	orrs	r3, r2
 8001704:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <ETH_MACAddressConfig+0x68>)
 800170a:	4413      	add	r3, r2
 800170c:	461a      	mov	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3303      	adds	r3, #3
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	061a      	lsls	r2, r3, #24
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3302      	adds	r3, #2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3301      	adds	r3, #1
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4313      	orrs	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4313      	orrs	r3, r2
 8001734:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <ETH_MACAddressConfig+0x6c>)
 800173a:	4413      	add	r3, r2
 800173c:	461a      	mov	r2, r3
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	6013      	str	r3, [r2, #0]
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40028040 	.word	0x40028040
 8001754:	40028044 	.word	0x40028044

08001758 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	e03e      	b.n	80017e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68d9      	ldr	r1, [r3, #12]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2200      	movs	r2, #0
 800178e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	3206      	adds	r2, #6
 8001798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d80c      	bhi.n	80017c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68d9      	ldr	r1, [r3, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4613      	mov	r3, r2
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	e004      	b.n	80017d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	461a      	mov	r2, r3
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3301      	adds	r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d9bd      	bls.n	8001766 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fc:	611a      	str	r2, [r3, #16]
}
 80017fe:	bf00      	nop
 8001800:	3714      	adds	r7, #20
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800180a:	b480      	push	{r7}
 800180c:	b085      	sub	sp, #20
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	e046      	b.n	80018a6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6919      	ldr	r1, [r3, #16]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	440b      	add	r3, r1
 8001828:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2200      	movs	r2, #0
 8001834:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001854:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800185c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800186a:	68b9      	ldr	r1, [r7, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	3212      	adds	r2, #18
 8001872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b02      	cmp	r3, #2
 800187a:	d80c      	bhi.n	8001896 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6919      	ldr	r1, [r3, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	4613      	mov	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	440b      	add	r3, r1
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	e004      	b.n	80018a0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	461a      	mov	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d9b5      	bls.n	8001818 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691a      	ldr	r2, [r3, #16]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d6:	60da      	str	r2, [r3, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
 80018fe:	e177      	b.n	8001bf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001900:	2201      	movs	r2, #1
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	429a      	cmp	r2, r3
 800191a:	f040 8166 	bne.w	8001bea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d005      	beq.n	8001936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001932:	2b02      	cmp	r3, #2
 8001934:	d130      	bne.n	8001998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	2203      	movs	r2, #3
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800196c:	2201      	movs	r2, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	f003 0201 	and.w	r2, r3, #1
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d017      	beq.n	80019d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	2203      	movs	r2, #3
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d123      	bne.n	8001a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	08da      	lsrs	r2, r3, #3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3208      	adds	r2, #8
 80019e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	220f      	movs	r2, #15
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	08da      	lsrs	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3208      	adds	r2, #8
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	2203      	movs	r2, #3
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 0203 	and.w	r2, r3, #3
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80c0 	beq.w	8001bea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b66      	ldr	r3, [pc, #408]	; (8001c08 <HAL_GPIO_Init+0x324>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a65      	ldr	r2, [pc, #404]	; (8001c08 <HAL_GPIO_Init+0x324>)
 8001a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b63      	ldr	r3, [pc, #396]	; (8001c08 <HAL_GPIO_Init+0x324>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a86:	4a61      	ldr	r2, [pc, #388]	; (8001c0c <HAL_GPIO_Init+0x328>)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0303 	and.w	r3, r3, #3
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	220f      	movs	r2, #15
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a58      	ldr	r2, [pc, #352]	; (8001c10 <HAL_GPIO_Init+0x32c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d037      	beq.n	8001b22 <HAL_GPIO_Init+0x23e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a57      	ldr	r2, [pc, #348]	; (8001c14 <HAL_GPIO_Init+0x330>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d031      	beq.n	8001b1e <HAL_GPIO_Init+0x23a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a56      	ldr	r2, [pc, #344]	; (8001c18 <HAL_GPIO_Init+0x334>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d02b      	beq.n	8001b1a <HAL_GPIO_Init+0x236>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a55      	ldr	r2, [pc, #340]	; (8001c1c <HAL_GPIO_Init+0x338>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d025      	beq.n	8001b16 <HAL_GPIO_Init+0x232>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a54      	ldr	r2, [pc, #336]	; (8001c20 <HAL_GPIO_Init+0x33c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01f      	beq.n	8001b12 <HAL_GPIO_Init+0x22e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a53      	ldr	r2, [pc, #332]	; (8001c24 <HAL_GPIO_Init+0x340>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x22a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_GPIO_Init+0x344>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x226>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_GPIO_Init+0x348>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x222>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a50      	ldr	r2, [pc, #320]	; (8001c30 <HAL_GPIO_Init+0x34c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x21e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4f      	ldr	r2, [pc, #316]	; (8001c34 <HAL_GPIO_Init+0x350>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x21a>
 8001afa:	2309      	movs	r3, #9
 8001afc:	e012      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001afe:	230a      	movs	r3, #10
 8001b00:	e010      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b02:	2308      	movs	r3, #8
 8001b04:	e00e      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b06:	2307      	movs	r3, #7
 8001b08:	e00c      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	e00a      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b0e:	2305      	movs	r3, #5
 8001b10:	e008      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b12:	2304      	movs	r3, #4
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b16:	2303      	movs	r3, #3
 8001b18:	e004      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x240>
 8001b22:	2300      	movs	r3, #0
 8001b24:	69fa      	ldr	r2, [r7, #28]
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b34:	4935      	ldr	r1, [pc, #212]	; (8001c0c <HAL_GPIO_Init+0x328>)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b42:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_GPIO_Init+0x354>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b66:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <HAL_GPIO_Init+0x354>)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_GPIO_Init+0x354>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b90:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <HAL_GPIO_Init+0x354>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b96:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <HAL_GPIO_Init+0x354>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bba:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_GPIO_Init+0x354>)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <HAL_GPIO_Init+0x354>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be4:	4a14      	ldr	r2, [pc, #80]	; (8001c38 <HAL_GPIO_Init+0x354>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3301      	adds	r3, #1
 8001bee:	61fb      	str	r3, [r7, #28]
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	f67f ae84 	bls.w	8001900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40013800 	.word	0x40013800
 8001c10:	40020000 	.word	0x40020000
 8001c14:	40020400 	.word	0x40020400
 8001c18:	40020800 	.word	0x40020800
 8001c1c:	40020c00 	.word	0x40020c00
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40021400 	.word	0x40021400
 8001c28:	40021800 	.word	0x40021800
 8001c2c:	40021c00 	.word	0x40021c00
 8001c30:	40022000 	.word	0x40022000
 8001c34:	40022400 	.word	0x40022400
 8001c38:	40013c00 	.word	0x40013c00

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c58:	e003      	b.n	8001c62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	041a      	lsls	r2, r3, #16
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	619a      	str	r2, [r3, #24]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c70:	b08f      	sub	sp, #60	; 0x3c
 8001c72:	af0a      	add	r7, sp, #40	; 0x28
 8001c74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e10f      	b.n	8001ea0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff f89a 	bl	8000dd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d102      	bne.n	8001cba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f001 f9ad 	bl	800301e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	687e      	ldr	r6, [r7, #4]
 8001ccc:	466d      	mov	r5, sp
 8001cce:	f106 0410 	add.w	r4, r6, #16
 8001cd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cde:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ce2:	1d33      	adds	r3, r6, #4
 8001ce4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f001 f938 	bl	8002f5c <USB_CoreInit>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d005      	beq.n	8001cfe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e0d0      	b.n	8001ea0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 f99b 	bl	8003040 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	e04a      	b.n	8001da6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	333d      	adds	r3, #61	; 0x3d
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	333c      	adds	r3, #60	; 0x3c
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	b298      	uxth	r0, r3
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3344      	adds	r3, #68	; 0x44
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d50:	7bfa      	ldrb	r2, [r7, #15]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3340      	adds	r3, #64	; 0x40
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d64:	7bfa      	ldrb	r2, [r7, #15]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	3348      	adds	r3, #72	; 0x48
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	334c      	adds	r3, #76	; 0x4c
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	3354      	adds	r3, #84	; 0x54
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	3301      	adds	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d3af      	bcc.n	8001d10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]
 8001db4:	e044      	b.n	8001e40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001db6:	7bfa      	ldrb	r2, [r7, #15]
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	4413      	add	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d3b5      	bcc.n	8001db6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	687e      	ldr	r6, [r7, #4]
 8001e52:	466d      	mov	r5, sp
 8001e54:	f106 0410 	add.w	r4, r6, #16
 8001e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e64:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e68:	1d33      	adds	r3, r6, #4
 8001e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6c:	6838      	ldr	r0, [r7, #0]
 8001e6e:	f001 f933 	bl	80030d8 <USB_DevInit>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e00d      	b.n	8001ea0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 fafe 	bl	800349a <USB_DevDisconnect>

  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e267      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d075      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ec6:	4b88      	ldr	r3, [pc, #544]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d00c      	beq.n	8001eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b85      	ldr	r3, [pc, #532]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eda:	2b08      	cmp	r3, #8
 8001edc:	d112      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ede:	4b82      	ldr	r3, [pc, #520]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eea:	d10b      	bne.n	8001f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	4b7e      	ldr	r3, [pc, #504]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d05b      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x108>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d157      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e242      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f0c:	d106      	bne.n	8001f1c <HAL_RCC_OscConfig+0x74>
 8001f0e:	4b76      	ldr	r3, [pc, #472]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a75      	ldr	r2, [pc, #468]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x98>
 8001f26:	4b70      	ldr	r3, [pc, #448]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6f      	ldr	r2, [pc, #444]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b6d      	ldr	r3, [pc, #436]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6c      	ldr	r2, [pc, #432]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xb0>
 8001f40:	4b69      	ldr	r3, [pc, #420]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a68      	ldr	r2, [pc, #416]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a65      	ldr	r2, [pc, #404]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff f896 	bl	8001090 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff f892 	bl	8001090 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e207      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b5b      	ldr	r3, [pc, #364]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xc0>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff f882 	bl	8001090 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff f87e 	bl	8001090 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1f3      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b51      	ldr	r3, [pc, #324]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0xe8>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d063      	beq.n	8002086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fbe:	4b4a      	ldr	r3, [pc, #296]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd6:	4b44      	ldr	r3, [pc, #272]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1c7      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4937      	ldr	r1, [pc, #220]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_OscConfig+0x244>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f837 	bl	8001090 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff f833 	bl	8001090 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1a8      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b2b      	ldr	r3, [pc, #172]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b28      	ldr	r3, [pc, #160]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4925      	ldr	r1, [pc, #148]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <HAL_RCC_OscConfig+0x244>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f816 	bl	8001090 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff f812 	bl	8001090 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e187      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d036      	beq.n	8002100 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_RCC_OscConfig+0x248>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7fe fff6 	bl	8001090 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020a8:	f7fe fff2 	bl	8001090 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e167      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_OscConfig+0x240>)
 80020bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x200>
 80020c6:	e01b      	b.n	8002100 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_RCC_OscConfig+0x248>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ffdf 	bl	8001090 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	e00e      	b.n	80020f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7fe ffdb 	bl	8001090 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d907      	bls.n	80020f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e150      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	42470000 	.word	0x42470000
 80020f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80020f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ea      	bne.n	80020d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 8097 	beq.w	800223c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10f      	bne.n	800213e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	4b7d      	ldr	r3, [pc, #500]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a7c      	ldr	r2, [pc, #496]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b7a      	ldr	r3, [pc, #488]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213a:	2301      	movs	r3, #1
 800213c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213e:	4b77      	ldr	r3, [pc, #476]	; (800231c <HAL_RCC_OscConfig+0x474>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d118      	bne.n	800217c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214a:	4b74      	ldr	r3, [pc, #464]	; (800231c <HAL_RCC_OscConfig+0x474>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a73      	ldr	r2, [pc, #460]	; (800231c <HAL_RCC_OscConfig+0x474>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002156:	f7fe ff9b 	bl	8001090 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215e:	f7fe ff97 	bl	8001090 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e10c      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002170:	4b6a      	ldr	r3, [pc, #424]	; (800231c <HAL_RCC_OscConfig+0x474>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f0      	beq.n	800215e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x2ea>
 8002184:	4b64      	ldr	r3, [pc, #400]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a63      	ldr	r2, [pc, #396]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x324>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b05      	cmp	r3, #5
 8002198:	d10c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x30c>
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a5e      	ldr	r2, [pc, #376]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 0304 	orr.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	4a5b      	ldr	r2, [pc, #364]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6713      	str	r3, [r2, #112]	; 0x70
 80021b2:	e00b      	b.n	80021cc <HAL_RCC_OscConfig+0x324>
 80021b4:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 0301 	bic.w	r3, r3, #1
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
 80021c0:	4b55      	ldr	r3, [pc, #340]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a54      	ldr	r2, [pc, #336]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021c6:	f023 0304 	bic.w	r3, r3, #4
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d015      	beq.n	8002200 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021d4:	f7fe ff5c 	bl	8001090 <HAL_GetTick>
 80021d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7fe ff58 	bl	8001090 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e0cb      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0ee      	beq.n	80021dc <HAL_RCC_OscConfig+0x334>
 80021fe:	e014      	b.n	800222a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002200:	f7fe ff46 	bl	8001090 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe ff42 	bl	8001090 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e0b5      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221e:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1ee      	bne.n	8002208 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d105      	bne.n	800223c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	4a38      	ldr	r2, [pc, #224]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80a1 	beq.w	8002388 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 030c 	and.w	r3, r3, #12
 800224e:	2b08      	cmp	r3, #8
 8002250:	d05c      	beq.n	800230c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d141      	bne.n	80022de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCC_OscConfig+0x478>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe ff16 	bl	8001090 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002268:	f7fe ff12 	bl	8001090 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e087      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800227a:	4b27      	ldr	r3, [pc, #156]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f0      	bne.n	8002268 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69da      	ldr	r2, [r3, #28]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	019b      	lsls	r3, r3, #6
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	085b      	lsrs	r3, r3, #1
 800229e:	3b01      	subs	r3, #1
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	491b      	ldr	r1, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <HAL_RCC_OscConfig+0x478>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe feeb 	bl	8001090 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022be:	f7fe fee7 	bl	8001090 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e05c      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x416>
 80022dc:	e054      	b.n	8002388 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_RCC_OscConfig+0x478>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7fe fed4 	bl	8001090 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe fed0 	bl	8001090 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e045      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x470>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x444>
 800230a:	e03d      	b.n	8002388 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e038      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
 8002318:	40023800 	.word	0x40023800
 800231c:	40007000 	.word	0x40007000
 8002320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002324:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <HAL_RCC_OscConfig+0x4ec>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d028      	beq.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d121      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234a:	429a      	cmp	r2, r3
 800234c:	d11a      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002354:	4013      	ands	r3, r2
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800235a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800235c:	4293      	cmp	r3, r2
 800235e:	d111      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	3b01      	subs	r3, #1
 800236e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800

08002398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0cc      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d90c      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d001      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0b8      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d020      	beq.n	8002422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ec:	4b59      	ldr	r3, [pc, #356]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a58      	ldr	r2, [pc, #352]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80023f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002404:	4b53      	ldr	r3, [pc, #332]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800240e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	494d      	ldr	r1, [pc, #308]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	4313      	orrs	r3, r2
 8002420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d044      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d119      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d003      	beq.n	8002456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002452:	2b03      	cmp	r3, #3
 8002454:	d107      	bne.n	8002466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b3f      	ldr	r3, [pc, #252]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002466:	4b3b      	ldr	r3, [pc, #236]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e067      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	4934      	ldr	r1, [pc, #208]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	4313      	orrs	r3, r2
 8002486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002488:	f7fe fe02 	bl	8001090 <HAL_GetTick>
 800248c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248e:	e00a      	b.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002490:	f7fe fdfe 	bl	8001090 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	f241 3288 	movw	r2, #5000	; 0x1388
 800249e:	4293      	cmp	r3, r2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e04f      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 020c 	and.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d1eb      	bne.n	8002490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024b8:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d20c      	bcs.n	80024e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e032      	b.n	8002546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	4916      	ldr	r1, [pc, #88]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	490e      	ldr	r1, [pc, #56]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800251e:	f000 f821 	bl	8002564 <HAL_RCC_GetSysClockFreq>
 8002522:	4602      	mov	r2, r0
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	490a      	ldr	r1, [pc, #40]	; (8002558 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	5ccb      	ldrb	r3, [r1, r3]
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800253a:	4b09      	ldr	r3, [pc, #36]	; (8002560 <HAL_RCC_ClockConfig+0x1c8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe fd62 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00
 8002554:	40023800 	.word	0x40023800
 8002558:	08003ed0 	.word	0x08003ed0
 800255c:	20000020 	.word	0x20000020
 8002560:	20000024 	.word	0x20000024

08002564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002568:	b094      	sub	sp, #80	; 0x50
 800256a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
 8002570:	2300      	movs	r3, #0
 8002572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002574:	2300      	movs	r3, #0
 8002576:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800257c:	4b79      	ldr	r3, [pc, #484]	; (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b08      	cmp	r3, #8
 8002586:	d00d      	beq.n	80025a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002588:	2b08      	cmp	r3, #8
 800258a:	f200 80e1 	bhi.w	8002750 <HAL_RCC_GetSysClockFreq+0x1ec>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d002      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x34>
 8002592:	2b04      	cmp	r3, #4
 8002594:	d003      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x3a>
 8002596:	e0db      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b73      	ldr	r3, [pc, #460]	; (8002768 <HAL_RCC_GetSysClockFreq+0x204>)
 800259a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800259c:	e0db      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800259e:	4b73      	ldr	r3, [pc, #460]	; (800276c <HAL_RCC_GetSysClockFreq+0x208>)
 80025a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a2:	e0d8      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025a4:	4b6f      	ldr	r3, [pc, #444]	; (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025ac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ae:	4b6d      	ldr	r3, [pc, #436]	; (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d063      	beq.n	8002682 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ba:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	099b      	lsrs	r3, r3, #6
 80025c0:	2200      	movs	r2, #0
 80025c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025cc:	633b      	str	r3, [r7, #48]	; 0x30
 80025ce:	2300      	movs	r3, #0
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
 80025d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025d6:	4622      	mov	r2, r4
 80025d8:	462b      	mov	r3, r5
 80025da:	f04f 0000 	mov.w	r0, #0
 80025de:	f04f 0100 	mov.w	r1, #0
 80025e2:	0159      	lsls	r1, r3, #5
 80025e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025e8:	0150      	lsls	r0, r2, #5
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4621      	mov	r1, r4
 80025f0:	1a51      	subs	r1, r2, r1
 80025f2:	6139      	str	r1, [r7, #16]
 80025f4:	4629      	mov	r1, r5
 80025f6:	eb63 0301 	sbc.w	r3, r3, r1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002608:	4659      	mov	r1, fp
 800260a:	018b      	lsls	r3, r1, #6
 800260c:	4651      	mov	r1, sl
 800260e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002612:	4651      	mov	r1, sl
 8002614:	018a      	lsls	r2, r1, #6
 8002616:	4651      	mov	r1, sl
 8002618:	ebb2 0801 	subs.w	r8, r2, r1
 800261c:	4659      	mov	r1, fp
 800261e:	eb63 0901 	sbc.w	r9, r3, r1
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800262e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002636:	4690      	mov	r8, r2
 8002638:	4699      	mov	r9, r3
 800263a:	4623      	mov	r3, r4
 800263c:	eb18 0303 	adds.w	r3, r8, r3
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	462b      	mov	r3, r5
 8002644:	eb49 0303 	adc.w	r3, r9, r3
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002656:	4629      	mov	r1, r5
 8002658:	024b      	lsls	r3, r1, #9
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002660:	4621      	mov	r1, r4
 8002662:	024a      	lsls	r2, r1, #9
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266a:	2200      	movs	r2, #0
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28
 800266e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002670:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002674:	f7fd fe1c 	bl	80002b0 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4613      	mov	r3, r2
 800267e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002680:	e058      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	099b      	lsrs	r3, r3, #6
 8002688:	2200      	movs	r2, #0
 800268a:	4618      	mov	r0, r3
 800268c:	4611      	mov	r1, r2
 800268e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002692:	623b      	str	r3, [r7, #32]
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800269c:	4642      	mov	r2, r8
 800269e:	464b      	mov	r3, r9
 80026a0:	f04f 0000 	mov.w	r0, #0
 80026a4:	f04f 0100 	mov.w	r1, #0
 80026a8:	0159      	lsls	r1, r3, #5
 80026aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ae:	0150      	lsls	r0, r2, #5
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4641      	mov	r1, r8
 80026b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ba:	4649      	mov	r1, r9
 80026bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026d4:	ebb2 040a 	subs.w	r4, r2, sl
 80026d8:	eb63 050b 	sbc.w	r5, r3, fp
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	00eb      	lsls	r3, r5, #3
 80026e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026ea:	00e2      	lsls	r2, r4, #3
 80026ec:	4614      	mov	r4, r2
 80026ee:	461d      	mov	r5, r3
 80026f0:	4643      	mov	r3, r8
 80026f2:	18e3      	adds	r3, r4, r3
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	464b      	mov	r3, r9
 80026f8:	eb45 0303 	adc.w	r3, r5, r3
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800270a:	4629      	mov	r1, r5
 800270c:	028b      	lsls	r3, r1, #10
 800270e:	4621      	mov	r1, r4
 8002710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002714:	4621      	mov	r1, r4
 8002716:	028a      	lsls	r2, r1, #10
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800271e:	2200      	movs	r2, #0
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	61fa      	str	r2, [r7, #28]
 8002724:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002728:	f7fd fdc2 	bl	80002b0 <__aeabi_uldivmod>
 800272c:	4602      	mov	r2, r0
 800272e:	460b      	mov	r3, r1
 8002730:	4613      	mov	r3, r2
 8002732:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <HAL_RCC_GetSysClockFreq+0x200>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	3301      	adds	r3, #1
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002744:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002748:	fbb2 f3f3 	udiv	r3, r2, r3
 800274c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800274e:	e002      	b.n	8002756 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetSysClockFreq+0x204>)
 8002752:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002758:	4618      	mov	r0, r3
 800275a:	3750      	adds	r7, #80	; 0x50
 800275c:	46bd      	mov	sp, r7
 800275e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	00f42400 	.word	0x00f42400
 800276c:	007a1200 	.word	0x007a1200

08002770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_RCC_GetHCLKFreq+0x14>)
 8002776:	681b      	ldr	r3, [r3, #0]
}
 8002778:	4618      	mov	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000020 	.word	0x20000020

08002788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800278c:	f7ff fff0 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	0a9b      	lsrs	r3, r3, #10
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40023800 	.word	0x40023800
 80027ac:	08003ee0 	.word	0x08003ee0

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027b4:	f7ff ffdc 	bl	8002770 <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0b5b      	lsrs	r3, r3, #13
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4903      	ldr	r1, [pc, #12]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	08003ee0 	.word	0x08003ee0

080027d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e03f      	b.n	800286a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe faa0 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f929 	bl	8002a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b08a      	sub	sp, #40	; 0x28
 8002876:	af02      	add	r7, sp, #8
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b20      	cmp	r3, #32
 8002890:	d17c      	bne.n	800298c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d002      	beq.n	800289e <HAL_UART_Transmit+0x2c>
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e075      	b.n	800298e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_UART_Transmit+0x3e>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e06e      	b.n	800298e <HAL_UART_Transmit+0x11c>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2221      	movs	r2, #33	; 0x21
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028c6:	f7fe fbe3 	bl	8001090 <HAL_GetTick>
 80028ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	88fa      	ldrh	r2, [r7, #6]
 80028d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	88fa      	ldrh	r2, [r7, #6]
 80028d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e0:	d108      	bne.n	80028f4 <HAL_UART_Transmit+0x82>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d104      	bne.n	80028f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	e003      	b.n	80028fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002904:	e02a      	b.n	800295c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2200      	movs	r2, #0
 800290e:	2180      	movs	r1, #128	; 0x80
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 f840 	bl	8002996 <UART_WaitOnFlagUntilTimeout>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e036      	b.n	800298e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10b      	bne.n	800293e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002934:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	3302      	adds	r3, #2
 800293a:	61bb      	str	r3, [r7, #24]
 800293c:	e007      	b.n	800294e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	781a      	ldrb	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002960:	b29b      	uxth	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1cf      	bne.n	8002906 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2200      	movs	r2, #0
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f810 	bl	8002996 <UART_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e006      	b.n	800298e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	e000      	b.n	800298e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800298c:	2302      	movs	r3, #2
  }
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b090      	sub	sp, #64	; 0x40
 800299a:	af00      	add	r7, sp, #0
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	60b9      	str	r1, [r7, #8]
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	4613      	mov	r3, r2
 80029a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029a6:	e050      	b.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ae:	d04c      	beq.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80029b6:	f7fe fb6b 	bl	8001090 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d241      	bcs.n	8002a4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	330c      	adds	r3, #12
 80029e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029e6:	637a      	str	r2, [r7, #52]	; 0x34
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ee:	e841 2300 	strex	r3, r2, [r1]
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1e5      	bne.n	80029c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	3314      	adds	r3, #20
 8002a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	613b      	str	r3, [r7, #16]
   return(result);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f023 0301 	bic.w	r3, r3, #1
 8002a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3314      	adds	r3, #20
 8002a18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a1a:	623a      	str	r2, [r7, #32]
 8002a1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a1e:	69f9      	ldr	r1, [r7, #28]
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	e841 2300 	strex	r3, r2, [r1]
 8002a26:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1e5      	bne.n	80029fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2220      	movs	r2, #32
 8002a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e00f      	b.n	8002a6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d09f      	beq.n	80029a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3740      	adds	r7, #64	; 0x40
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a78:	b0c0      	sub	sp, #256	; 0x100
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a90:	68d9      	ldr	r1, [r3, #12]
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	ea40 0301 	orr.w	r3, r0, r1
 8002a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002acc:	f021 010c 	bic.w	r1, r1, #12
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ada:	430b      	orrs	r3, r1
 8002adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	6999      	ldr	r1, [r3, #24]
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	ea40 0301 	orr.w	r3, r0, r1
 8002afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b8f      	ldr	r3, [pc, #572]	; (8002d40 <UART_SetConfig+0x2cc>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d005      	beq.n	8002b14 <UART_SetConfig+0xa0>
 8002b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b8d      	ldr	r3, [pc, #564]	; (8002d44 <UART_SetConfig+0x2d0>)
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d104      	bne.n	8002b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b14:	f7ff fe4c 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8002b18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b1c:	e003      	b.n	8002b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b1e:	f7ff fe33 	bl	8002788 <HAL_RCC_GetPCLK1Freq>
 8002b22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	69db      	ldr	r3, [r3, #28]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b30:	f040 810c 	bne.w	8002d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	1891      	adds	r1, r2, r2
 8002b4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b4e:	415b      	adcs	r3, r3
 8002b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b56:	4621      	mov	r1, r4
 8002b58:	eb12 0801 	adds.w	r8, r2, r1
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb43 0901 	adc.w	r9, r3, r1
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b76:	4690      	mov	r8, r2
 8002b78:	4699      	mov	r9, r3
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	eb18 0303 	adds.w	r3, r8, r3
 8002b80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b84:	462b      	mov	r3, r5
 8002b86:	eb49 0303 	adc.w	r3, r9, r3
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	18db      	adds	r3, r3, r3
 8002ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8002ba8:	4613      	mov	r3, r2
 8002baa:	eb42 0303 	adc.w	r3, r2, r3
 8002bae:	657b      	str	r3, [r7, #84]	; 0x54
 8002bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bb8:	f7fd fb7a 	bl	80002b0 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	011c      	lsls	r4, r3, #4
 8002bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bdc:	4642      	mov	r2, r8
 8002bde:	464b      	mov	r3, r9
 8002be0:	1891      	adds	r1, r2, r2
 8002be2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002be4:	415b      	adcs	r3, r3
 8002be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002bec:	4641      	mov	r1, r8
 8002bee:	eb12 0a01 	adds.w	sl, r2, r1
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c0c:	4692      	mov	sl, r2
 8002c0e:	469b      	mov	fp, r3
 8002c10:	4643      	mov	r3, r8
 8002c12:	eb1a 0303 	adds.w	r3, sl, r3
 8002c16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	18db      	adds	r3, r3, r3
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3e:	4613      	mov	r3, r2
 8002c40:	eb42 0303 	adc.w	r3, r2, r3
 8002c44:	647b      	str	r3, [r7, #68]	; 0x44
 8002c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c4e:	f7fd fb2f 	bl	80002b0 <__aeabi_uldivmod>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	4b3b      	ldr	r3, [pc, #236]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2264      	movs	r2, #100	; 0x64
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	1acb      	subs	r3, r1, r3
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002c70:	fba3 2302 	umull	r2, r3, r3, r2
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c7c:	441c      	add	r4, r3
 8002c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c82:	2200      	movs	r2, #0
 8002c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c90:	4642      	mov	r2, r8
 8002c92:	464b      	mov	r3, r9
 8002c94:	1891      	adds	r1, r2, r2
 8002c96:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c98:	415b      	adcs	r3, r3
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	1851      	adds	r1, r2, r1
 8002ca4:	6339      	str	r1, [r7, #48]	; 0x30
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	414b      	adcs	r3, r1
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cb8:	4659      	mov	r1, fp
 8002cba:	00cb      	lsls	r3, r1, #3
 8002cbc:	4651      	mov	r1, sl
 8002cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	00ca      	lsls	r2, r1, #3
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4603      	mov	r3, r0
 8002ccc:	4642      	mov	r2, r8
 8002cce:	189b      	adds	r3, r3, r2
 8002cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cd4:	464b      	mov	r3, r9
 8002cd6:	460a      	mov	r2, r1
 8002cd8:	eb42 0303 	adc.w	r3, r2, r3
 8002cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	18db      	adds	r3, r3, r3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	eb42 0303 	adc.w	r3, r2, r3
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002d0a:	f7fd fad1 	bl	80002b0 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	; 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	3332      	adds	r3, #50	; 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	; (8002d48 <UART_SetConfig+0x2d4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 0207 	and.w	r2, r3, #7
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d3c:	e105      	b.n	8002f4a <UART_SetConfig+0x4d6>
 8002d3e:	bf00      	nop
 8002d40:	40011000 	.word	0x40011000
 8002d44:	40011400 	.word	0x40011400
 8002d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d56:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d5e:	4642      	mov	r2, r8
 8002d60:	464b      	mov	r3, r9
 8002d62:	1891      	adds	r1, r2, r2
 8002d64:	6239      	str	r1, [r7, #32]
 8002d66:	415b      	adcs	r3, r3
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d6e:	4641      	mov	r1, r8
 8002d70:	1854      	adds	r4, r2, r1
 8002d72:	4649      	mov	r1, r9
 8002d74:	eb43 0501 	adc.w	r5, r3, r1
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	00eb      	lsls	r3, r5, #3
 8002d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d86:	00e2      	lsls	r2, r4, #3
 8002d88:	4614      	mov	r4, r2
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	18e3      	adds	r3, r4, r3
 8002d90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d94:	464b      	mov	r3, r9
 8002d96:	eb45 0303 	adc.w	r3, r5, r3
 8002d9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002daa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dba:	4629      	mov	r1, r5
 8002dbc:	008b      	lsls	r3, r1, #2
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	008a      	lsls	r2, r1, #2
 8002dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dcc:	f7fd fa70 	bl	80002b0 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	011c      	lsls	r4, r3, #4
 8002dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002df0:	4642      	mov	r2, r8
 8002df2:	464b      	mov	r3, r9
 8002df4:	1891      	adds	r1, r2, r2
 8002df6:	61b9      	str	r1, [r7, #24]
 8002df8:	415b      	adcs	r3, r3
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e00:	4641      	mov	r1, r8
 8002e02:	1851      	adds	r1, r2, r1
 8002e04:	6139      	str	r1, [r7, #16]
 8002e06:	4649      	mov	r1, r9
 8002e08:	414b      	adcs	r3, r1
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	f04f 0200 	mov.w	r2, #0
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e18:	4659      	mov	r1, fp
 8002e1a:	00cb      	lsls	r3, r1, #3
 8002e1c:	4651      	mov	r1, sl
 8002e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e22:	4651      	mov	r1, sl
 8002e24:	00ca      	lsls	r2, r1, #3
 8002e26:	4610      	mov	r0, r2
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4642      	mov	r2, r8
 8002e2e:	189b      	adds	r3, r3, r2
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e34:	464b      	mov	r3, r9
 8002e36:	460a      	mov	r2, r1
 8002e38:	eb42 0303 	adc.w	r3, r2, r3
 8002e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e58:	4649      	mov	r1, r9
 8002e5a:	008b      	lsls	r3, r1, #2
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e62:	4641      	mov	r1, r8
 8002e64:	008a      	lsls	r2, r1, #2
 8002e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e6a:	f7fd fa21 	bl	80002b0 <__aeabi_uldivmod>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4b39      	ldr	r3, [pc, #228]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002e74:	fba3 1302 	umull	r1, r3, r3, r2
 8002e78:	095b      	lsrs	r3, r3, #5
 8002e7a:	2164      	movs	r1, #100	; 0x64
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	3332      	adds	r3, #50	; 0x32
 8002e86:	4a34      	ldr	r2, [pc, #208]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e92:	441c      	add	r4, r3
 8002e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e98:	2200      	movs	r2, #0
 8002e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8002e9c:	677a      	str	r2, [r7, #116]	; 0x74
 8002e9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	1891      	adds	r1, r2, r2
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	415b      	adcs	r3, r3
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb2:	4641      	mov	r1, r8
 8002eb4:	1851      	adds	r1, r2, r1
 8002eb6:	6039      	str	r1, [r7, #0]
 8002eb8:	4649      	mov	r1, r9
 8002eba:	414b      	adcs	r3, r1
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002eca:	4659      	mov	r1, fp
 8002ecc:	00cb      	lsls	r3, r1, #3
 8002ece:	4651      	mov	r1, sl
 8002ed0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	00ca      	lsls	r2, r1, #3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	4603      	mov	r3, r0
 8002ede:	4642      	mov	r2, r8
 8002ee0:	189b      	adds	r3, r3, r2
 8002ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ee4:	464b      	mov	r3, r9
 8002ee6:	460a      	mov	r2, r1
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	663b      	str	r3, [r7, #96]	; 0x60
 8002ef8:	667a      	str	r2, [r7, #100]	; 0x64
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f06:	4649      	mov	r1, r9
 8002f08:	008b      	lsls	r3, r1, #2
 8002f0a:	4641      	mov	r1, r8
 8002f0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f10:	4641      	mov	r1, r8
 8002f12:	008a      	lsls	r2, r1, #2
 8002f14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f18:	f7fd f9ca 	bl	80002b0 <__aeabi_uldivmod>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002f22:	fba3 1302 	umull	r1, r3, r3, r2
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	2164      	movs	r1, #100	; 0x64
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	3332      	adds	r3, #50	; 0x32
 8002f34:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <UART_SetConfig+0x4e4>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	f003 020f 	and.w	r2, r3, #15
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4422      	add	r2, r4
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f50:	46bd      	mov	sp, r7
 8002f52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f56:	bf00      	nop
 8002f58:	51eb851f 	.word	0x51eb851f

08002f5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f5c:	b084      	sub	sp, #16
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b084      	sub	sp, #16
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	f107 001c 	add.w	r0, r7, #28
 8002f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d122      	bne.n	8002fba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 faa2 	bl	80034f8 <USB_CoreReset>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	e01a      	b.n	8002ff0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fa96 	bl	80034f8 <USB_CoreReset>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe2:	e005      	b.n	8002ff0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10b      	bne.n	800300e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f043 0206 	orr.w	r2, r3, #6
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800300e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800301a:	b004      	add	sp, #16
 800301c:	4770      	bx	lr

0800301e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f023 0201 	bic.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800304c:	2300      	movs	r3, #0
 800304e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d115      	bne.n	800308e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800306e:	2001      	movs	r0, #1
 8003070:	f7fe f81a 	bl	80010a8 <HAL_Delay>
      ms++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	3301      	adds	r3, #1
 8003078:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fa2e 	bl	80034dc <USB_GetMode>
 8003080:	4603      	mov	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d01e      	beq.n	80030c4 <USB_SetCurrentMode+0x84>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b31      	cmp	r3, #49	; 0x31
 800308a:	d9f0      	bls.n	800306e <USB_SetCurrentMode+0x2e>
 800308c:	e01a      	b.n	80030c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d115      	bne.n	80030c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030a0:	2001      	movs	r0, #1
 80030a2:	f7fe f801 	bl	80010a8 <HAL_Delay>
      ms++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3301      	adds	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fa15 	bl	80034dc <USB_GetMode>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <USB_SetCurrentMode+0x84>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b31      	cmp	r3, #49	; 0x31
 80030bc:	d9f0      	bls.n	80030a0 <USB_SetCurrentMode+0x60>
 80030be:	e001      	b.n	80030c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e005      	b.n	80030d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2b32      	cmp	r3, #50	; 0x32
 80030c8:	d101      	bne.n	80030ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030d8:	b084      	sub	sp, #16
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e009      	b.n	800310c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	3340      	adds	r3, #64	; 0x40
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	2200      	movs	r2, #0
 8003104:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	3301      	adds	r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b0e      	cmp	r3, #14
 8003110:	d9f2      	bls.n	80030f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11c      	bne.n	8003152 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	639a      	str	r2, [r3, #56]	; 0x38
 8003150:	e00b      	b.n	800316a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003162:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003170:	461a      	mov	r2, r3
 8003172:	2300      	movs	r3, #0
 8003174:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317c:	4619      	mov	r1, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003184:	461a      	mov	r2, r3
 8003186:	680b      	ldr	r3, [r1, #0]
 8003188:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10c      	bne.n	80031aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003196:	2100      	movs	r1, #0
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f965 	bl	8003468 <USB_SetDevSpeed>
 800319e:	e008      	b.n	80031b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031a0:	2101      	movs	r1, #1
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f960 	bl	8003468 <USB_SetDevSpeed>
 80031a8:	e003      	b.n	80031b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031aa:	2103      	movs	r1, #3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f95b 	bl	8003468 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031b2:	2110      	movs	r1, #16
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f8f3 	bl	80033a0 <USB_FlushTxFifo>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f91f 	bl	8003408 <USB_FlushRxFifo>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031da:	461a      	mov	r2, r3
 80031dc:	2300      	movs	r3, #0
 80031de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	461a      	mov	r2, r3
 80031f4:	2300      	movs	r3, #0
 80031f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	e043      	b.n	8003286 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	015a      	lsls	r2, r3, #5
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4413      	add	r3, r2
 8003206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003214:	d118      	bne.n	8003248 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10a      	bne.n	8003232 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003228:	461a      	mov	r2, r3
 800322a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e013      	b.n	800325a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323e:	461a      	mov	r2, r3
 8003240:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e008      	b.n	800325a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003254:	461a      	mov	r2, r3
 8003256:	2300      	movs	r3, #0
 8003258:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003266:	461a      	mov	r2, r3
 8003268:	2300      	movs	r3, #0
 800326a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4413      	add	r3, r2
 8003274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003278:	461a      	mov	r2, r3
 800327a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800327e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	3301      	adds	r3, #1
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	429a      	cmp	r2, r3
 800328c:	d3b7      	bcc.n	80031fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e043      	b.n	800331c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032aa:	d118      	bne.n	80032de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10a      	bne.n	80032c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032be:	461a      	mov	r2, r3
 80032c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	e013      	b.n	80032f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d4:	461a      	mov	r2, r3
 80032d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e008      	b.n	80032f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ea:	461a      	mov	r2, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	2300      	movs	r3, #0
 8003300:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330e:	461a      	mov	r2, r3
 8003310:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003314:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	3301      	adds	r3, #1
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d3b7      	bcc.n	8003294 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003336:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003344:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	2b00      	cmp	r3, #0
 800334a:	d105      	bne.n	8003358 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f043 0210 	orr.w	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <USB_DevInit+0x2c4>)
 800335e:	4313      	orrs	r3, r2
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003366:	2b00      	cmp	r3, #0
 8003368:	d005      	beq.n	8003376 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f043 0208 	orr.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d107      	bne.n	800338c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003384:	f043 0304 	orr.w	r3, r3, #4
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800338c:	7dfb      	ldrb	r3, [r7, #23]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003398:	b004      	add	sp, #16
 800339a:	4770      	bx	lr
 800339c:	803c3800 	.word	0x803c3800

080033a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3301      	adds	r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4a13      	ldr	r2, [pc, #76]	; (8003404 <USB_FlushTxFifo+0x64>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e01b      	b.n	80033f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	daf2      	bge.n	80033ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	019b      	lsls	r3, r3, #6
 80033d0:	f043 0220 	orr.w	r2, r3, #32
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <USB_FlushTxFifo+0x64>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d901      	bls.n	80033ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e006      	b.n	80033f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d0f0      	beq.n	80033d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	00030d40 	.word	0x00030d40

08003408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3301      	adds	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a11      	ldr	r2, [pc, #68]	; (8003464 <USB_FlushRxFifo+0x5c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e018      	b.n	8003458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	daf2      	bge.n	8003414 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2210      	movs	r2, #16
 8003436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3301      	adds	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4a08      	ldr	r2, [pc, #32]	; (8003464 <USB_FlushRxFifo+0x5c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e006      	b.n	8003458 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0310 	and.w	r3, r3, #16
 8003452:	2b10      	cmp	r3, #16
 8003454:	d0f0      	beq.n	8003438 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	00030d40 	.word	0x00030d40

08003468 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	68f9      	ldr	r1, [r7, #12]
 8003484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80034b4:	f023 0303 	bic.w	r3, r3, #3
 80034b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034c8:	f043 0302 	orr.w	r3, r3, #2
 80034cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f003 0301 	and.w	r3, r3, #1
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3301      	adds	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <USB_CoreReset+0x64>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e01b      	b.n	800354e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	daf2      	bge.n	8003504 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	f043 0201 	orr.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	3301      	adds	r3, #1
 8003532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a09      	ldr	r2, [pc, #36]	; (800355c <USB_CoreReset+0x64>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e006      	b.n	800354e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d0f0      	beq.n	800352e <USB_CoreReset+0x36>

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	00030d40 	.word	0x00030d40

08003560 <__errno>:
 8003560:	4b01      	ldr	r3, [pc, #4]	; (8003568 <__errno+0x8>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	2000002c 	.word	0x2000002c

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4d0d      	ldr	r5, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2600      	movs	r6, #0
 8003578:	42a6      	cmp	r6, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4d0b      	ldr	r5, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f000 fc8e 	bl	8003ea0 <_init>
 8003584:	1b64      	subs	r4, r4, r5
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2600      	movs	r6, #0
 800358a:	42a6      	cmp	r6, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f855 3b04 	ldr.w	r3, [r5], #4
 8003594:	4798      	blx	r3
 8003596:	3601      	adds	r6, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f855 3b04 	ldr.w	r3, [r5], #4
 800359e:	4798      	blx	r3
 80035a0:	3601      	adds	r6, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	08003f24 	.word	0x08003f24
 80035a8:	08003f24 	.word	0x08003f24
 80035ac:	08003f24 	.word	0x08003f24
 80035b0:	08003f28 	.word	0x08003f28

080035b4 <memset>:
 80035b4:	4402      	add	r2, r0
 80035b6:	4603      	mov	r3, r0
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d100      	bne.n	80035be <memset+0xa>
 80035bc:	4770      	bx	lr
 80035be:	f803 1b01 	strb.w	r1, [r3], #1
 80035c2:	e7f9      	b.n	80035b8 <memset+0x4>

080035c4 <siprintf>:
 80035c4:	b40e      	push	{r1, r2, r3}
 80035c6:	b500      	push	{lr}
 80035c8:	b09c      	sub	sp, #112	; 0x70
 80035ca:	ab1d      	add	r3, sp, #116	; 0x74
 80035cc:	9002      	str	r0, [sp, #8]
 80035ce:	9006      	str	r0, [sp, #24]
 80035d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035d4:	4809      	ldr	r0, [pc, #36]	; (80035fc <siprintf+0x38>)
 80035d6:	9107      	str	r1, [sp, #28]
 80035d8:	9104      	str	r1, [sp, #16]
 80035da:	4909      	ldr	r1, [pc, #36]	; (8003600 <siprintf+0x3c>)
 80035dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80035e0:	9105      	str	r1, [sp, #20]
 80035e2:	6800      	ldr	r0, [r0, #0]
 80035e4:	9301      	str	r3, [sp, #4]
 80035e6:	a902      	add	r1, sp, #8
 80035e8:	f000 f868 	bl	80036bc <_svfiprintf_r>
 80035ec:	9b02      	ldr	r3, [sp, #8]
 80035ee:	2200      	movs	r2, #0
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	b01c      	add	sp, #112	; 0x70
 80035f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80035f8:	b003      	add	sp, #12
 80035fa:	4770      	bx	lr
 80035fc:	2000002c 	.word	0x2000002c
 8003600:	ffff0208 	.word	0xffff0208

08003604 <__ssputs_r>:
 8003604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003608:	688e      	ldr	r6, [r1, #8]
 800360a:	429e      	cmp	r6, r3
 800360c:	4682      	mov	sl, r0
 800360e:	460c      	mov	r4, r1
 8003610:	4690      	mov	r8, r2
 8003612:	461f      	mov	r7, r3
 8003614:	d838      	bhi.n	8003688 <__ssputs_r+0x84>
 8003616:	898a      	ldrh	r2, [r1, #12]
 8003618:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800361c:	d032      	beq.n	8003684 <__ssputs_r+0x80>
 800361e:	6825      	ldr	r5, [r4, #0]
 8003620:	6909      	ldr	r1, [r1, #16]
 8003622:	eba5 0901 	sub.w	r9, r5, r1
 8003626:	6965      	ldr	r5, [r4, #20]
 8003628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800362c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003630:	3301      	adds	r3, #1
 8003632:	444b      	add	r3, r9
 8003634:	106d      	asrs	r5, r5, #1
 8003636:	429d      	cmp	r5, r3
 8003638:	bf38      	it	cc
 800363a:	461d      	movcc	r5, r3
 800363c:	0553      	lsls	r3, r2, #21
 800363e:	d531      	bpl.n	80036a4 <__ssputs_r+0xa0>
 8003640:	4629      	mov	r1, r5
 8003642:	f000 fb63 	bl	8003d0c <_malloc_r>
 8003646:	4606      	mov	r6, r0
 8003648:	b950      	cbnz	r0, 8003660 <__ssputs_r+0x5c>
 800364a:	230c      	movs	r3, #12
 800364c:	f8ca 3000 	str.w	r3, [sl]
 8003650:	89a3      	ldrh	r3, [r4, #12]
 8003652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003656:	81a3      	strh	r3, [r4, #12]
 8003658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800365c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003660:	6921      	ldr	r1, [r4, #16]
 8003662:	464a      	mov	r2, r9
 8003664:	f000 fabe 	bl	8003be4 <memcpy>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800366e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003672:	81a3      	strh	r3, [r4, #12]
 8003674:	6126      	str	r6, [r4, #16]
 8003676:	6165      	str	r5, [r4, #20]
 8003678:	444e      	add	r6, r9
 800367a:	eba5 0509 	sub.w	r5, r5, r9
 800367e:	6026      	str	r6, [r4, #0]
 8003680:	60a5      	str	r5, [r4, #8]
 8003682:	463e      	mov	r6, r7
 8003684:	42be      	cmp	r6, r7
 8003686:	d900      	bls.n	800368a <__ssputs_r+0x86>
 8003688:	463e      	mov	r6, r7
 800368a:	6820      	ldr	r0, [r4, #0]
 800368c:	4632      	mov	r2, r6
 800368e:	4641      	mov	r1, r8
 8003690:	f000 fab6 	bl	8003c00 <memmove>
 8003694:	68a3      	ldr	r3, [r4, #8]
 8003696:	1b9b      	subs	r3, r3, r6
 8003698:	60a3      	str	r3, [r4, #8]
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	4433      	add	r3, r6
 800369e:	6023      	str	r3, [r4, #0]
 80036a0:	2000      	movs	r0, #0
 80036a2:	e7db      	b.n	800365c <__ssputs_r+0x58>
 80036a4:	462a      	mov	r2, r5
 80036a6:	f000 fba5 	bl	8003df4 <_realloc_r>
 80036aa:	4606      	mov	r6, r0
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d1e1      	bne.n	8003674 <__ssputs_r+0x70>
 80036b0:	6921      	ldr	r1, [r4, #16]
 80036b2:	4650      	mov	r0, sl
 80036b4:	f000 fabe 	bl	8003c34 <_free_r>
 80036b8:	e7c7      	b.n	800364a <__ssputs_r+0x46>
	...

080036bc <_svfiprintf_r>:
 80036bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c0:	4698      	mov	r8, r3
 80036c2:	898b      	ldrh	r3, [r1, #12]
 80036c4:	061b      	lsls	r3, r3, #24
 80036c6:	b09d      	sub	sp, #116	; 0x74
 80036c8:	4607      	mov	r7, r0
 80036ca:	460d      	mov	r5, r1
 80036cc:	4614      	mov	r4, r2
 80036ce:	d50e      	bpl.n	80036ee <_svfiprintf_r+0x32>
 80036d0:	690b      	ldr	r3, [r1, #16]
 80036d2:	b963      	cbnz	r3, 80036ee <_svfiprintf_r+0x32>
 80036d4:	2140      	movs	r1, #64	; 0x40
 80036d6:	f000 fb19 	bl	8003d0c <_malloc_r>
 80036da:	6028      	str	r0, [r5, #0]
 80036dc:	6128      	str	r0, [r5, #16]
 80036de:	b920      	cbnz	r0, 80036ea <_svfiprintf_r+0x2e>
 80036e0:	230c      	movs	r3, #12
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036e8:	e0d1      	b.n	800388e <_svfiprintf_r+0x1d2>
 80036ea:	2340      	movs	r3, #64	; 0x40
 80036ec:	616b      	str	r3, [r5, #20]
 80036ee:	2300      	movs	r3, #0
 80036f0:	9309      	str	r3, [sp, #36]	; 0x24
 80036f2:	2320      	movs	r3, #32
 80036f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036fc:	2330      	movs	r3, #48	; 0x30
 80036fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038a8 <_svfiprintf_r+0x1ec>
 8003702:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003706:	f04f 0901 	mov.w	r9, #1
 800370a:	4623      	mov	r3, r4
 800370c:	469a      	mov	sl, r3
 800370e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003712:	b10a      	cbz	r2, 8003718 <_svfiprintf_r+0x5c>
 8003714:	2a25      	cmp	r2, #37	; 0x25
 8003716:	d1f9      	bne.n	800370c <_svfiprintf_r+0x50>
 8003718:	ebba 0b04 	subs.w	fp, sl, r4
 800371c:	d00b      	beq.n	8003736 <_svfiprintf_r+0x7a>
 800371e:	465b      	mov	r3, fp
 8003720:	4622      	mov	r2, r4
 8003722:	4629      	mov	r1, r5
 8003724:	4638      	mov	r0, r7
 8003726:	f7ff ff6d 	bl	8003604 <__ssputs_r>
 800372a:	3001      	adds	r0, #1
 800372c:	f000 80aa 	beq.w	8003884 <_svfiprintf_r+0x1c8>
 8003730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003732:	445a      	add	r2, fp
 8003734:	9209      	str	r2, [sp, #36]	; 0x24
 8003736:	f89a 3000 	ldrb.w	r3, [sl]
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80a2 	beq.w	8003884 <_svfiprintf_r+0x1c8>
 8003740:	2300      	movs	r3, #0
 8003742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800374a:	f10a 0a01 	add.w	sl, sl, #1
 800374e:	9304      	str	r3, [sp, #16]
 8003750:	9307      	str	r3, [sp, #28]
 8003752:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003756:	931a      	str	r3, [sp, #104]	; 0x68
 8003758:	4654      	mov	r4, sl
 800375a:	2205      	movs	r2, #5
 800375c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003760:	4851      	ldr	r0, [pc, #324]	; (80038a8 <_svfiprintf_r+0x1ec>)
 8003762:	f7fc fd55 	bl	8000210 <memchr>
 8003766:	9a04      	ldr	r2, [sp, #16]
 8003768:	b9d8      	cbnz	r0, 80037a2 <_svfiprintf_r+0xe6>
 800376a:	06d0      	lsls	r0, r2, #27
 800376c:	bf44      	itt	mi
 800376e:	2320      	movmi	r3, #32
 8003770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003774:	0711      	lsls	r1, r2, #28
 8003776:	bf44      	itt	mi
 8003778:	232b      	movmi	r3, #43	; 0x2b
 800377a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800377e:	f89a 3000 	ldrb.w	r3, [sl]
 8003782:	2b2a      	cmp	r3, #42	; 0x2a
 8003784:	d015      	beq.n	80037b2 <_svfiprintf_r+0xf6>
 8003786:	9a07      	ldr	r2, [sp, #28]
 8003788:	4654      	mov	r4, sl
 800378a:	2000      	movs	r0, #0
 800378c:	f04f 0c0a 	mov.w	ip, #10
 8003790:	4621      	mov	r1, r4
 8003792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003796:	3b30      	subs	r3, #48	; 0x30
 8003798:	2b09      	cmp	r3, #9
 800379a:	d94e      	bls.n	800383a <_svfiprintf_r+0x17e>
 800379c:	b1b0      	cbz	r0, 80037cc <_svfiprintf_r+0x110>
 800379e:	9207      	str	r2, [sp, #28]
 80037a0:	e014      	b.n	80037cc <_svfiprintf_r+0x110>
 80037a2:	eba0 0308 	sub.w	r3, r0, r8
 80037a6:	fa09 f303 	lsl.w	r3, r9, r3
 80037aa:	4313      	orrs	r3, r2
 80037ac:	9304      	str	r3, [sp, #16]
 80037ae:	46a2      	mov	sl, r4
 80037b0:	e7d2      	b.n	8003758 <_svfiprintf_r+0x9c>
 80037b2:	9b03      	ldr	r3, [sp, #12]
 80037b4:	1d19      	adds	r1, r3, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	9103      	str	r1, [sp, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bfbb      	ittet	lt
 80037be:	425b      	neglt	r3, r3
 80037c0:	f042 0202 	orrlt.w	r2, r2, #2
 80037c4:	9307      	strge	r3, [sp, #28]
 80037c6:	9307      	strlt	r3, [sp, #28]
 80037c8:	bfb8      	it	lt
 80037ca:	9204      	strlt	r2, [sp, #16]
 80037cc:	7823      	ldrb	r3, [r4, #0]
 80037ce:	2b2e      	cmp	r3, #46	; 0x2e
 80037d0:	d10c      	bne.n	80037ec <_svfiprintf_r+0x130>
 80037d2:	7863      	ldrb	r3, [r4, #1]
 80037d4:	2b2a      	cmp	r3, #42	; 0x2a
 80037d6:	d135      	bne.n	8003844 <_svfiprintf_r+0x188>
 80037d8:	9b03      	ldr	r3, [sp, #12]
 80037da:	1d1a      	adds	r2, r3, #4
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	9203      	str	r2, [sp, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bfb8      	it	lt
 80037e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80037e8:	3402      	adds	r4, #2
 80037ea:	9305      	str	r3, [sp, #20]
 80037ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038b8 <_svfiprintf_r+0x1fc>
 80037f0:	7821      	ldrb	r1, [r4, #0]
 80037f2:	2203      	movs	r2, #3
 80037f4:	4650      	mov	r0, sl
 80037f6:	f7fc fd0b 	bl	8000210 <memchr>
 80037fa:	b140      	cbz	r0, 800380e <_svfiprintf_r+0x152>
 80037fc:	2340      	movs	r3, #64	; 0x40
 80037fe:	eba0 000a 	sub.w	r0, r0, sl
 8003802:	fa03 f000 	lsl.w	r0, r3, r0
 8003806:	9b04      	ldr	r3, [sp, #16]
 8003808:	4303      	orrs	r3, r0
 800380a:	3401      	adds	r4, #1
 800380c:	9304      	str	r3, [sp, #16]
 800380e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003812:	4826      	ldr	r0, [pc, #152]	; (80038ac <_svfiprintf_r+0x1f0>)
 8003814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003818:	2206      	movs	r2, #6
 800381a:	f7fc fcf9 	bl	8000210 <memchr>
 800381e:	2800      	cmp	r0, #0
 8003820:	d038      	beq.n	8003894 <_svfiprintf_r+0x1d8>
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <_svfiprintf_r+0x1f4>)
 8003824:	bb1b      	cbnz	r3, 800386e <_svfiprintf_r+0x1b2>
 8003826:	9b03      	ldr	r3, [sp, #12]
 8003828:	3307      	adds	r3, #7
 800382a:	f023 0307 	bic.w	r3, r3, #7
 800382e:	3308      	adds	r3, #8
 8003830:	9303      	str	r3, [sp, #12]
 8003832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003834:	4433      	add	r3, r6
 8003836:	9309      	str	r3, [sp, #36]	; 0x24
 8003838:	e767      	b.n	800370a <_svfiprintf_r+0x4e>
 800383a:	fb0c 3202 	mla	r2, ip, r2, r3
 800383e:	460c      	mov	r4, r1
 8003840:	2001      	movs	r0, #1
 8003842:	e7a5      	b.n	8003790 <_svfiprintf_r+0xd4>
 8003844:	2300      	movs	r3, #0
 8003846:	3401      	adds	r4, #1
 8003848:	9305      	str	r3, [sp, #20]
 800384a:	4619      	mov	r1, r3
 800384c:	f04f 0c0a 	mov.w	ip, #10
 8003850:	4620      	mov	r0, r4
 8003852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003856:	3a30      	subs	r2, #48	; 0x30
 8003858:	2a09      	cmp	r2, #9
 800385a:	d903      	bls.n	8003864 <_svfiprintf_r+0x1a8>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0c5      	beq.n	80037ec <_svfiprintf_r+0x130>
 8003860:	9105      	str	r1, [sp, #20]
 8003862:	e7c3      	b.n	80037ec <_svfiprintf_r+0x130>
 8003864:	fb0c 2101 	mla	r1, ip, r1, r2
 8003868:	4604      	mov	r4, r0
 800386a:	2301      	movs	r3, #1
 800386c:	e7f0      	b.n	8003850 <_svfiprintf_r+0x194>
 800386e:	ab03      	add	r3, sp, #12
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	462a      	mov	r2, r5
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <_svfiprintf_r+0x1f8>)
 8003876:	a904      	add	r1, sp, #16
 8003878:	4638      	mov	r0, r7
 800387a:	f3af 8000 	nop.w
 800387e:	1c42      	adds	r2, r0, #1
 8003880:	4606      	mov	r6, r0
 8003882:	d1d6      	bne.n	8003832 <_svfiprintf_r+0x176>
 8003884:	89ab      	ldrh	r3, [r5, #12]
 8003886:	065b      	lsls	r3, r3, #25
 8003888:	f53f af2c 	bmi.w	80036e4 <_svfiprintf_r+0x28>
 800388c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800388e:	b01d      	add	sp, #116	; 0x74
 8003890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003894:	ab03      	add	r3, sp, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	462a      	mov	r2, r5
 800389a:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <_svfiprintf_r+0x1f8>)
 800389c:	a904      	add	r1, sp, #16
 800389e:	4638      	mov	r0, r7
 80038a0:	f000 f87a 	bl	8003998 <_printf_i>
 80038a4:	e7eb      	b.n	800387e <_svfiprintf_r+0x1c2>
 80038a6:	bf00      	nop
 80038a8:	08003ee8 	.word	0x08003ee8
 80038ac:	08003ef2 	.word	0x08003ef2
 80038b0:	00000000 	.word	0x00000000
 80038b4:	08003605 	.word	0x08003605
 80038b8:	08003eee 	.word	0x08003eee

080038bc <_printf_common>:
 80038bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038c0:	4616      	mov	r6, r2
 80038c2:	4699      	mov	r9, r3
 80038c4:	688a      	ldr	r2, [r1, #8]
 80038c6:	690b      	ldr	r3, [r1, #16]
 80038c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038cc:	4293      	cmp	r3, r2
 80038ce:	bfb8      	it	lt
 80038d0:	4613      	movlt	r3, r2
 80038d2:	6033      	str	r3, [r6, #0]
 80038d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038d8:	4607      	mov	r7, r0
 80038da:	460c      	mov	r4, r1
 80038dc:	b10a      	cbz	r2, 80038e2 <_printf_common+0x26>
 80038de:	3301      	adds	r3, #1
 80038e0:	6033      	str	r3, [r6, #0]
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	0699      	lsls	r1, r3, #26
 80038e6:	bf42      	ittt	mi
 80038e8:	6833      	ldrmi	r3, [r6, #0]
 80038ea:	3302      	addmi	r3, #2
 80038ec:	6033      	strmi	r3, [r6, #0]
 80038ee:	6825      	ldr	r5, [r4, #0]
 80038f0:	f015 0506 	ands.w	r5, r5, #6
 80038f4:	d106      	bne.n	8003904 <_printf_common+0x48>
 80038f6:	f104 0a19 	add.w	sl, r4, #25
 80038fa:	68e3      	ldr	r3, [r4, #12]
 80038fc:	6832      	ldr	r2, [r6, #0]
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	42ab      	cmp	r3, r5
 8003902:	dc26      	bgt.n	8003952 <_printf_common+0x96>
 8003904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003908:	1e13      	subs	r3, r2, #0
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	bf18      	it	ne
 800390e:	2301      	movne	r3, #1
 8003910:	0692      	lsls	r2, r2, #26
 8003912:	d42b      	bmi.n	800396c <_printf_common+0xb0>
 8003914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003918:	4649      	mov	r1, r9
 800391a:	4638      	mov	r0, r7
 800391c:	47c0      	blx	r8
 800391e:	3001      	adds	r0, #1
 8003920:	d01e      	beq.n	8003960 <_printf_common+0xa4>
 8003922:	6823      	ldr	r3, [r4, #0]
 8003924:	68e5      	ldr	r5, [r4, #12]
 8003926:	6832      	ldr	r2, [r6, #0]
 8003928:	f003 0306 	and.w	r3, r3, #6
 800392c:	2b04      	cmp	r3, #4
 800392e:	bf08      	it	eq
 8003930:	1aad      	subeq	r5, r5, r2
 8003932:	68a3      	ldr	r3, [r4, #8]
 8003934:	6922      	ldr	r2, [r4, #16]
 8003936:	bf0c      	ite	eq
 8003938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800393c:	2500      	movne	r5, #0
 800393e:	4293      	cmp	r3, r2
 8003940:	bfc4      	itt	gt
 8003942:	1a9b      	subgt	r3, r3, r2
 8003944:	18ed      	addgt	r5, r5, r3
 8003946:	2600      	movs	r6, #0
 8003948:	341a      	adds	r4, #26
 800394a:	42b5      	cmp	r5, r6
 800394c:	d11a      	bne.n	8003984 <_printf_common+0xc8>
 800394e:	2000      	movs	r0, #0
 8003950:	e008      	b.n	8003964 <_printf_common+0xa8>
 8003952:	2301      	movs	r3, #1
 8003954:	4652      	mov	r2, sl
 8003956:	4649      	mov	r1, r9
 8003958:	4638      	mov	r0, r7
 800395a:	47c0      	blx	r8
 800395c:	3001      	adds	r0, #1
 800395e:	d103      	bne.n	8003968 <_printf_common+0xac>
 8003960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003968:	3501      	adds	r5, #1
 800396a:	e7c6      	b.n	80038fa <_printf_common+0x3e>
 800396c:	18e1      	adds	r1, r4, r3
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	2030      	movs	r0, #48	; 0x30
 8003972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003976:	4422      	add	r2, r4
 8003978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800397c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003980:	3302      	adds	r3, #2
 8003982:	e7c7      	b.n	8003914 <_printf_common+0x58>
 8003984:	2301      	movs	r3, #1
 8003986:	4622      	mov	r2, r4
 8003988:	4649      	mov	r1, r9
 800398a:	4638      	mov	r0, r7
 800398c:	47c0      	blx	r8
 800398e:	3001      	adds	r0, #1
 8003990:	d0e6      	beq.n	8003960 <_printf_common+0xa4>
 8003992:	3601      	adds	r6, #1
 8003994:	e7d9      	b.n	800394a <_printf_common+0x8e>
	...

08003998 <_printf_i>:
 8003998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800399c:	7e0f      	ldrb	r7, [r1, #24]
 800399e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039a0:	2f78      	cmp	r7, #120	; 0x78
 80039a2:	4691      	mov	r9, r2
 80039a4:	4680      	mov	r8, r0
 80039a6:	460c      	mov	r4, r1
 80039a8:	469a      	mov	sl, r3
 80039aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039ae:	d807      	bhi.n	80039c0 <_printf_i+0x28>
 80039b0:	2f62      	cmp	r7, #98	; 0x62
 80039b2:	d80a      	bhi.n	80039ca <_printf_i+0x32>
 80039b4:	2f00      	cmp	r7, #0
 80039b6:	f000 80d8 	beq.w	8003b6a <_printf_i+0x1d2>
 80039ba:	2f58      	cmp	r7, #88	; 0x58
 80039bc:	f000 80a3 	beq.w	8003b06 <_printf_i+0x16e>
 80039c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039c8:	e03a      	b.n	8003a40 <_printf_i+0xa8>
 80039ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ce:	2b15      	cmp	r3, #21
 80039d0:	d8f6      	bhi.n	80039c0 <_printf_i+0x28>
 80039d2:	a101      	add	r1, pc, #4	; (adr r1, 80039d8 <_printf_i+0x40>)
 80039d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039d8:	08003a31 	.word	0x08003a31
 80039dc:	08003a45 	.word	0x08003a45
 80039e0:	080039c1 	.word	0x080039c1
 80039e4:	080039c1 	.word	0x080039c1
 80039e8:	080039c1 	.word	0x080039c1
 80039ec:	080039c1 	.word	0x080039c1
 80039f0:	08003a45 	.word	0x08003a45
 80039f4:	080039c1 	.word	0x080039c1
 80039f8:	080039c1 	.word	0x080039c1
 80039fc:	080039c1 	.word	0x080039c1
 8003a00:	080039c1 	.word	0x080039c1
 8003a04:	08003b51 	.word	0x08003b51
 8003a08:	08003a75 	.word	0x08003a75
 8003a0c:	08003b33 	.word	0x08003b33
 8003a10:	080039c1 	.word	0x080039c1
 8003a14:	080039c1 	.word	0x080039c1
 8003a18:	08003b73 	.word	0x08003b73
 8003a1c:	080039c1 	.word	0x080039c1
 8003a20:	08003a75 	.word	0x08003a75
 8003a24:	080039c1 	.word	0x080039c1
 8003a28:	080039c1 	.word	0x080039c1
 8003a2c:	08003b3b 	.word	0x08003b3b
 8003a30:	682b      	ldr	r3, [r5, #0]
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	602a      	str	r2, [r5, #0]
 8003a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0a3      	b.n	8003b8c <_printf_i+0x1f4>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	6829      	ldr	r1, [r5, #0]
 8003a48:	0606      	lsls	r6, r0, #24
 8003a4a:	f101 0304 	add.w	r3, r1, #4
 8003a4e:	d50a      	bpl.n	8003a66 <_printf_i+0xce>
 8003a50:	680e      	ldr	r6, [r1, #0]
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	2e00      	cmp	r6, #0
 8003a56:	da03      	bge.n	8003a60 <_printf_i+0xc8>
 8003a58:	232d      	movs	r3, #45	; 0x2d
 8003a5a:	4276      	negs	r6, r6
 8003a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a60:	485e      	ldr	r0, [pc, #376]	; (8003bdc <_printf_i+0x244>)
 8003a62:	230a      	movs	r3, #10
 8003a64:	e019      	b.n	8003a9a <_printf_i+0x102>
 8003a66:	680e      	ldr	r6, [r1, #0]
 8003a68:	602b      	str	r3, [r5, #0]
 8003a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a6e:	bf18      	it	ne
 8003a70:	b236      	sxthne	r6, r6
 8003a72:	e7ef      	b.n	8003a54 <_printf_i+0xbc>
 8003a74:	682b      	ldr	r3, [r5, #0]
 8003a76:	6820      	ldr	r0, [r4, #0]
 8003a78:	1d19      	adds	r1, r3, #4
 8003a7a:	6029      	str	r1, [r5, #0]
 8003a7c:	0601      	lsls	r1, r0, #24
 8003a7e:	d501      	bpl.n	8003a84 <_printf_i+0xec>
 8003a80:	681e      	ldr	r6, [r3, #0]
 8003a82:	e002      	b.n	8003a8a <_printf_i+0xf2>
 8003a84:	0646      	lsls	r6, r0, #25
 8003a86:	d5fb      	bpl.n	8003a80 <_printf_i+0xe8>
 8003a88:	881e      	ldrh	r6, [r3, #0]
 8003a8a:	4854      	ldr	r0, [pc, #336]	; (8003bdc <_printf_i+0x244>)
 8003a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a8e:	bf0c      	ite	eq
 8003a90:	2308      	moveq	r3, #8
 8003a92:	230a      	movne	r3, #10
 8003a94:	2100      	movs	r1, #0
 8003a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a9a:	6865      	ldr	r5, [r4, #4]
 8003a9c:	60a5      	str	r5, [r4, #8]
 8003a9e:	2d00      	cmp	r5, #0
 8003aa0:	bfa2      	ittt	ge
 8003aa2:	6821      	ldrge	r1, [r4, #0]
 8003aa4:	f021 0104 	bicge.w	r1, r1, #4
 8003aa8:	6021      	strge	r1, [r4, #0]
 8003aaa:	b90e      	cbnz	r6, 8003ab0 <_printf_i+0x118>
 8003aac:	2d00      	cmp	r5, #0
 8003aae:	d04d      	beq.n	8003b4c <_printf_i+0x1b4>
 8003ab0:	4615      	mov	r5, r2
 8003ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8003aba:	5dc7      	ldrb	r7, [r0, r7]
 8003abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ac0:	4637      	mov	r7, r6
 8003ac2:	42bb      	cmp	r3, r7
 8003ac4:	460e      	mov	r6, r1
 8003ac6:	d9f4      	bls.n	8003ab2 <_printf_i+0x11a>
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d10b      	bne.n	8003ae4 <_printf_i+0x14c>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	07de      	lsls	r6, r3, #31
 8003ad0:	d508      	bpl.n	8003ae4 <_printf_i+0x14c>
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	6861      	ldr	r1, [r4, #4]
 8003ad6:	4299      	cmp	r1, r3
 8003ad8:	bfde      	ittt	le
 8003ada:	2330      	movle	r3, #48	; 0x30
 8003adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ae0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ae4:	1b52      	subs	r2, r2, r5
 8003ae6:	6122      	str	r2, [r4, #16]
 8003ae8:	f8cd a000 	str.w	sl, [sp]
 8003aec:	464b      	mov	r3, r9
 8003aee:	aa03      	add	r2, sp, #12
 8003af0:	4621      	mov	r1, r4
 8003af2:	4640      	mov	r0, r8
 8003af4:	f7ff fee2 	bl	80038bc <_printf_common>
 8003af8:	3001      	adds	r0, #1
 8003afa:	d14c      	bne.n	8003b96 <_printf_i+0x1fe>
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b00:	b004      	add	sp, #16
 8003b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b06:	4835      	ldr	r0, [pc, #212]	; (8003bdc <_printf_i+0x244>)
 8003b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b0c:	6829      	ldr	r1, [r5, #0]
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b14:	6029      	str	r1, [r5, #0]
 8003b16:	061d      	lsls	r5, r3, #24
 8003b18:	d514      	bpl.n	8003b44 <_printf_i+0x1ac>
 8003b1a:	07df      	lsls	r7, r3, #31
 8003b1c:	bf44      	itt	mi
 8003b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b22:	6023      	strmi	r3, [r4, #0]
 8003b24:	b91e      	cbnz	r6, 8003b2e <_printf_i+0x196>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	f023 0320 	bic.w	r3, r3, #32
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	2310      	movs	r3, #16
 8003b30:	e7b0      	b.n	8003a94 <_printf_i+0xfc>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	f043 0320 	orr.w	r3, r3, #32
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	2378      	movs	r3, #120	; 0x78
 8003b3c:	4828      	ldr	r0, [pc, #160]	; (8003be0 <_printf_i+0x248>)
 8003b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b42:	e7e3      	b.n	8003b0c <_printf_i+0x174>
 8003b44:	0659      	lsls	r1, r3, #25
 8003b46:	bf48      	it	mi
 8003b48:	b2b6      	uxthmi	r6, r6
 8003b4a:	e7e6      	b.n	8003b1a <_printf_i+0x182>
 8003b4c:	4615      	mov	r5, r2
 8003b4e:	e7bb      	b.n	8003ac8 <_printf_i+0x130>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	6826      	ldr	r6, [r4, #0]
 8003b54:	6961      	ldr	r1, [r4, #20]
 8003b56:	1d18      	adds	r0, r3, #4
 8003b58:	6028      	str	r0, [r5, #0]
 8003b5a:	0635      	lsls	r5, r6, #24
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	d501      	bpl.n	8003b64 <_printf_i+0x1cc>
 8003b60:	6019      	str	r1, [r3, #0]
 8003b62:	e002      	b.n	8003b6a <_printf_i+0x1d2>
 8003b64:	0670      	lsls	r0, r6, #25
 8003b66:	d5fb      	bpl.n	8003b60 <_printf_i+0x1c8>
 8003b68:	8019      	strh	r1, [r3, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6123      	str	r3, [r4, #16]
 8003b6e:	4615      	mov	r5, r2
 8003b70:	e7ba      	b.n	8003ae8 <_printf_i+0x150>
 8003b72:	682b      	ldr	r3, [r5, #0]
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	602a      	str	r2, [r5, #0]
 8003b78:	681d      	ldr	r5, [r3, #0]
 8003b7a:	6862      	ldr	r2, [r4, #4]
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4628      	mov	r0, r5
 8003b80:	f7fc fb46 	bl	8000210 <memchr>
 8003b84:	b108      	cbz	r0, 8003b8a <_printf_i+0x1f2>
 8003b86:	1b40      	subs	r0, r0, r5
 8003b88:	6060      	str	r0, [r4, #4]
 8003b8a:	6863      	ldr	r3, [r4, #4]
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b94:	e7a8      	b.n	8003ae8 <_printf_i+0x150>
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	462a      	mov	r2, r5
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	4640      	mov	r0, r8
 8003b9e:	47d0      	blx	sl
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d0ab      	beq.n	8003afc <_printf_i+0x164>
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	079b      	lsls	r3, r3, #30
 8003ba8:	d413      	bmi.n	8003bd2 <_printf_i+0x23a>
 8003baa:	68e0      	ldr	r0, [r4, #12]
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	4298      	cmp	r0, r3
 8003bb0:	bfb8      	it	lt
 8003bb2:	4618      	movlt	r0, r3
 8003bb4:	e7a4      	b.n	8003b00 <_printf_i+0x168>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4632      	mov	r2, r6
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	47d0      	blx	sl
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d09b      	beq.n	8003afc <_printf_i+0x164>
 8003bc4:	3501      	adds	r5, #1
 8003bc6:	68e3      	ldr	r3, [r4, #12]
 8003bc8:	9903      	ldr	r1, [sp, #12]
 8003bca:	1a5b      	subs	r3, r3, r1
 8003bcc:	42ab      	cmp	r3, r5
 8003bce:	dcf2      	bgt.n	8003bb6 <_printf_i+0x21e>
 8003bd0:	e7eb      	b.n	8003baa <_printf_i+0x212>
 8003bd2:	2500      	movs	r5, #0
 8003bd4:	f104 0619 	add.w	r6, r4, #25
 8003bd8:	e7f5      	b.n	8003bc6 <_printf_i+0x22e>
 8003bda:	bf00      	nop
 8003bdc:	08003ef9 	.word	0x08003ef9
 8003be0:	08003f0a 	.word	0x08003f0a

08003be4 <memcpy>:
 8003be4:	440a      	add	r2, r1
 8003be6:	4291      	cmp	r1, r2
 8003be8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003bec:	d100      	bne.n	8003bf0 <memcpy+0xc>
 8003bee:	4770      	bx	lr
 8003bf0:	b510      	push	{r4, lr}
 8003bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bfa:	4291      	cmp	r1, r2
 8003bfc:	d1f9      	bne.n	8003bf2 <memcpy+0xe>
 8003bfe:	bd10      	pop	{r4, pc}

08003c00 <memmove>:
 8003c00:	4288      	cmp	r0, r1
 8003c02:	b510      	push	{r4, lr}
 8003c04:	eb01 0402 	add.w	r4, r1, r2
 8003c08:	d902      	bls.n	8003c10 <memmove+0x10>
 8003c0a:	4284      	cmp	r4, r0
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	d807      	bhi.n	8003c20 <memmove+0x20>
 8003c10:	1e43      	subs	r3, r0, #1
 8003c12:	42a1      	cmp	r1, r4
 8003c14:	d008      	beq.n	8003c28 <memmove+0x28>
 8003c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c1e:	e7f8      	b.n	8003c12 <memmove+0x12>
 8003c20:	4402      	add	r2, r0
 8003c22:	4601      	mov	r1, r0
 8003c24:	428a      	cmp	r2, r1
 8003c26:	d100      	bne.n	8003c2a <memmove+0x2a>
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c32:	e7f7      	b.n	8003c24 <memmove+0x24>

08003c34 <_free_r>:
 8003c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c36:	2900      	cmp	r1, #0
 8003c38:	d044      	beq.n	8003cc4 <_free_r+0x90>
 8003c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c3e:	9001      	str	r0, [sp, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f1a1 0404 	sub.w	r4, r1, #4
 8003c46:	bfb8      	it	lt
 8003c48:	18e4      	addlt	r4, r4, r3
 8003c4a:	f000 f913 	bl	8003e74 <__malloc_lock>
 8003c4e:	4a1e      	ldr	r2, [pc, #120]	; (8003cc8 <_free_r+0x94>)
 8003c50:	9801      	ldr	r0, [sp, #4]
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	b933      	cbnz	r3, 8003c64 <_free_r+0x30>
 8003c56:	6063      	str	r3, [r4, #4]
 8003c58:	6014      	str	r4, [r2, #0]
 8003c5a:	b003      	add	sp, #12
 8003c5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c60:	f000 b90e 	b.w	8003e80 <__malloc_unlock>
 8003c64:	42a3      	cmp	r3, r4
 8003c66:	d908      	bls.n	8003c7a <_free_r+0x46>
 8003c68:	6825      	ldr	r5, [r4, #0]
 8003c6a:	1961      	adds	r1, r4, r5
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	bf01      	itttt	eq
 8003c70:	6819      	ldreq	r1, [r3, #0]
 8003c72:	685b      	ldreq	r3, [r3, #4]
 8003c74:	1949      	addeq	r1, r1, r5
 8003c76:	6021      	streq	r1, [r4, #0]
 8003c78:	e7ed      	b.n	8003c56 <_free_r+0x22>
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	b10b      	cbz	r3, 8003c84 <_free_r+0x50>
 8003c80:	42a3      	cmp	r3, r4
 8003c82:	d9fa      	bls.n	8003c7a <_free_r+0x46>
 8003c84:	6811      	ldr	r1, [r2, #0]
 8003c86:	1855      	adds	r5, r2, r1
 8003c88:	42a5      	cmp	r5, r4
 8003c8a:	d10b      	bne.n	8003ca4 <_free_r+0x70>
 8003c8c:	6824      	ldr	r4, [r4, #0]
 8003c8e:	4421      	add	r1, r4
 8003c90:	1854      	adds	r4, r2, r1
 8003c92:	42a3      	cmp	r3, r4
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	d1e0      	bne.n	8003c5a <_free_r+0x26>
 8003c98:	681c      	ldr	r4, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	6053      	str	r3, [r2, #4]
 8003c9e:	4421      	add	r1, r4
 8003ca0:	6011      	str	r1, [r2, #0]
 8003ca2:	e7da      	b.n	8003c5a <_free_r+0x26>
 8003ca4:	d902      	bls.n	8003cac <_free_r+0x78>
 8003ca6:	230c      	movs	r3, #12
 8003ca8:	6003      	str	r3, [r0, #0]
 8003caa:	e7d6      	b.n	8003c5a <_free_r+0x26>
 8003cac:	6825      	ldr	r5, [r4, #0]
 8003cae:	1961      	adds	r1, r4, r5
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	bf04      	itt	eq
 8003cb4:	6819      	ldreq	r1, [r3, #0]
 8003cb6:	685b      	ldreq	r3, [r3, #4]
 8003cb8:	6063      	str	r3, [r4, #4]
 8003cba:	bf04      	itt	eq
 8003cbc:	1949      	addeq	r1, r1, r5
 8003cbe:	6021      	streq	r1, [r4, #0]
 8003cc0:	6054      	str	r4, [r2, #4]
 8003cc2:	e7ca      	b.n	8003c5a <_free_r+0x26>
 8003cc4:	b003      	add	sp, #12
 8003cc6:	bd30      	pop	{r4, r5, pc}
 8003cc8:	20000870 	.word	0x20000870

08003ccc <sbrk_aligned>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4e0e      	ldr	r6, [pc, #56]	; (8003d08 <sbrk_aligned+0x3c>)
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	6831      	ldr	r1, [r6, #0]
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	b911      	cbnz	r1, 8003cde <sbrk_aligned+0x12>
 8003cd8:	f000 f8bc 	bl	8003e54 <_sbrk_r>
 8003cdc:	6030      	str	r0, [r6, #0]
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f000 f8b7 	bl	8003e54 <_sbrk_r>
 8003ce6:	1c43      	adds	r3, r0, #1
 8003ce8:	d00a      	beq.n	8003d00 <sbrk_aligned+0x34>
 8003cea:	1cc4      	adds	r4, r0, #3
 8003cec:	f024 0403 	bic.w	r4, r4, #3
 8003cf0:	42a0      	cmp	r0, r4
 8003cf2:	d007      	beq.n	8003d04 <sbrk_aligned+0x38>
 8003cf4:	1a21      	subs	r1, r4, r0
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	f000 f8ac 	bl	8003e54 <_sbrk_r>
 8003cfc:	3001      	adds	r0, #1
 8003cfe:	d101      	bne.n	8003d04 <sbrk_aligned+0x38>
 8003d00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003d04:	4620      	mov	r0, r4
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
 8003d08:	20000874 	.word	0x20000874

08003d0c <_malloc_r>:
 8003d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d10:	1ccd      	adds	r5, r1, #3
 8003d12:	f025 0503 	bic.w	r5, r5, #3
 8003d16:	3508      	adds	r5, #8
 8003d18:	2d0c      	cmp	r5, #12
 8003d1a:	bf38      	it	cc
 8003d1c:	250c      	movcc	r5, #12
 8003d1e:	2d00      	cmp	r5, #0
 8003d20:	4607      	mov	r7, r0
 8003d22:	db01      	blt.n	8003d28 <_malloc_r+0x1c>
 8003d24:	42a9      	cmp	r1, r5
 8003d26:	d905      	bls.n	8003d34 <_malloc_r+0x28>
 8003d28:	230c      	movs	r3, #12
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	4630      	mov	r0, r6
 8003d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d34:	4e2e      	ldr	r6, [pc, #184]	; (8003df0 <_malloc_r+0xe4>)
 8003d36:	f000 f89d 	bl	8003e74 <__malloc_lock>
 8003d3a:	6833      	ldr	r3, [r6, #0]
 8003d3c:	461c      	mov	r4, r3
 8003d3e:	bb34      	cbnz	r4, 8003d8e <_malloc_r+0x82>
 8003d40:	4629      	mov	r1, r5
 8003d42:	4638      	mov	r0, r7
 8003d44:	f7ff ffc2 	bl	8003ccc <sbrk_aligned>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	d14d      	bne.n	8003dea <_malloc_r+0xde>
 8003d4e:	6834      	ldr	r4, [r6, #0]
 8003d50:	4626      	mov	r6, r4
 8003d52:	2e00      	cmp	r6, #0
 8003d54:	d140      	bne.n	8003dd8 <_malloc_r+0xcc>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	4631      	mov	r1, r6
 8003d5a:	4638      	mov	r0, r7
 8003d5c:	eb04 0803 	add.w	r8, r4, r3
 8003d60:	f000 f878 	bl	8003e54 <_sbrk_r>
 8003d64:	4580      	cmp	r8, r0
 8003d66:	d13a      	bne.n	8003dde <_malloc_r+0xd2>
 8003d68:	6821      	ldr	r1, [r4, #0]
 8003d6a:	3503      	adds	r5, #3
 8003d6c:	1a6d      	subs	r5, r5, r1
 8003d6e:	f025 0503 	bic.w	r5, r5, #3
 8003d72:	3508      	adds	r5, #8
 8003d74:	2d0c      	cmp	r5, #12
 8003d76:	bf38      	it	cc
 8003d78:	250c      	movcc	r5, #12
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	f7ff ffa5 	bl	8003ccc <sbrk_aligned>
 8003d82:	3001      	adds	r0, #1
 8003d84:	d02b      	beq.n	8003dde <_malloc_r+0xd2>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	442b      	add	r3, r5
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	e00e      	b.n	8003dac <_malloc_r+0xa0>
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	1b52      	subs	r2, r2, r5
 8003d92:	d41e      	bmi.n	8003dd2 <_malloc_r+0xc6>
 8003d94:	2a0b      	cmp	r2, #11
 8003d96:	d916      	bls.n	8003dc6 <_malloc_r+0xba>
 8003d98:	1961      	adds	r1, r4, r5
 8003d9a:	42a3      	cmp	r3, r4
 8003d9c:	6025      	str	r5, [r4, #0]
 8003d9e:	bf18      	it	ne
 8003da0:	6059      	strne	r1, [r3, #4]
 8003da2:	6863      	ldr	r3, [r4, #4]
 8003da4:	bf08      	it	eq
 8003da6:	6031      	streq	r1, [r6, #0]
 8003da8:	5162      	str	r2, [r4, r5]
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	4638      	mov	r0, r7
 8003dae:	f104 060b 	add.w	r6, r4, #11
 8003db2:	f000 f865 	bl	8003e80 <__malloc_unlock>
 8003db6:	f026 0607 	bic.w	r6, r6, #7
 8003dba:	1d23      	adds	r3, r4, #4
 8003dbc:	1af2      	subs	r2, r6, r3
 8003dbe:	d0b6      	beq.n	8003d2e <_malloc_r+0x22>
 8003dc0:	1b9b      	subs	r3, r3, r6
 8003dc2:	50a3      	str	r3, [r4, r2]
 8003dc4:	e7b3      	b.n	8003d2e <_malloc_r+0x22>
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	bf0c      	ite	eq
 8003dcc:	6032      	streq	r2, [r6, #0]
 8003dce:	605a      	strne	r2, [r3, #4]
 8003dd0:	e7ec      	b.n	8003dac <_malloc_r+0xa0>
 8003dd2:	4623      	mov	r3, r4
 8003dd4:	6864      	ldr	r4, [r4, #4]
 8003dd6:	e7b2      	b.n	8003d3e <_malloc_r+0x32>
 8003dd8:	4634      	mov	r4, r6
 8003dda:	6876      	ldr	r6, [r6, #4]
 8003ddc:	e7b9      	b.n	8003d52 <_malloc_r+0x46>
 8003dde:	230c      	movs	r3, #12
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4638      	mov	r0, r7
 8003de4:	f000 f84c 	bl	8003e80 <__malloc_unlock>
 8003de8:	e7a1      	b.n	8003d2e <_malloc_r+0x22>
 8003dea:	6025      	str	r5, [r4, #0]
 8003dec:	e7de      	b.n	8003dac <_malloc_r+0xa0>
 8003dee:	bf00      	nop
 8003df0:	20000870 	.word	0x20000870

08003df4 <_realloc_r>:
 8003df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003df8:	4680      	mov	r8, r0
 8003dfa:	4614      	mov	r4, r2
 8003dfc:	460e      	mov	r6, r1
 8003dfe:	b921      	cbnz	r1, 8003e0a <_realloc_r+0x16>
 8003e00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e04:	4611      	mov	r1, r2
 8003e06:	f7ff bf81 	b.w	8003d0c <_malloc_r>
 8003e0a:	b92a      	cbnz	r2, 8003e18 <_realloc_r+0x24>
 8003e0c:	f7ff ff12 	bl	8003c34 <_free_r>
 8003e10:	4625      	mov	r5, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e18:	f000 f838 	bl	8003e8c <_malloc_usable_size_r>
 8003e1c:	4284      	cmp	r4, r0
 8003e1e:	4607      	mov	r7, r0
 8003e20:	d802      	bhi.n	8003e28 <_realloc_r+0x34>
 8003e22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e26:	d812      	bhi.n	8003e4e <_realloc_r+0x5a>
 8003e28:	4621      	mov	r1, r4
 8003e2a:	4640      	mov	r0, r8
 8003e2c:	f7ff ff6e 	bl	8003d0c <_malloc_r>
 8003e30:	4605      	mov	r5, r0
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d0ed      	beq.n	8003e12 <_realloc_r+0x1e>
 8003e36:	42bc      	cmp	r4, r7
 8003e38:	4622      	mov	r2, r4
 8003e3a:	4631      	mov	r1, r6
 8003e3c:	bf28      	it	cs
 8003e3e:	463a      	movcs	r2, r7
 8003e40:	f7ff fed0 	bl	8003be4 <memcpy>
 8003e44:	4631      	mov	r1, r6
 8003e46:	4640      	mov	r0, r8
 8003e48:	f7ff fef4 	bl	8003c34 <_free_r>
 8003e4c:	e7e1      	b.n	8003e12 <_realloc_r+0x1e>
 8003e4e:	4635      	mov	r5, r6
 8003e50:	e7df      	b.n	8003e12 <_realloc_r+0x1e>
	...

08003e54 <_sbrk_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4d06      	ldr	r5, [pc, #24]	; (8003e70 <_sbrk_r+0x1c>)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	4604      	mov	r4, r0
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f7fd f83c 	bl	8000edc <_sbrk>
 8003e64:	1c43      	adds	r3, r0, #1
 8003e66:	d102      	bne.n	8003e6e <_sbrk_r+0x1a>
 8003e68:	682b      	ldr	r3, [r5, #0]
 8003e6a:	b103      	cbz	r3, 8003e6e <_sbrk_r+0x1a>
 8003e6c:	6023      	str	r3, [r4, #0]
 8003e6e:	bd38      	pop	{r3, r4, r5, pc}
 8003e70:	20000878 	.word	0x20000878

08003e74 <__malloc_lock>:
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <__malloc_lock+0x8>)
 8003e76:	f000 b811 	b.w	8003e9c <__retarget_lock_acquire_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	2000087c 	.word	0x2000087c

08003e80 <__malloc_unlock>:
 8003e80:	4801      	ldr	r0, [pc, #4]	; (8003e88 <__malloc_unlock+0x8>)
 8003e82:	f000 b80c 	b.w	8003e9e <__retarget_lock_release_recursive>
 8003e86:	bf00      	nop
 8003e88:	2000087c 	.word	0x2000087c

08003e8c <_malloc_usable_size_r>:
 8003e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e90:	1f18      	subs	r0, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfbc      	itt	lt
 8003e96:	580b      	ldrlt	r3, [r1, r0]
 8003e98:	18c0      	addlt	r0, r0, r3
 8003e9a:	4770      	bx	lr

08003e9c <__retarget_lock_acquire_recursive>:
 8003e9c:	4770      	bx	lr

08003e9e <__retarget_lock_release_recursive>:
 8003e9e:	4770      	bx	lr

08003ea0 <_init>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr

08003eac <_fini>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	bf00      	nop
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr
