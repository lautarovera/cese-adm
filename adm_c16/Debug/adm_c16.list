
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048cc  080048cc  000201ac  2**0
                  CONTENTS
  4 .ARM          00000008  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048d4  080048d4  000201ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ac  20000000  080048dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ac  2**0
                  CONTENTS
 10 .bss          000008f4  200001ac  200001ac  000201ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa0  20000aa0  000201ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d07b  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000faf4  00000000  00000000  0002d257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001e3b  00000000  00000000  0003cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bd8  00000000  00000000  0003eb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000db384  00000000  00000000  0003f760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b00  00000000  00000000  0011aae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024639  00000000  00000000  0011b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fc21  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003564  00000000  00000000  0013fc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ac 	.word	0x200001ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004674 	.word	0x08004674

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001b0 	.word	0x200001b0
 80001ec:	08004674 	.word	0x08004674

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@   r0: vector
@   r1: longitud
@
.thumb_func
    asm_zeros:
    	mov r2, 0
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <.asm_zeros_loop>:
    .asm_zeros_loop:
    	str r2, [r0], 4
 80001fc:	f840 2b04 	str.w	r2, [r0], #4
    	subs r1, 1
 8000200:	3901      	subs	r1, #1
    	bne .asm_zeros_loop
 8000202:	d1fb      	bne.n	80001fc <.asm_zeros_loop>
    	bx lr
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
@   r2: longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar32:
    	push {r4,r5}
 8000206:	b430      	push	{r4, r5}

08000208 <.asm_productoEscalar32_loop>:
    .asm_productoEscalar32_loop:
    	ldr r4, [r0], 4
 8000208:	f850 4b04 	ldr.w	r4, [r0], #4
    	mul r5, r4, r3
 800020c:	fb04 f503 	mul.w	r5, r4, r3
    	str r5, [r1], 4
 8000210:	f841 5b04 	str.w	r5, [r1], #4
    	subs r2, 1
 8000214:	3a01      	subs	r2, #1
    	bne .asm_productoEscalar32_loop
 8000216:	d1f7      	bne.n	8000208 <.asm_productoEscalar32_loop>
    	pop {r4,r5}
 8000218:	bc30      	pop	{r4, r5}
    	bx lr
 800021a:	4770      	bx	lr

0800021c <asm_productoEscalar16>:
@   r2: longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar16:
    	push {r4,r5}
 800021c:	b430      	push	{r4, r5}

0800021e <.asm_productoEscalar16_loop>:
    .asm_productoEscalar16_loop:
    	ldrh r4, [r0], 2
 800021e:	f830 4b02 	ldrh.w	r4, [r0], #2
    	ldrh r5, [r1]
 8000222:	880d      	ldrh	r5, [r1, #0]
    	mul r5, r4, r3
 8000224:	fb04 f503 	mul.w	r5, r4, r3
    	strh r5, [r1], 2
 8000228:	f821 5b02 	strh.w	r5, [r1], #2
    	subs r2, 1
 800022c:	3a01      	subs	r2, #1
    	bne .asm_productoEscalar16_loop
 800022e:	d1f6      	bne.n	800021e <.asm_productoEscalar16_loop>
    	pop {r4,r5}
 8000230:	bc30      	pop	{r4, r5}
    	bx lr
 8000232:	4770      	bx	lr

08000234 <asm_productoEscalar12>:
@   r2: longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar12:
    	push {r4-r6}
 8000234:	b470      	push	{r4, r5, r6}
    	mov r6, 0xFFF
 8000236:	f640 76ff 	movw	r6, #4095	; 0xfff

0800023a <.asm_productoEscalar12_loop>:
    .asm_productoEscalar12_loop:
    	ldrh r4, [r0], 2
 800023a:	f830 4b02 	ldrh.w	r4, [r0], #2
    	ldrh r5, [r1]
 800023e:	880d      	ldrh	r5, [r1, #0]
    	mul r5, r4, r3
 8000240:	fb04 f503 	mul.w	r5, r4, r3
    	and r5, r5, r6
 8000244:	ea05 0506 	and.w	r5, r5, r6
    	strh r5, [r1], 2
 8000248:	f821 5b02 	strh.w	r5, [r1], #2
    	subs r2, 1
 800024c:	3a01      	subs	r2, #1
    	bne .asm_productoEscalar12_loop
 800024e:	d1f4      	bne.n	800023a <.asm_productoEscalar12_loop>
    	pop {r4-r6}
 8000250:	bc70      	pop	{r4, r5, r6}
    	bx lr
 8000252:	4770      	bx	lr

08000254 <asm_productoEscalar12Sat>:
@   r2: longitud
@	r3: escalar
@
.thumb_func
    asm_productoEscalar12Sat:
    	push {r4-r6}
 8000254:	b470      	push	{r4, r5, r6}
    	mov r6, 0xFFF
 8000256:	f640 76ff 	movw	r6, #4095	; 0xfff

0800025a <.asm_productoEscalar12Sat_loop>:
    .asm_productoEscalar12Sat_loop:
    	ldrh r4, [r0], 2
 800025a:	f830 4b02 	ldrh.w	r4, [r0], #2
    	ldrh r5, [r1]
 800025e:	880d      	ldrh	r5, [r1, #0]
    	mul r5, r4, r3
 8000260:	fb04 f503 	mul.w	r5, r4, r3
    	usat r5, 12, r5
 8000264:	f385 050c 	usat	r5, #12, r5
    	strh r5, [r1], 2
 8000268:	f821 5b02 	strh.w	r5, [r1], #2
    	subs r2, 1
 800026c:	3a01      	subs	r2, #1
    	bne .asm_productoEscalar12Sat_loop
 800026e:	d1f4      	bne.n	800025a <.asm_productoEscalar12Sat_loop>
    	pop {r4-r6}
 8000270:	bc70      	pop	{r4, r5, r6}
    	bx lr
 8000272:	4770      	bx	lr

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_uldivmod>:
 8000330:	b953      	cbnz	r3, 8000348 <__aeabi_uldivmod+0x18>
 8000332:	b94a      	cbnz	r2, 8000348 <__aeabi_uldivmod+0x18>
 8000334:	2900      	cmp	r1, #0
 8000336:	bf08      	it	eq
 8000338:	2800      	cmpeq	r0, #0
 800033a:	bf1c      	itt	ne
 800033c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000340:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000344:	f000 b974 	b.w	8000630 <__aeabi_idiv0>
 8000348:	f1ad 0c08 	sub.w	ip, sp, #8
 800034c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000350:	f000 f806 	bl	8000360 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4770      	bx	lr

08000360 <__udivmoddi4>:
 8000360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000364:	9d08      	ldr	r5, [sp, #32]
 8000366:	4604      	mov	r4, r0
 8000368:	468e      	mov	lr, r1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d14d      	bne.n	800040a <__udivmoddi4+0xaa>
 800036e:	428a      	cmp	r2, r1
 8000370:	4694      	mov	ip, r2
 8000372:	d969      	bls.n	8000448 <__udivmoddi4+0xe8>
 8000374:	fab2 f282 	clz	r2, r2
 8000378:	b152      	cbz	r2, 8000390 <__udivmoddi4+0x30>
 800037a:	fa01 f302 	lsl.w	r3, r1, r2
 800037e:	f1c2 0120 	rsb	r1, r2, #32
 8000382:	fa20 f101 	lsr.w	r1, r0, r1
 8000386:	fa0c fc02 	lsl.w	ip, ip, r2
 800038a:	ea41 0e03 	orr.w	lr, r1, r3
 800038e:	4094      	lsls	r4, r2
 8000390:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000394:	0c21      	lsrs	r1, r4, #16
 8000396:	fbbe f6f8 	udiv	r6, lr, r8
 800039a:	fa1f f78c 	uxth.w	r7, ip
 800039e:	fb08 e316 	mls	r3, r8, r6, lr
 80003a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003a6:	fb06 f107 	mul.w	r1, r6, r7
 80003aa:	4299      	cmp	r1, r3
 80003ac:	d90a      	bls.n	80003c4 <__udivmoddi4+0x64>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003b6:	f080 811f 	bcs.w	80005f8 <__udivmoddi4+0x298>
 80003ba:	4299      	cmp	r1, r3
 80003bc:	f240 811c 	bls.w	80005f8 <__udivmoddi4+0x298>
 80003c0:	3e02      	subs	r6, #2
 80003c2:	4463      	add	r3, ip
 80003c4:	1a5b      	subs	r3, r3, r1
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003cc:	fb08 3310 	mls	r3, r8, r0, r3
 80003d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003d4:	fb00 f707 	mul.w	r7, r0, r7
 80003d8:	42a7      	cmp	r7, r4
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x92>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e4:	f080 810a 	bcs.w	80005fc <__udivmoddi4+0x29c>
 80003e8:	42a7      	cmp	r7, r4
 80003ea:	f240 8107 	bls.w	80005fc <__udivmoddi4+0x29c>
 80003ee:	4464      	add	r4, ip
 80003f0:	3802      	subs	r0, #2
 80003f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	2600      	movs	r6, #0
 80003fa:	b11d      	cbz	r5, 8000404 <__udivmoddi4+0xa4>
 80003fc:	40d4      	lsrs	r4, r2
 80003fe:	2300      	movs	r3, #0
 8000400:	e9c5 4300 	strd	r4, r3, [r5]
 8000404:	4631      	mov	r1, r6
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	428b      	cmp	r3, r1
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0xc2>
 800040e:	2d00      	cmp	r5, #0
 8000410:	f000 80ef 	beq.w	80005f2 <__udivmoddi4+0x292>
 8000414:	2600      	movs	r6, #0
 8000416:	e9c5 0100 	strd	r0, r1, [r5]
 800041a:	4630      	mov	r0, r6
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	fab3 f683 	clz	r6, r3
 8000426:	2e00      	cmp	r6, #0
 8000428:	d14a      	bne.n	80004c0 <__udivmoddi4+0x160>
 800042a:	428b      	cmp	r3, r1
 800042c:	d302      	bcc.n	8000434 <__udivmoddi4+0xd4>
 800042e:	4282      	cmp	r2, r0
 8000430:	f200 80f9 	bhi.w	8000626 <__udivmoddi4+0x2c6>
 8000434:	1a84      	subs	r4, r0, r2
 8000436:	eb61 0303 	sbc.w	r3, r1, r3
 800043a:	2001      	movs	r0, #1
 800043c:	469e      	mov	lr, r3
 800043e:	2d00      	cmp	r5, #0
 8000440:	d0e0      	beq.n	8000404 <__udivmoddi4+0xa4>
 8000442:	e9c5 4e00 	strd	r4, lr, [r5]
 8000446:	e7dd      	b.n	8000404 <__udivmoddi4+0xa4>
 8000448:	b902      	cbnz	r2, 800044c <__udivmoddi4+0xec>
 800044a:	deff      	udf	#255	; 0xff
 800044c:	fab2 f282 	clz	r2, r2
 8000450:	2a00      	cmp	r2, #0
 8000452:	f040 8092 	bne.w	800057a <__udivmoddi4+0x21a>
 8000456:	eba1 010c 	sub.w	r1, r1, ip
 800045a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045e:	fa1f fe8c 	uxth.w	lr, ip
 8000462:	2601      	movs	r6, #1
 8000464:	0c20      	lsrs	r0, r4, #16
 8000466:	fbb1 f3f7 	udiv	r3, r1, r7
 800046a:	fb07 1113 	mls	r1, r7, r3, r1
 800046e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000472:	fb0e f003 	mul.w	r0, lr, r3
 8000476:	4288      	cmp	r0, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x12c>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x12a>
 8000484:	4288      	cmp	r0, r1
 8000486:	f200 80cb 	bhi.w	8000620 <__udivmoddi4+0x2c0>
 800048a:	4643      	mov	r3, r8
 800048c:	1a09      	subs	r1, r1, r0
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb1 f0f7 	udiv	r0, r1, r7
 8000494:	fb07 1110 	mls	r1, r7, r0, r1
 8000498:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800049c:	fb0e fe00 	mul.w	lr, lr, r0
 80004a0:	45a6      	cmp	lr, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x156>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004ac:	d202      	bcs.n	80004b4 <__udivmoddi4+0x154>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f200 80bb 	bhi.w	800062a <__udivmoddi4+0x2ca>
 80004b4:	4608      	mov	r0, r1
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004be:	e79c      	b.n	80003fa <__udivmoddi4+0x9a>
 80004c0:	f1c6 0720 	rsb	r7, r6, #32
 80004c4:	40b3      	lsls	r3, r6
 80004c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ce:	fa20 f407 	lsr.w	r4, r0, r7
 80004d2:	fa01 f306 	lsl.w	r3, r1, r6
 80004d6:	431c      	orrs	r4, r3
 80004d8:	40f9      	lsrs	r1, r7
 80004da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004de:	fa00 f306 	lsl.w	r3, r0, r6
 80004e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004e6:	0c20      	lsrs	r0, r4, #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fb09 1118 	mls	r1, r9, r8, r1
 80004f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f4:	fb08 f00e 	mul.w	r0, r8, lr
 80004f8:	4288      	cmp	r0, r1
 80004fa:	fa02 f206 	lsl.w	r2, r2, r6
 80004fe:	d90b      	bls.n	8000518 <__udivmoddi4+0x1b8>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000508:	f080 8088 	bcs.w	800061c <__udivmoddi4+0x2bc>
 800050c:	4288      	cmp	r0, r1
 800050e:	f240 8085 	bls.w	800061c <__udivmoddi4+0x2bc>
 8000512:	f1a8 0802 	sub.w	r8, r8, #2
 8000516:	4461      	add	r1, ip
 8000518:	1a09      	subs	r1, r1, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000520:	fb09 1110 	mls	r1, r9, r0, r1
 8000524:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000528:	fb00 fe0e 	mul.w	lr, r0, lr
 800052c:	458e      	cmp	lr, r1
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x1e2>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000538:	d26c      	bcs.n	8000614 <__udivmoddi4+0x2b4>
 800053a:	458e      	cmp	lr, r1
 800053c:	d96a      	bls.n	8000614 <__udivmoddi4+0x2b4>
 800053e:	3802      	subs	r0, #2
 8000540:	4461      	add	r1, ip
 8000542:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000546:	fba0 9402 	umull	r9, r4, r0, r2
 800054a:	eba1 010e 	sub.w	r1, r1, lr
 800054e:	42a1      	cmp	r1, r4
 8000550:	46c8      	mov	r8, r9
 8000552:	46a6      	mov	lr, r4
 8000554:	d356      	bcc.n	8000604 <__udivmoddi4+0x2a4>
 8000556:	d053      	beq.n	8000600 <__udivmoddi4+0x2a0>
 8000558:	b15d      	cbz	r5, 8000572 <__udivmoddi4+0x212>
 800055a:	ebb3 0208 	subs.w	r2, r3, r8
 800055e:	eb61 010e 	sbc.w	r1, r1, lr
 8000562:	fa01 f707 	lsl.w	r7, r1, r7
 8000566:	fa22 f306 	lsr.w	r3, r2, r6
 800056a:	40f1      	lsrs	r1, r6
 800056c:	431f      	orrs	r7, r3
 800056e:	e9c5 7100 	strd	r7, r1, [r5]
 8000572:	2600      	movs	r6, #0
 8000574:	4631      	mov	r1, r6
 8000576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	40d8      	lsrs	r0, r3
 8000580:	fa0c fc02 	lsl.w	ip, ip, r2
 8000584:	fa21 f303 	lsr.w	r3, r1, r3
 8000588:	4091      	lsls	r1, r2
 800058a:	4301      	orrs	r1, r0
 800058c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000590:	fa1f fe8c 	uxth.w	lr, ip
 8000594:	fbb3 f0f7 	udiv	r0, r3, r7
 8000598:	fb07 3610 	mls	r6, r7, r0, r3
 800059c:	0c0b      	lsrs	r3, r1, #16
 800059e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005a2:	fb00 f60e 	mul.w	r6, r0, lr
 80005a6:	429e      	cmp	r6, r3
 80005a8:	fa04 f402 	lsl.w	r4, r4, r2
 80005ac:	d908      	bls.n	80005c0 <__udivmoddi4+0x260>
 80005ae:	eb1c 0303 	adds.w	r3, ip, r3
 80005b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005b6:	d22f      	bcs.n	8000618 <__udivmoddi4+0x2b8>
 80005b8:	429e      	cmp	r6, r3
 80005ba:	d92d      	bls.n	8000618 <__udivmoddi4+0x2b8>
 80005bc:	3802      	subs	r0, #2
 80005be:	4463      	add	r3, ip
 80005c0:	1b9b      	subs	r3, r3, r6
 80005c2:	b289      	uxth	r1, r1
 80005c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005c8:	fb07 3316 	mls	r3, r7, r6, r3
 80005cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005d0:	fb06 f30e 	mul.w	r3, r6, lr
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x28a>
 80005d8:	eb1c 0101 	adds.w	r1, ip, r1
 80005dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005e0:	d216      	bcs.n	8000610 <__udivmoddi4+0x2b0>
 80005e2:	428b      	cmp	r3, r1
 80005e4:	d914      	bls.n	8000610 <__udivmoddi4+0x2b0>
 80005e6:	3e02      	subs	r6, #2
 80005e8:	4461      	add	r1, ip
 80005ea:	1ac9      	subs	r1, r1, r3
 80005ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005f0:	e738      	b.n	8000464 <__udivmoddi4+0x104>
 80005f2:	462e      	mov	r6, r5
 80005f4:	4628      	mov	r0, r5
 80005f6:	e705      	b.n	8000404 <__udivmoddi4+0xa4>
 80005f8:	4606      	mov	r6, r0
 80005fa:	e6e3      	b.n	80003c4 <__udivmoddi4+0x64>
 80005fc:	4618      	mov	r0, r3
 80005fe:	e6f8      	b.n	80003f2 <__udivmoddi4+0x92>
 8000600:	454b      	cmp	r3, r9
 8000602:	d2a9      	bcs.n	8000558 <__udivmoddi4+0x1f8>
 8000604:	ebb9 0802 	subs.w	r8, r9, r2
 8000608:	eb64 0e0c 	sbc.w	lr, r4, ip
 800060c:	3801      	subs	r0, #1
 800060e:	e7a3      	b.n	8000558 <__udivmoddi4+0x1f8>
 8000610:	4646      	mov	r6, r8
 8000612:	e7ea      	b.n	80005ea <__udivmoddi4+0x28a>
 8000614:	4620      	mov	r0, r4
 8000616:	e794      	b.n	8000542 <__udivmoddi4+0x1e2>
 8000618:	4640      	mov	r0, r8
 800061a:	e7d1      	b.n	80005c0 <__udivmoddi4+0x260>
 800061c:	46d0      	mov	r8, sl
 800061e:	e77b      	b.n	8000518 <__udivmoddi4+0x1b8>
 8000620:	3b02      	subs	r3, #2
 8000622:	4461      	add	r1, ip
 8000624:	e732      	b.n	800048c <__udivmoddi4+0x12c>
 8000626:	4630      	mov	r0, r6
 8000628:	e709      	b.n	800043e <__udivmoddi4+0xde>
 800062a:	4464      	add	r4, ip
 800062c:	3802      	subs	r0, #2
 800062e:	e742      	b.n	80004b6 <__udivmoddi4+0x156>

08000630 <__aeabi_idiv0>:
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <asignarEscalar32>:


/* Functions definitions -----------------------------------------------------*/

void asignarEscalar32(uint32_t *vector, uint32_t longitud, uint32_t escalar)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	while (longitud--) {
 8000640:	e004      	b.n	800064c <asignarEscalar32+0x18>
		*vector++ = escalar;
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	1d1a      	adds	r2, r3, #4
 8000646:	60fa      	str	r2, [r7, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	601a      	str	r2, [r3, #0]
	while (longitud--) {
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	1e5a      	subs	r2, r3, #1
 8000650:	60ba      	str	r2, [r7, #8]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f5      	bne.n	8000642 <asignarEscalar32+0xe>
	}
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <zeros>:
		*vector++ = escalar;
	}
}

void zeros(uint32_t *vector, uint32_t longitud)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
	while (longitud--) {
 800066e:	e004      	b.n	800067a <zeros+0x16>
		*vector++ = 0u;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
	while (longitud--) {
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	603a      	str	r2, [r7, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d1f5      	bne.n	8000670 <zeros+0xc>
	}
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 8000692:	b480      	push	{r7}
 8000694:	b085      	sub	sp, #20
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	603b      	str	r3, [r7, #0]
	while (longitud--) {
 80006a0:	e00a      	b.n	80006b8 <productoEscalar32+0x26>
		*vectorOut++ = *vectorIn++ * escalar;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1d1a      	adds	r2, r3, #4
 80006a6:	60fa      	str	r2, [r7, #12]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1d19      	adds	r1, r3, #4
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	6839      	ldr	r1, [r7, #0]
 80006b2:	fb01 f202 	mul.w	r2, r1, r2
 80006b6:	601a      	str	r2, [r3, #0]
	while (longitud--) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1ef      	bne.n	80006a2 <productoEscalar32+0x10>
	}
}
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	4611      	mov	r1, r2
 80006dc:	461a      	mov	r2, r3
 80006de:	460b      	mov	r3, r1
 80006e0:	80fb      	strh	r3, [r7, #6]
 80006e2:	4613      	mov	r3, r2
 80006e4:	80bb      	strh	r3, [r7, #4]
	while (longitud--) {
 80006e6:	e00b      	b.n	8000700 <productoEscalar16+0x30>
		*vectorOut++ = *vectorIn++ * escalar;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	1c9a      	adds	r2, r3, #2
 80006ec:	60fa      	str	r2, [r7, #12]
 80006ee:	881a      	ldrh	r2, [r3, #0]
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	1c99      	adds	r1, r3, #2
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	88b9      	ldrh	r1, [r7, #4]
 80006f8:	fb11 f202 	smulbb	r2, r1, r2
 80006fc:	b292      	uxth	r2, r2
 80006fe:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 8000700:	88fb      	ldrh	r3, [r7, #6]
 8000702:	1e5a      	subs	r2, r3, #1
 8000704:	80fa      	strh	r2, [r7, #6]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1ee      	bne.n	80006e8 <productoEscalar16+0x18>
	}
}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	4611      	mov	r1, r2
 8000724:	461a      	mov	r2, r3
 8000726:	460b      	mov	r3, r1
 8000728:	80fb      	strh	r3, [r7, #6]
 800072a:	4613      	mov	r3, r2
 800072c:	80bb      	strh	r3, [r7, #4]
	while (longitud--) {
 800072e:	e00e      	b.n	800074e <productoEscalar12+0x36>
		*vectorOut++ = (*vectorIn++ * escalar) & 0xFFF;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	1c9a      	adds	r2, r3, #2
 8000734:	60fa      	str	r2, [r7, #12]
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	88ba      	ldrh	r2, [r7, #4]
 800073a:	fb12 f303 	smulbb	r3, r2, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	1c99      	adds	r1, r3, #2
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800074a:	b292      	uxth	r2, r2
 800074c:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	80fa      	strh	r2, [r7, #6]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1eb      	bne.n	8000730 <productoEscalar12+0x18>
	}
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <productoEscalar12Sat>:

void productoEscalar12Sat(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 8000766:	b480      	push	{r7}
 8000768:	b087      	sub	sp, #28
 800076a:	af00      	add	r7, sp, #0
 800076c:	60f8      	str	r0, [r7, #12]
 800076e:	60b9      	str	r1, [r7, #8]
 8000770:	4611      	mov	r1, r2
 8000772:	461a      	mov	r2, r3
 8000774:	460b      	mov	r3, r1
 8000776:	80fb      	strh	r3, [r7, #6]
 8000778:	4613      	mov	r3, r2
 800077a:	80bb      	strh	r3, [r7, #4]
	uint16_t producto = 0u;
 800077c:	2300      	movs	r3, #0
 800077e:	82fb      	strh	r3, [r7, #22]

	while (longitud--) {
 8000780:	e012      	b.n	80007a8 <productoEscalar12Sat+0x42>
		producto = *vectorIn++ * escalar;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	1c9a      	adds	r2, r3, #2
 8000786:	60fa      	str	r2, [r7, #12]
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	88ba      	ldrh	r2, [r7, #4]
 800078c:	fb12 f303 	smulbb	r3, r2, r3
 8000790:	82fb      	strh	r3, [r7, #22]
		*vectorOut++ = (producto > 0xFFF) ? 0xFFF : producto;
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	1c9a      	adds	r2, r3, #2
 8000796:	60ba      	str	r2, [r7, #8]
 8000798:	8afa      	ldrh	r2, [r7, #22]
 800079a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800079e:	428a      	cmp	r2, r1
 80007a0:	bf28      	it	cs
 80007a2:	460a      	movcs	r2, r1
 80007a4:	b292      	uxth	r2, r2
 80007a6:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	80fa      	strh	r2, [r7, #6]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1e7      	bne.n	8000782 <productoEscalar12Sat+0x1c>
	}
}
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	371c      	adds	r7, #28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <filtroVentana10>:

void filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b089      	sub	sp, #36	; 0x24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	uint32_t res = 0u;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
	uint16_t *init_pos = vectorIn;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	613b      	str	r3, [r7, #16]
	uint16_t *filt_pos = init_pos;
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	61bb      	str	r3, [r7, #24]
	uint32_t l = longitud;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	617b      	str	r3, [r7, #20]

	while (l--) {
 80007dc:	e028      	b.n	8000830 <filtroVentana10+0x70>
		filt_pos = (filt_pos > (init_pos + longitud)) ? init_pos : filt_pos;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	693a      	ldr	r2, [r7, #16]
 80007e4:	4413      	add	r3, r2
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d901      	bls.n	80007f0 <filtroVentana10+0x30>
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	e000      	b.n	80007f2 <filtroVentana10+0x32>
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	61bb      	str	r3, [r7, #24]
		res += *vectorIn++;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	1c9a      	adds	r2, r3, #2
 80007f8:	60fa      	str	r2, [r7, #12]
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	4413      	add	r3, r2
 8000802:	61fb      	str	r3, [r7, #28]

		if (vectorIn >= (filt_pos + 10u)) {
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	3314      	adds	r3, #20
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	429a      	cmp	r2, r3
 800080c:	d310      	bcc.n	8000830 <filtroVentana10+0x70>
			res /= 10u;
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <filtroVentana10+0x88>)
 8000812:	fba2 2303 	umull	r2, r3, r2, r3
 8000816:	08db      	lsrs	r3, r3, #3
 8000818:	61fb      	str	r3, [r7, #28]
			*vectorOut++ = (uint16_t)res;
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1c9a      	adds	r2, r3, #2
 800081e:	60ba      	str	r2, [r7, #8]
 8000820:	69fa      	ldr	r2, [r7, #28]
 8000822:	b292      	uxth	r2, r2
 8000824:	801a      	strh	r2, [r3, #0]
			vectorIn = ++filt_pos;
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	3302      	adds	r3, #2
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	60fb      	str	r3, [r7, #12]
	while (l--) {
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	617a      	str	r2, [r7, #20]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d1d1      	bne.n	80007de <filtroVentana10+0x1e>
		}
	}
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3724      	adds	r7, #36	; 0x24
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	cccccccd 	.word	0xcccccccd

0800084c <pack32to16>:

void pack32to16(int32_t *vectorIn, int16_t *vectorOut, uint32_t longitud)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
	while (longitud--) {
 8000858:	e009      	b.n	800086e <pack32to16+0x22>
		*vectorOut++ = *vectorIn++ >> 16u;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	1d1a      	adds	r2, r3, #4
 800085e:	60fa      	str	r2, [r7, #12]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1419      	asrs	r1, r3, #16
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c9a      	adds	r2, r3, #2
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	b20a      	sxth	r2, r1
 800086c:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	1e5a      	subs	r2, r3, #1
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d1f0      	bne.n	800085a <pack32to16+0xe>
	}
}
 8000878:	bf00      	nop
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <max>:

int32_t max(int32_t *vectorIn, uint32_t longitud)
{
 8000886:	b480      	push	{r7}
 8000888:	b085      	sub	sp, #20
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
 800088e:	6039      	str	r1, [r7, #0]
	int32_t max = 0x80000000u;
 8000890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000894:	60fb      	str	r3, [r7, #12]

	while (longitud--) {
 8000896:	e009      	b.n	80008ac <max+0x26>
		max = (*vectorIn > max) ? *vectorIn : max;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68fa      	ldr	r2, [r7, #12]
 800089e:	4293      	cmp	r3, r2
 80008a0:	bfb8      	it	lt
 80008a2:	4613      	movlt	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
		vectorIn++;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3304      	adds	r3, #4
 80008aa:	607b      	str	r3, [r7, #4]
	while (longitud--) {
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	1e5a      	subs	r2, r3, #1
 80008b0:	603a      	str	r2, [r7, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f0      	bne.n	8000898 <max+0x12>
	}

	return max;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <downsampleN>:

void downsampleN(int32_t *vectorIn, int32_t *vectorOut, uint32_t longitud, uint32_t N)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b087      	sub	sp, #28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
 80008d0:	603b      	str	r3, [r7, #0]
	uint32_t n = 0u;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]

	while (longitud--) {
 80008d6:	e013      	b.n	8000900 <downsampleN+0x3c>
		if (n++ < N) {
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	1c5a      	adds	r2, r3, #1
 80008dc:	617a      	str	r2, [r7, #20]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d908      	bls.n	80008f6 <downsampleN+0x32>
			*vectorOut++ = *vectorIn++;
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	1d13      	adds	r3, r2, #4
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1d19      	adds	r1, r3, #4
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	6812      	ldr	r2, [r2, #0]
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	e004      	b.n	8000900 <downsampleN+0x3c>
		}
		else {
			n = 0u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
			vectorIn++;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3304      	adds	r3, #4
 80008fe:	60fb      	str	r3, [r7, #12]
	while (longitud--) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	607a      	str	r2, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1e6      	bne.n	80008d8 <downsampleN+0x14>
		}
	}
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	371c      	adds	r7, #28
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <invertir>:

void invertir(uint16_t *vectorIn, uint32_t longitud)
{
 8000918:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800091c:	b087      	sub	sp, #28
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
 8000922:	6039      	str	r1, [r7, #0]
 8000924:	466b      	mov	r3, sp
 8000926:	4618      	mov	r0, r3
	uint32_t n = longitud;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	613b      	str	r3, [r7, #16]
	uint16_t tmp[longitud];
 800092c:	6839      	ldr	r1, [r7, #0]
 800092e:	460b      	mov	r3, r1
 8000930:	3b01      	subs	r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	2300      	movs	r3, #0
 8000936:	4688      	mov	r8, r1
 8000938:	4699      	mov	r9, r3
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000946:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800094a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800094e:	2300      	movs	r3, #0
 8000950:	460c      	mov	r4, r1
 8000952:	461d      	mov	r5, r3
 8000954:	f04f 0200 	mov.w	r2, #0
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	012b      	lsls	r3, r5, #4
 800095e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000962:	0122      	lsls	r2, r4, #4
 8000964:	004b      	lsls	r3, r1, #1
 8000966:	3307      	adds	r3, #7
 8000968:	08db      	lsrs	r3, r3, #3
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	ebad 0d03 	sub.w	sp, sp, r3
 8000970:	466b      	mov	r3, sp
 8000972:	3301      	adds	r3, #1
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
	uint16_t *tmp_ptr = &tmp[0u];
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	617b      	str	r3, [r7, #20]

	while (n--) {
 800097e:	e008      	b.n	8000992 <invertir+0x7a>
		*tmp_ptr++ = vectorIn[n];
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	441a      	add	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	1c99      	adds	r1, r3, #2
 800098c:	6179      	str	r1, [r7, #20]
 800098e:	8812      	ldrh	r2, [r2, #0]
 8000990:	801a      	strh	r2, [r3, #0]
	while (n--) {
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	1e5a      	subs	r2, r3, #1
 8000996:	613a      	str	r2, [r7, #16]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1f1      	bne.n	8000980 <invertir+0x68>
	}

	n = longitud;
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	613b      	str	r3, [r7, #16]
	tmp_ptr = &tmp[0u];
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	617b      	str	r3, [r7, #20]

	while (n--) {
 80009a4:	e007      	b.n	80009b6 <invertir+0x9e>
		*vectorIn++ = *tmp_ptr++;
 80009a6:	697a      	ldr	r2, [r7, #20]
 80009a8:	1c93      	adds	r3, r2, #2
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1c99      	adds	r1, r3, #2
 80009b0:	6079      	str	r1, [r7, #4]
 80009b2:	8812      	ldrh	r2, [r2, #0]
 80009b4:	801a      	strh	r2, [r3, #0]
	while (n--) {
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	1e5a      	subs	r2, r3, #1
 80009ba:	613a      	str	r2, [r7, #16]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d1f2      	bne.n	80009a6 <invertir+0x8e>
 80009c0:	4685      	mov	sp, r0
	}
}
 80009c2:	bf00      	nop
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80009cc:	4770      	bx	lr
	...

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b0a8      	sub	sp, #160	; 0xa0
 80009d4:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	uint32_t res = 0u;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009dc:	f000 fedc 	bl	8001798 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009e0:	f000 fac4 	bl	8000f6c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009e4:	f000 fbd2 	bl	800118c <MX_GPIO_Init>
	MX_ETH_Init();
 80009e8:	f000 fb2a 	bl	8001040 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80009ec:	f000 fb76 	bl	80010dc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80009f0:	f000 fb9e 	bl	8001130 <MX_USB_OTG_FS_PCD_Init>
	/* Habilita y activa el DWT */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80009f4:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <main+0xdc>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4a2c      	ldr	r2, [pc, #176]	; (8000aac <main+0xdc>)
 80009fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009fe:	60d3      	str	r3, [r2, #12]
	CoreDebug->DEMCR |= 1ul << CoreDebug_DEMCR_MON_EN_Pos;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <main+0xdc>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	4a29      	ldr	r2, [pc, #164]	; (8000aac <main+0xdc>)
 8000a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a0a:	60d3      	str	r3, [r2, #12]
	ITM->LAR = 0xC5ACCE55;
 8000a0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a10:	4a27      	ldr	r2, [pc, #156]	; (8000ab0 <main+0xe0>)
 8000a12:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <main+0xe4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a26      	ldr	r2, [pc, #152]	; (8000ab4 <main+0xe4>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6013      	str	r3, [r2, #0]
	#ifdef DWT_ENABLE
		#if DWT_ENABLE != 1u
			PrivilegiosSVC();
		#endif
	#endif
	res = asm_sum(5, 3);
 8000a22:	2103      	movs	r1, #3
 8000a24:	2005      	movs	r0, #5
 8000a26:	f7ff fbe5 	bl	80001f4 <asm_sum>
 8000a2a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	/*********************************************************************
	 * 1) Función "zeros": benchmark C vs assembly
	 *********************************************************************/
	DWT_START();
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <main+0xe4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
	zeros(buffer_zeros, LENGTH_BUFFER_IN_OUT);
 8000a34:	2114      	movs	r1, #20
 8000a36:	4820      	ldr	r0, [pc, #128]	; (8000ab8 <main+0xe8>)
 8000a38:	f7ff fe14 	bl	8000664 <zeros>
	clang_cyc_cnt[ZEROS] = DWT_STOP();
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <main+0xe4>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a48:	627b      	str	r3, [r7, #36]	; 0x24

	for(uint32_t i = 0u; i < LENGTH_BUFFER_IN_OUT; i++) {
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000a50:	e00f      	b.n	8000a72 <main+0xa2>
		ASSERT(buffer_zeros[0u], 0u);
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <main+0xe8>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d006      	beq.n	8000a68 <main+0x98>
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <main+0xe8>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	4619      	mov	r1, r3
 8000a62:	20e9      	movs	r0, #233	; 0xe9
 8000a64:	f000 fc46 	bl	80012f4 <assert_failed>
	for(uint32_t i = 0u; i < LENGTH_BUFFER_IN_OUT; i++) {
 8000a68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000a76:	2b13      	cmp	r3, #19
 8000a78:	d9eb      	bls.n	8000a52 <main+0x82>
	}

	asignarEscalar32(buffer_zeros, LENGTH_BUFFER_IN_OUT, 0xFFFFFFFF);
 8000a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a7e:	2114      	movs	r1, #20
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <main+0xe8>)
 8000a82:	f7ff fdd7 	bl	8000634 <asignarEscalar32>

	DWT_START();
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <main+0xe4>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
	asm_zeros(buffer_zeros, LENGTH_BUFFER_IN_OUT);
 8000a8c:	2114      	movs	r1, #20
 8000a8e:	480a      	ldr	r0, [pc, #40]	; (8000ab8 <main+0xe8>)
 8000a90:	f7ff fbb2 	bl	80001f8 <asm_zeros>
	assembly_cyc_cnt[ZEROS] = DWT_STOP();
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <main+0xe4>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000aa0:	603b      	str	r3, [r7, #0]

	for(uint32_t i = 0u; i < LENGTH_BUFFER_IN_OUT; i++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000aa8:	e018      	b.n	8000adc <main+0x10c>
 8000aaa:	bf00      	nop
 8000aac:	e000edf0 	.word	0xe000edf0
 8000ab0:	c5acce55 	.word	0xc5acce55
 8000ab4:	e0001000 	.word	0xe0001000
 8000ab8:	20000024 	.word	0x20000024
		ASSERT(buffer_zeros[0u], 0u);
 8000abc:	4bab      	ldr	r3, [pc, #684]	; (8000d6c <main+0x39c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <main+0x102>
 8000ac4:	4ba9      	ldr	r3, [pc, #676]	; (8000d6c <main+0x39c>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4619      	mov	r1, r3
 8000acc:	20f3      	movs	r0, #243	; 0xf3
 8000ace:	f000 fc11 	bl	80012f4 <assert_failed>
	for(uint32_t i = 0u; i < LENGTH_BUFFER_IN_OUT; i++) {
 8000ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ae0:	2b13      	cmp	r3, #19
 8000ae2:	d9eb      	bls.n	8000abc <main+0xec>
	}

	/*********************************************************************
	 * 2) Función "productoEscalar32": benchmark C vs assembly
	 *********************************************************************/
	DWT_START();
 8000ae4:	4ba2      	ldr	r3, [pc, #648]	; (8000d70 <main+0x3a0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
	productoEscalar32(buffer_in_32, buffer_out_32, LENGTH_BUFFER_IN_OUT, 5u);
 8000aea:	2305      	movs	r3, #5
 8000aec:	2214      	movs	r2, #20
 8000aee:	49a1      	ldr	r1, [pc, #644]	; (8000d74 <main+0x3a4>)
 8000af0:	48a1      	ldr	r0, [pc, #644]	; (8000d78 <main+0x3a8>)
 8000af2:	f7ff fdce 	bl	8000692 <productoEscalar32>
	clang_cyc_cnt[PRO_ESC_32] = DWT_STOP();
 8000af6:	4b9e      	ldr	r3, [pc, #632]	; (8000d70 <main+0x3a0>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000afc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28

	ASSERT(buffer_out_32[0u], 25u);
 8000b00:	4b9c      	ldr	r3, [pc, #624]	; (8000d74 <main+0x3a4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b19      	cmp	r3, #25
 8000b06:	d006      	beq.n	8000b16 <main+0x146>
 8000b08:	4b9a      	ldr	r3, [pc, #616]	; (8000d74 <main+0x3a4>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2219      	movs	r2, #25
 8000b0e:	4619      	mov	r1, r3
 8000b10:	20fd      	movs	r0, #253	; 0xfd
 8000b12:	f000 fbef 	bl	80012f4 <assert_failed>

	memset(buffer_out_32, 0, sizeof(buffer_out_32));
 8000b16:	2250      	movs	r2, #80	; 0x50
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4896      	ldr	r0, [pc, #600]	; (8000d74 <main+0x3a4>)
 8000b1c:	f003 f934 	bl	8003d88 <memset>

	DWT_START();
 8000b20:	4b93      	ldr	r3, [pc, #588]	; (8000d70 <main+0x3a0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]
	asm_productoEscalar32(buffer_in_32, buffer_out_32, LENGTH_BUFFER_IN_OUT, 5u);
 8000b26:	2305      	movs	r3, #5
 8000b28:	2214      	movs	r2, #20
 8000b2a:	4992      	ldr	r1, [pc, #584]	; (8000d74 <main+0x3a4>)
 8000b2c:	4892      	ldr	r0, [pc, #584]	; (8000d78 <main+0x3a8>)
 8000b2e:	f7ff fb6a 	bl	8000206 <asm_productoEscalar32>
	assembly_cyc_cnt[PRO_ESC_32] = DWT_STOP();
 8000b32:	4b8f      	ldr	r3, [pc, #572]	; (8000d70 <main+0x3a0>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	67bb      	str	r3, [r7, #120]	; 0x78
 8000b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b3a:	607b      	str	r3, [r7, #4]

	ASSERT(buffer_out_32[0u], 25u);
 8000b3c:	4b8d      	ldr	r3, [pc, #564]	; (8000d74 <main+0x3a4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	d007      	beq.n	8000b54 <main+0x184>
 8000b44:	4b8b      	ldr	r3, [pc, #556]	; (8000d74 <main+0x3a4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2219      	movs	r2, #25
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f240 1005 	movw	r0, #261	; 0x105
 8000b50:	f000 fbd0 	bl	80012f4 <assert_failed>

	/*********************************************************************
	 * 3) Función "productoEscalar16": benchmark C vs assembly
	 *********************************************************************/
	DWT_START();
 8000b54:	4b86      	ldr	r3, [pc, #536]	; (8000d70 <main+0x3a0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
	productoEscalar16(buffer_in_16, buffer_out_16, LENGTH_BUFFER_IN_OUT, 2u);
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	2214      	movs	r2, #20
 8000b5e:	4987      	ldr	r1, [pc, #540]	; (8000d7c <main+0x3ac>)
 8000b60:	4887      	ldr	r0, [pc, #540]	; (8000d80 <main+0x3b0>)
 8000b62:	f7ff fdb5 	bl	80006d0 <productoEscalar16>
	clang_cyc_cnt[PRO_ESC_16] = DWT_STOP();
 8000b66:	4b82      	ldr	r3, [pc, #520]	; (8000d70 <main+0x3a0>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	677b      	str	r3, [r7, #116]	; 0x74
 8000b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

	ASSERT(buffer_out_16[LENGTH_BUFFER_IN_OUT - 1u], 10u);
 8000b70:	4b82      	ldr	r3, [pc, #520]	; (8000d7c <main+0x3ac>)
 8000b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000b74:	2b0a      	cmp	r3, #10
 8000b76:	d007      	beq.n	8000b88 <main+0x1b8>
 8000b78:	4b80      	ldr	r3, [pc, #512]	; (8000d7c <main+0x3ac>)
 8000b7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000b7c:	220a      	movs	r2, #10
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f44f 7087 	mov.w	r0, #270	; 0x10e
 8000b84:	f000 fbb6 	bl	80012f4 <assert_failed>

	memset(buffer_out_16, 0, sizeof(buffer_out_16));
 8000b88:	2228      	movs	r2, #40	; 0x28
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	487b      	ldr	r0, [pc, #492]	; (8000d7c <main+0x3ac>)
 8000b8e:	f003 f8fb 	bl	8003d88 <memset>

	DWT_START();
 8000b92:	4b77      	ldr	r3, [pc, #476]	; (8000d70 <main+0x3a0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
	asm_productoEscalar16(buffer_in_16, buffer_out_16, LENGTH_BUFFER_IN_OUT, 2u);
 8000b98:	2302      	movs	r3, #2
 8000b9a:	2214      	movs	r2, #20
 8000b9c:	4977      	ldr	r1, [pc, #476]	; (8000d7c <main+0x3ac>)
 8000b9e:	4878      	ldr	r0, [pc, #480]	; (8000d80 <main+0x3b0>)
 8000ba0:	f7ff fb3c 	bl	800021c <asm_productoEscalar16>
	assembly_cyc_cnt[PRO_ESC_16] = DWT_STOP();
 8000ba4:	4b72      	ldr	r3, [pc, #456]	; (8000d70 <main+0x3a0>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	673b      	str	r3, [r7, #112]	; 0x70
 8000baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bac:	60bb      	str	r3, [r7, #8]

	ASSERT(buffer_out_16[LENGTH_BUFFER_IN_OUT - 1u], 10u);
 8000bae:	4b73      	ldr	r3, [pc, #460]	; (8000d7c <main+0x3ac>)
 8000bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000bb2:	2b0a      	cmp	r3, #10
 8000bb4:	d007      	beq.n	8000bc6 <main+0x1f6>
 8000bb6:	4b71      	ldr	r3, [pc, #452]	; (8000d7c <main+0x3ac>)
 8000bb8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000bba:	220a      	movs	r2, #10
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 708b 	mov.w	r0, #278	; 0x116
 8000bc2:	f000 fb97 	bl	80012f4 <assert_failed>

	/*********************************************************************
	 * 4) Función "productoEscalar12": benchmark C vs assembly
	 *********************************************************************/
	memset(buffer_out_16, 0, sizeof(buffer_out_16));
 8000bc6:	2228      	movs	r2, #40	; 0x28
 8000bc8:	2100      	movs	r1, #0
 8000bca:	486c      	ldr	r0, [pc, #432]	; (8000d7c <main+0x3ac>)
 8000bcc:	f003 f8dc 	bl	8003d88 <memset>

	DWT_START();
 8000bd0:	4b67      	ldr	r3, [pc, #412]	; (8000d70 <main+0x3a0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
	productoEscalar12(buffer_in_16, buffer_out_16, LENGTH_BUFFER_IN_OUT, 1024u);
 8000bd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bda:	2214      	movs	r2, #20
 8000bdc:	4967      	ldr	r1, [pc, #412]	; (8000d7c <main+0x3ac>)
 8000bde:	4868      	ldr	r0, [pc, #416]	; (8000d80 <main+0x3b0>)
 8000be0:	f7ff fd9a 	bl	8000718 <productoEscalar12>
	clang_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000be4:	4b62      	ldr	r3, [pc, #392]	; (8000d70 <main+0x3a0>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30

	ASSERT(buffer_out_16[LENGTH_BUFFER_IN_OUT - 1u], 1024u);
 8000bee:	4b63      	ldr	r3, [pc, #396]	; (8000d7c <main+0x3ac>)
 8000bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bf6:	d008      	beq.n	8000c0a <main+0x23a>
 8000bf8:	4b60      	ldr	r3, [pc, #384]	; (8000d7c <main+0x3ac>)
 8000bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c00:	4619      	mov	r1, r3
 8000c02:	f240 1021 	movw	r0, #289	; 0x121
 8000c06:	f000 fb75 	bl	80012f4 <assert_failed>
	memset(buffer_out_16, 0, sizeof(buffer_out_16));
 8000c0a:	2228      	movs	r2, #40	; 0x28
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	485b      	ldr	r0, [pc, #364]	; (8000d7c <main+0x3ac>)
 8000c10:	f003 f8ba 	bl	8003d88 <memset>

	DWT_START();
 8000c14:	4b56      	ldr	r3, [pc, #344]	; (8000d70 <main+0x3a0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
	asm_productoEscalar12(buffer_in_16, buffer_out_16, LENGTH_BUFFER_IN_OUT, 1024u);
 8000c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1e:	2214      	movs	r2, #20
 8000c20:	4956      	ldr	r1, [pc, #344]	; (8000d7c <main+0x3ac>)
 8000c22:	4857      	ldr	r0, [pc, #348]	; (8000d80 <main+0x3b0>)
 8000c24:	f7ff fb06 	bl	8000234 <asm_productoEscalar12>
	assembly_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000c28:	4b51      	ldr	r3, [pc, #324]	; (8000d70 <main+0x3a0>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c30:	60fb      	str	r3, [r7, #12]

	ASSERT(buffer_out_16[LENGTH_BUFFER_IN_OUT - 1u], 1024u);
 8000c32:	4b52      	ldr	r3, [pc, #328]	; (8000d7c <main+0x3ac>)
 8000c34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c3a:	d008      	beq.n	8000c4e <main+0x27e>
 8000c3c:	4b4f      	ldr	r3, [pc, #316]	; (8000d7c <main+0x3ac>)
 8000c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 7094 	mov.w	r0, #296	; 0x128
 8000c4a:	f000 fb53 	bl	80012f4 <assert_failed>

	/*********************************************************************
	 * 4-b) Función "productoEscalar12Sat": benchmark C vs assembly
	 *********************************************************************/
	memset(buffer_out_16, 0, sizeof(buffer_out_16));
 8000c4e:	2228      	movs	r2, #40	; 0x28
 8000c50:	2100      	movs	r1, #0
 8000c52:	484a      	ldr	r0, [pc, #296]	; (8000d7c <main+0x3ac>)
 8000c54:	f003 f898 	bl	8003d88 <memset>

	DWT_START();
 8000c58:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <main+0x3a0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
	productoEscalar12Sat(buffer_in_16, buffer_out_16, LENGTH_BUFFER_IN_OUT, 1024u);
 8000c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c62:	2214      	movs	r2, #20
 8000c64:	4945      	ldr	r1, [pc, #276]	; (8000d7c <main+0x3ac>)
 8000c66:	4846      	ldr	r0, [pc, #280]	; (8000d80 <main+0x3b0>)
 8000c68:	f7ff fd7d 	bl	8000766 <productoEscalar12Sat>
	clang_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000c6c:	4b40      	ldr	r3, [pc, #256]	; (8000d70 <main+0x3a0>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	667b      	str	r3, [r7, #100]	; 0x64
 8000c72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c74:	633b      	str	r3, [r7, #48]	; 0x30

	ASSERT(buffer_out_16[0u], 4095u);
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <main+0x3ac>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d008      	beq.n	8000c94 <main+0x2c4>
 8000c82:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <main+0x3ac>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f240 1033 	movw	r0, #307	; 0x133
 8000c90:	f000 fb30 	bl	80012f4 <assert_failed>

	memset(buffer_out_16, 0, sizeof(buffer_out_16));
 8000c94:	2228      	movs	r2, #40	; 0x28
 8000c96:	2100      	movs	r1, #0
 8000c98:	4838      	ldr	r0, [pc, #224]	; (8000d7c <main+0x3ac>)
 8000c9a:	f003 f875 	bl	8003d88 <memset>

	DWT_START();
 8000c9e:	4b34      	ldr	r3, [pc, #208]	; (8000d70 <main+0x3a0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
	asm_productoEscalar12Sat(buffer_in_16, buffer_out_16, LENGTH_BUFFER_IN_OUT, 1024u);
 8000ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca8:	2214      	movs	r2, #20
 8000caa:	4934      	ldr	r1, [pc, #208]	; (8000d7c <main+0x3ac>)
 8000cac:	4834      	ldr	r0, [pc, #208]	; (8000d80 <main+0x3b0>)
 8000cae:	f7ff fad1 	bl	8000254 <asm_productoEscalar12Sat>
	assembly_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000cb2:	4b2f      	ldr	r3, [pc, #188]	; (8000d70 <main+0x3a0>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8000cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cba:	60fb      	str	r3, [r7, #12]

	ASSERT(buffer_out_16[0u], 4095u);
 8000cbc:	4b2f      	ldr	r3, [pc, #188]	; (8000d7c <main+0x3ac>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d008      	beq.n	8000cda <main+0x30a>
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <main+0x3ac>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f240 103b 	movw	r0, #315	; 0x13b
 8000cd6:	f000 fb0d 	bl	80012f4 <assert_failed>

	/*********************************************************************
	 * 5) Función "filtroVentana10": benchmark C vs assembly
	 *********************************************************************/
	memset(buffer_out_16, 0, sizeof(buffer_out_16));
 8000cda:	2228      	movs	r2, #40	; 0x28
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4827      	ldr	r0, [pc, #156]	; (8000d7c <main+0x3ac>)
 8000ce0:	f003 f852 	bl	8003d88 <memset>

	DWT_START();
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <main+0x3a0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
	filtroVentana10(buffer_in_16, buffer_out_16, LENGTH_BUFFER_IN_OUT);
 8000cea:	2214      	movs	r2, #20
 8000cec:	4923      	ldr	r1, [pc, #140]	; (8000d7c <main+0x3ac>)
 8000cee:	4824      	ldr	r0, [pc, #144]	; (8000d80 <main+0x3b0>)
 8000cf0:	f7ff fd66 	bl	80007c0 <filtroVentana10>
	clang_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <main+0x3a0>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30

	ASSERT(buffer_out_16[0u], 51555u);
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <main+0x3ac>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	f64c 1263 	movw	r2, #51555	; 0xc963
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d008      	beq.n	8000d1c <main+0x34c>
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <main+0x3ac>)
 8000d0c:	881b      	ldrh	r3, [r3, #0]
 8000d0e:	f64c 1263 	movw	r2, #51555	; 0xc963
 8000d12:	4619      	mov	r1, r3
 8000d14:	f44f 70a3 	mov.w	r0, #326	; 0x146
 8000d18:	f000 faec 	bl	80012f4 <assert_failed>

	memset(buffer_out_16, 0, sizeof(buffer_out_16));
 8000d1c:	2228      	movs	r2, #40	; 0x28
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4816      	ldr	r0, [pc, #88]	; (8000d7c <main+0x3ac>)
 8000d22:	f003 f831 	bl	8003d88 <memset>

	/*********************************************************************
	 * 6) Función "pack32to16": benchmark C vs assembly
	 *********************************************************************/

	DWT_START();
 8000d26:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <main+0x3a0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
	pack32to16(buffer_in_s32, buffer_out_s16, LENGTH_BUFFER_IN_OUT);
 8000d2c:	2214      	movs	r2, #20
 8000d2e:	4915      	ldr	r1, [pc, #84]	; (8000d84 <main+0x3b4>)
 8000d30:	4815      	ldr	r0, [pc, #84]	; (8000d88 <main+0x3b8>)
 8000d32:	f7ff fd8b 	bl	800084c <pack32to16>
	clang_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <main+0x3a0>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30

	ASSERT(buffer_out_s16[0u], (int16_t)0xFFFFu);
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <main+0x3b4>)
 8000d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d4a:	d009      	beq.n	8000d60 <main+0x390>
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <main+0x3b4>)
 8000d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d56:	4619      	mov	r1, r3
 8000d58:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8000d5c:	f000 faca 	bl	80012f4 <assert_failed>

	memset(buffer_out_s16, 0, sizeof(buffer_out_s16));
 8000d60:	2228      	movs	r2, #40	; 0x28
 8000d62:	2100      	movs	r1, #0
 8000d64:	4807      	ldr	r0, [pc, #28]	; (8000d84 <main+0x3b4>)
 8000d66:	f003 f80f 	bl	8003d88 <memset>
 8000d6a:	e00f      	b.n	8000d8c <main+0x3bc>
 8000d6c:	20000024 	.word	0x20000024
 8000d70:	e0001000 	.word	0xe0001000
 8000d74:	20000990 	.word	0x20000990
 8000d78:	20000074 	.word	0x20000074
 8000d7c:	200009e0 	.word	0x200009e0
 8000d80:	200000c4 	.word	0x200000c4
 8000d84:	20000a58 	.word	0x20000a58
 8000d88:	200000ec 	.word	0x200000ec

	/*********************************************************************
	 * 7) Función "max": benchmark C vs assembly
	 *********************************************************************/

	DWT_START();
 8000d8c:	4b6b      	ldr	r3, [pc, #428]	; (8000f3c <main+0x56c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
	int32_t max_res = max(buffer_in_s32, LENGTH_BUFFER_IN_OUT);
 8000d92:	2114      	movs	r1, #20
 8000d94:	486a      	ldr	r0, [pc, #424]	; (8000f40 <main+0x570>)
 8000d96:	f7ff fd76 	bl	8000886 <max>
 8000d9a:	6578      	str	r0, [r7, #84]	; 0x54
	clang_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000d9c:	4b67      	ldr	r3, [pc, #412]	; (8000f3c <main+0x56c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	653b      	str	r3, [r7, #80]	; 0x50
 8000da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30

	ASSERT(max_res, (int32_t)65535);
 8000da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d007      	beq.n	8000dc0 <main+0x3f0>
 8000db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db6:	4619      	mov	r1, r3
 8000db8:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8000dbc:	f000 fa9a 	bl	80012f4 <assert_failed>

	/*********************************************************************
	 * 8) Función "downsampleN": benchmark C vs assembly
	 *********************************************************************/

	memset(buffer_out_s32, 0, sizeof(buffer_out_s32));
 8000dc0:	2250      	movs	r2, #80	; 0x50
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	485f      	ldr	r0, [pc, #380]	; (8000f44 <main+0x574>)
 8000dc6:	f002 ffdf 	bl	8003d88 <memset>

	DWT_START();
 8000dca:	4b5c      	ldr	r3, [pc, #368]	; (8000f3c <main+0x56c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
	downsampleN(buffer_in_s32, buffer_out_s32, LENGTH_BUFFER_IN_OUT, 6u);
 8000dd0:	2306      	movs	r3, #6
 8000dd2:	2214      	movs	r2, #20
 8000dd4:	495b      	ldr	r1, [pc, #364]	; (8000f44 <main+0x574>)
 8000dd6:	485a      	ldr	r0, [pc, #360]	; (8000f40 <main+0x570>)
 8000dd8:	f7ff fd74 	bl	80008c4 <downsampleN>
	clang_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000ddc:	4b57      	ldr	r3, [pc, #348]	; (8000f3c <main+0x56c>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30

	ASSERT(buffer_out_s32[3u], buffer_in_s32[3u]);
 8000de6:	4b57      	ldr	r3, [pc, #348]	; (8000f44 <main+0x574>)
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	4b55      	ldr	r3, [pc, #340]	; (8000f40 <main+0x570>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d009      	beq.n	8000e06 <main+0x436>
 8000df2:	4b54      	ldr	r3, [pc, #336]	; (8000f44 <main+0x574>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	4619      	mov	r1, r3
 8000df8:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <main+0x570>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8000e02:	f000 fa77 	bl	80012f4 <assert_failed>
	ASSERT(buffer_out_s32[6u], buffer_in_s32[7u]);
 8000e06:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <main+0x574>)
 8000e08:	699a      	ldr	r2, [r3, #24]
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <main+0x570>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d009      	beq.n	8000e26 <main+0x456>
 8000e12:	4b4c      	ldr	r3, [pc, #304]	; (8000f44 <main+0x574>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4619      	mov	r1, r3
 8000e18:	4b49      	ldr	r3, [pc, #292]	; (8000f40 <main+0x570>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	f240 107d 	movw	r0, #381	; 0x17d
 8000e22:	f000 fa67 	bl	80012f4 <assert_failed>

	memset(buffer_out_s32, 0, sizeof(buffer_out_s32));
 8000e26:	2250      	movs	r2, #80	; 0x50
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4846      	ldr	r0, [pc, #280]	; (8000f44 <main+0x574>)
 8000e2c:	f002 ffac 	bl	8003d88 <memset>

	/*********************************************************************
	 * 9) Función "invertir": benchmark C vs assembly
	 *********************************************************************/

	DWT_START();
 8000e30:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <main+0x56c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	605a      	str	r2, [r3, #4]
	invertir(buffer_in_16, LENGTH_BUFFER_IN_OUT);
 8000e36:	2114      	movs	r1, #20
 8000e38:	4843      	ldr	r0, [pc, #268]	; (8000f48 <main+0x578>)
 8000e3a:	f7ff fd6d 	bl	8000918 <invertir>
	clang_cyc_cnt[PRO_ESC_12] = DWT_STOP();
 8000e3e:	4b3f      	ldr	r3, [pc, #252]	; (8000f3c <main+0x56c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30

	ASSERT(buffer_in_16[LENGTH_BUFFER_IN_OUT - 1], 0xFFFFu);
 8000e48:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <main+0x578>)
 8000e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d008      	beq.n	8000e66 <main+0x496>
 8000e54:	4b3c      	ldr	r3, [pc, #240]	; (8000f48 <main+0x578>)
 8000e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000e62:	f000 fa47 	bl	80012f4 <assert_failed>
//	ASSERT(buffer_out_s32[3u], buffer_in_s32[3u]);

	/*********************************************************************
	 * Prints
	 *********************************************************************/
 	sprintf( buffer_uart, "Arquitectura de Microprocesadores - Guia de ejercicios\r\n\n" );
 8000e66:	4939      	ldr	r1, [pc, #228]	; (8000f4c <main+0x57c>)
 8000e68:	4839      	ldr	r0, [pc, #228]	; (8000f50 <main+0x580>)
 8000e6a:	f002 ff95 	bl	8003d98 <siprintf>
	HAL_UART_Transmit( &huart3, (uint8_t *)buffer_uart, (uint16_t) strlen((char *)buffer_uart), 10u );
 8000e6e:	4838      	ldr	r0, [pc, #224]	; (8000f50 <main+0x580>)
 8000e70:	f7ff fa00 	bl	8000274 <strlen>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	230a      	movs	r3, #10
 8000e7a:	4935      	ldr	r1, [pc, #212]	; (8000f50 <main+0x580>)
 8000e7c:	4835      	ldr	r0, [pc, #212]	; (8000f54 <main+0x584>)
 8000e7e:	f002 f8e2 	bl	8003046 <HAL_UART_Transmit>
	sprintf( buffer_uart, "Warm Up!\tasm_sum(5,3) = %lu\r\n\n", (uint32_t)res );
 8000e82:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000e86:	4934      	ldr	r1, [pc, #208]	; (8000f58 <main+0x588>)
 8000e88:	4831      	ldr	r0, [pc, #196]	; (8000f50 <main+0x580>)
 8000e8a:	f002 ff85 	bl	8003d98 <siprintf>
	HAL_UART_Transmit( &huart3, (uint8_t *)buffer_uart, (uint16_t) strlen((char *)buffer_uart), 10u );
 8000e8e:	4830      	ldr	r0, [pc, #192]	; (8000f50 <main+0x580>)
 8000e90:	f7ff f9f0 	bl	8000274 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	230a      	movs	r3, #10
 8000e9a:	492d      	ldr	r1, [pc, #180]	; (8000f50 <main+0x580>)
 8000e9c:	482d      	ldr	r0, [pc, #180]	; (8000f54 <main+0x584>)
 8000e9e:	f002 f8d2 	bl	8003046 <HAL_UART_Transmit>
	sprintf( buffer_uart, "Benchmark Ciclos C vs Assembly\r\n\nFuncion\t\t\t\tC\t     Assembly\r\n" );
 8000ea2:	492e      	ldr	r1, [pc, #184]	; (8000f5c <main+0x58c>)
 8000ea4:	482a      	ldr	r0, [pc, #168]	; (8000f50 <main+0x580>)
 8000ea6:	f002 ff77 	bl	8003d98 <siprintf>
	HAL_UART_Transmit( &huart3, (uint8_t *)buffer_uart, (uint16_t) strlen((char *)buffer_uart), 10u );
 8000eaa:	4829      	ldr	r0, [pc, #164]	; (8000f50 <main+0x580>)
 8000eac:	f7ff f9e2 	bl	8000274 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	4926      	ldr	r1, [pc, #152]	; (8000f50 <main+0x580>)
 8000eb8:	4826      	ldr	r0, [pc, #152]	; (8000f54 <main+0x584>)
 8000eba:	f002 f8c4 	bl	8003046 <HAL_UART_Transmit>
	sprintf( buffer_uart, "------------------------------------------------------\r\n" );
 8000ebe:	4928      	ldr	r1, [pc, #160]	; (8000f60 <main+0x590>)
 8000ec0:	4823      	ldr	r0, [pc, #140]	; (8000f50 <main+0x580>)
 8000ec2:	f002 ff69 	bl	8003d98 <siprintf>
	HAL_UART_Transmit( &huart3, (uint8_t *)buffer_uart, (uint16_t) strlen((char *)buffer_uart), 10u );
 8000ec6:	4822      	ldr	r0, [pc, #136]	; (8000f50 <main+0x580>)
 8000ec8:	f7ff f9d4 	bl	8000274 <strlen>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	491f      	ldr	r1, [pc, #124]	; (8000f50 <main+0x580>)
 8000ed4:	481f      	ldr	r0, [pc, #124]	; (8000f54 <main+0x584>)
 8000ed6:	f002 f8b6 	bl	8003046 <HAL_UART_Transmit>

	for (func_index_t func_index = ZEROS; func_index < MAX_FUNC_NUM; func_index++) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000ee0:	e027      	b.n	8000f32 <main+0x562>
		sprintf( buffer_uart, "%s\t%10ld\t\%10ld\r\n", func_names[func_index], clang_cyc_cnt[func_index], assembly_cyc_cnt[func_index] );
 8000ee2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000ee6:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <main+0x594>)
 8000ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eec:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	3398      	adds	r3, #152	; 0x98
 8000ef4:	443b      	add	r3, r7
 8000ef6:	f853 1c74 	ldr.w	r1, [r3, #-116]
 8000efa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	3398      	adds	r3, #152	; 0x98
 8000f02:	443b      	add	r3, r7
 8000f04:	f853 3c98 	ldr.w	r3, [r3, #-152]
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4916      	ldr	r1, [pc, #88]	; (8000f68 <main+0x598>)
 8000f0e:	4810      	ldr	r0, [pc, #64]	; (8000f50 <main+0x580>)
 8000f10:	f002 ff42 	bl	8003d98 <siprintf>
		HAL_UART_Transmit( &huart3, (uint8_t *)buffer_uart, (uint16_t) strlen((char *)buffer_uart), 10u );
 8000f14:	480e      	ldr	r0, [pc, #56]	; (8000f50 <main+0x580>)
 8000f16:	f7ff f9ad 	bl	8000274 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	230a      	movs	r3, #10
 8000f20:	490b      	ldr	r1, [pc, #44]	; (8000f50 <main+0x580>)
 8000f22:	480c      	ldr	r0, [pc, #48]	; (8000f54 <main+0x584>)
 8000f24:	f002 f88f 	bl	8003046 <HAL_UART_Transmit>
	for (func_index_t func_index = ZEROS; func_index < MAX_FUNC_NUM; func_index++) {
 8000f28:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8000f32:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d9d3      	bls.n	8000ee2 <main+0x512>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000f3a:	e7fe      	b.n	8000f3a <main+0x56a>
 8000f3c:	e0001000 	.word	0xe0001000
 8000f40:	200000ec 	.word	0x200000ec
 8000f44:	20000a08 	.word	0x20000a08
 8000f48:	200000c4 	.word	0x200000c4
 8000f4c:	08004740 	.word	0x08004740
 8000f50:	20000940 	.word	0x20000940
 8000f54:	200003f0 	.word	0x200003f0
 8000f58:	0800477c 	.word	0x0800477c
 8000f5c:	0800479c 	.word	0x0800479c
 8000f60:	080047dc 	.word	0x080047dc
 8000f64:	20000000 	.word	0x20000000
 8000f68:	08004818 	.word	0x08004818

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	; 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	; 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f002 ff04 	bl	8003d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <SystemClock_Config+0xcc>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <SystemClock_Config+0xcc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	; (800103c <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a21      	ldr	r2, [pc, #132]	; (800103c <SystemClock_Config+0xd0>)
 8000fb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	; (800103c <SystemClock_Config+0xd0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fcc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fdc:	2304      	movs	r3, #4
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fe0:	23a8      	movs	r3, #168	; 0xa8
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fe8:	2307      	movs	r3, #7
 8000fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f001 fb43 	bl	800267c <HAL_RCC_OscConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ffc:	f000 f974 	bl	80012e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
 8001002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001004:	2302      	movs	r3, #2
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001012:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001016:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	2105      	movs	r1, #5
 800101e:	4618      	mov	r0, r3
 8001020:	f001 fda4 	bl	8002b6c <HAL_RCC_ClockConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800102a:	f000 f95d 	bl	80012e8 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3750      	adds	r7, #80	; 0x50
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_ETH_Init+0x84>)
 8001046:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <MX_ETH_Init+0x88>)
 8001048:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <MX_ETH_Init+0x8c>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_ETH_Init+0x8c>)
 8001052:	2280      	movs	r2, #128	; 0x80
 8001054:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <MX_ETH_Init+0x8c>)
 8001058:	22e1      	movs	r2, #225	; 0xe1
 800105a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_ETH_Init+0x8c>)
 800105e:	2200      	movs	r2, #0
 8001060:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <MX_ETH_Init+0x8c>)
 8001064:	2200      	movs	r2, #0
 8001066:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_ETH_Init+0x8c>)
 800106a:	2200      	movs	r2, #0
 800106c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_ETH_Init+0x84>)
 8001070:	4a16      	ldr	r2, [pc, #88]	; (80010cc <MX_ETH_Init+0x8c>)
 8001072:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_ETH_Init+0x84>)
 8001076:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800107a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_ETH_Init+0x84>)
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <MX_ETH_Init+0x90>)
 8001080:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_ETH_Init+0x84>)
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <MX_ETH_Init+0x94>)
 8001086:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_ETH_Init+0x84>)
 800108a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800108e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_ETH_Init+0x84>)
 8001092:	f000 fcfd 	bl	8001a90 <HAL_ETH_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800109c:	f000 f924 	bl	80012e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010a0:	2238      	movs	r2, #56	; 0x38
 80010a2:	2100      	movs	r1, #0
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_ETH_Init+0x98>)
 80010a6:	f002 fe6f 	bl	8003d88 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_ETH_Init+0x98>)
 80010ac:	2221      	movs	r2, #33	; 0x21
 80010ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_ETH_Init+0x98>)
 80010b2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80010b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <MX_ETH_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000340 	.word	0x20000340
 80010c8:	40028000 	.word	0x40028000
 80010cc:	20000a80 	.word	0x20000a80
 80010d0:	200002a0 	.word	0x200002a0
 80010d4:	20000200 	.word	0x20000200
 80010d8:	200001c8 	.word	0x200001c8

080010dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_USART3_UART_Init+0x50>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_USART3_UART_Init+0x4c>)
 8001114:	f001 ff4a 	bl	8002fac <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800111e:	f000 f8e3 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003f0 	.word	0x200003f0
 800112c:	40004800 	.word	0x40004800

08001130 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001136:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800113a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113e:	2204      	movs	r2, #4
 8001140:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001144:	2202      	movs	r2, #2
 8001146:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001150:	2202      	movs	r2, #2
 8001152:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001156:	2201      	movs	r2, #1
 8001158:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001160:	4b09      	ldr	r3, [pc, #36]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001168:	2201      	movs	r2, #1
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001174:	f001 f965 	bl	8002442 <HAL_PCD_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800117e:	f000 f8b3 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000434 	.word	0x20000434

0800118c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	4b4c      	ldr	r3, [pc, #304]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a4b      	ldr	r2, [pc, #300]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b49      	ldr	r3, [pc, #292]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a44      	ldr	r2, [pc, #272]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b3e      	ldr	r3, [pc, #248]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a3d      	ldr	r2, [pc, #244]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <MX_GPIO_Init+0x14c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a36      	ldr	r2, [pc, #216]	; (80012d8 <MX_GPIO_Init+0x14c>)
 8001200:	f043 0302 	orr.w	r3, r3, #2
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b34      	ldr	r3, [pc, #208]	; (80012d8 <MX_GPIO_Init+0x14c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <MX_GPIO_Init+0x14c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a2f      	ldr	r2, [pc, #188]	; (80012d8 <MX_GPIO_Init+0x14c>)
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <MX_GPIO_Init+0x14c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0308 	and.w	r3, r3, #8
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_GPIO_Init+0x14c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a28      	ldr	r2, [pc, #160]	; (80012d8 <MX_GPIO_Init+0x14c>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_GPIO_Init+0x14c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001250:	4822      	ldr	r0, [pc, #136]	; (80012dc <MX_GPIO_Init+0x150>)
 8001252:	f001 f8dd 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	4821      	ldr	r0, [pc, #132]	; (80012e0 <MX_GPIO_Init+0x154>)
 800125c:	f001 f8d8 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001266:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800126a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 031c 	add.w	r3, r7, #28
 8001274:	4619      	mov	r1, r3
 8001276:	481b      	ldr	r0, [pc, #108]	; (80012e4 <MX_GPIO_Init+0x158>)
 8001278:	f000 ff1e 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800127c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	4811      	ldr	r0, [pc, #68]	; (80012dc <MX_GPIO_Init+0x150>)
 8001296:	f000 ff0f 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800129a:	2340      	movs	r3, #64	; 0x40
 800129c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <MX_GPIO_Init+0x154>)
 80012b2:	f000 ff01 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_GPIO_Init+0x154>)
 80012ca:	f000 fef5 	bl	80020b8 <HAL_GPIO_Init>

}
 80012ce:	bf00      	nop
 80012d0:	3730      	adds	r7, #48	; 0x30
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40020800 	.word	0x40020800

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
}
 80012ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <Error_Handler+0x8>
	...

080012f4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint32_t line, uint32_t x, uint32_t y)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number */
     sprintf(buffer_uart, "Error en la funcion de la linea %ld: deberia retornar %lX, en cambio retorna %lX\r\n", (line - 3u), y, x);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	1eda      	subs	r2, r3, #3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4909      	ldr	r1, [pc, #36]	; (8001330 <assert_failed+0x3c>)
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <assert_failed+0x40>)
 800130e:	f002 fd43 	bl	8003d98 <siprintf>
     HAL_UART_Transmit( &huart3, (uint8_t *)buffer_uart, (uint16_t) strlen((char *)buffer_uart), 10u );
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <assert_failed+0x40>)
 8001314:	f7fe ffae 	bl	8000274 <strlen>
 8001318:	4603      	mov	r3, r0
 800131a:	b29a      	uxth	r2, r3
 800131c:	230a      	movs	r3, #10
 800131e:	4905      	ldr	r1, [pc, #20]	; (8001334 <assert_failed+0x40>)
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <assert_failed+0x44>)
 8001322:	f001 fe90 	bl	8003046 <HAL_UART_Transmit>
  /* USER CODE END 6 */
}
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	0800482c 	.word	0x0800482c
 8001334:	20000940 	.word	0x20000940
 8001338:	200003f0 	.word	0x200003f0

0800133c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <HAL_MspInit+0x4c>)
 800134c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001350:	6453      	str	r3, [r2, #68]	; 0x44
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <HAL_MspInit+0x4c>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_MspInit+0x4c>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_MspInit+0x4c>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	; 0x38
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a55      	ldr	r2, [pc, #340]	; (8001500 <HAL_ETH_MspInit+0x174>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	f040 80a4 	bne.w	80014f8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b50      	ldr	r3, [pc, #320]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c8:	623b      	str	r3, [r7, #32]
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	4b4c      	ldr	r3, [pc, #304]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a4b      	ldr	r2, [pc, #300]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b49      	ldr	r3, [pc, #292]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
 80013ec:	4b45      	ldr	r3, [pc, #276]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f0:	4a44      	ldr	r2, [pc, #272]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013f6:	6313      	str	r3, [r2, #48]	; 0x30
 80013f8:	4b42      	ldr	r3, [pc, #264]	; (8001504 <HAL_ETH_MspInit+0x178>)
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	4b3e      	ldr	r3, [pc, #248]	; (8001504 <HAL_ETH_MspInit+0x178>)
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <HAL_ETH_MspInit+0x178>)
 800140e:	f043 0304 	orr.w	r3, r3, #4
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_ETH_MspInit+0x178>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	4b37      	ldr	r3, [pc, #220]	; (8001504 <HAL_ETH_MspInit+0x178>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a36      	ldr	r2, [pc, #216]	; (8001504 <HAL_ETH_MspInit+0x178>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b34      	ldr	r3, [pc, #208]	; (8001504 <HAL_ETH_MspInit+0x178>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_ETH_MspInit+0x178>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <HAL_ETH_MspInit+0x178>)
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	6313      	str	r3, [r2, #48]	; 0x30
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_ETH_MspInit+0x178>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <HAL_ETH_MspInit+0x178>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4a28      	ldr	r2, [pc, #160]	; (8001504 <HAL_ETH_MspInit+0x178>)
 8001462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001466:	6313      	str	r3, [r2, #48]	; 0x30
 8001468:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_ETH_MspInit+0x178>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001474:	2332      	movs	r3, #50	; 0x32
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001484:	230b      	movs	r3, #11
 8001486:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	481e      	ldr	r0, [pc, #120]	; (8001508 <HAL_ETH_MspInit+0x17c>)
 8001490:	f000 fe12 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001494:	2386      	movs	r3, #134	; 0x86
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014a4:	230b      	movs	r3, #11
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4817      	ldr	r0, [pc, #92]	; (800150c <HAL_ETH_MspInit+0x180>)
 80014b0:	f000 fe02 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80014b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ba:	2302      	movs	r3, #2
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c2:	2303      	movs	r3, #3
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c6:	230b      	movs	r3, #11
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ce:	4619      	mov	r1, r3
 80014d0:	480f      	ldr	r0, [pc, #60]	; (8001510 <HAL_ETH_MspInit+0x184>)
 80014d2:	f000 fdf1 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014e8:	230b      	movs	r3, #11
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4808      	ldr	r0, [pc, #32]	; (8001514 <HAL_ETH_MspInit+0x188>)
 80014f4:	f000 fde0 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3738      	adds	r7, #56	; 0x38
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40028000 	.word	0x40028000
 8001504:	40023800 	.word	0x40023800
 8001508:	40020800 	.word	0x40020800
 800150c:	40020000 	.word	0x40020000
 8001510:	40020400 	.word	0x40020400
 8001514:	40021800 	.word	0x40021800

08001518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_UART_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12c      	bne.n	8001594 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_UART_MspInit+0x88>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_UART_MspInit+0x88>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_UART_MspInit+0x88>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001584:	2307      	movs	r3, #7
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_UART_MspInit+0x8c>)
 8001590:	f000 fd92 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	3728      	adds	r7, #40	; 0x28
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40004800 	.word	0x40004800
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020c00 	.word	0x40020c00

080015a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c8:	d13f      	bne.n	800164a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_PCD_MspInit+0xac>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_PCD_MspInit+0xac>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_PCD_MspInit+0xac>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015f8:	230a      	movs	r3, #10
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4815      	ldr	r0, [pc, #84]	; (8001658 <HAL_PCD_MspInit+0xb0>)
 8001604:	f000 fd58 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800160e:	2300      	movs	r3, #0
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	480e      	ldr	r0, [pc, #56]	; (8001658 <HAL_PCD_MspInit+0xb0>)
 800161e:	f000 fd4b 	bl	80020b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162c:	6353      	str	r3, [r2, #52]	; 0x34
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800163c:	6453      	str	r3, [r2, #68]	; 0x44
 800163e:	4b05      	ldr	r3, [pc, #20]	; (8001654 <HAL_PCD_MspInit+0xac>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3728      	adds	r7, #40	; 0x28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40020000 	.word	0x40020000

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a8:	f000 f8c8 	bl	800183c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <_sbrk+0x5c>)
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <_sbrk+0x60>)
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <_sbrk+0x64>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	; (8001718 <_sbrk+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d207      	bcs.n	80016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e0:	f002 fb28 	bl	8003d34 <__errno>
 80016e4:	4603      	mov	r3, r0
 80016e6:	220c      	movs	r2, #12
 80016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ee:	e009      	b.n	8001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a05      	ldr	r2, [pc, #20]	; (8001714 <_sbrk+0x64>)
 8001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20030000 	.word	0x20030000
 8001710:	00000400 	.word	0x00000400
 8001714:	20000a88 	.word	0x20000a88
 8001718:	20000aa0 	.word	0x20000aa0

0800171c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  nop
 8001740:	bf00      	nop
  nop
 8001742:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001760:	4c0b      	ldr	r4, [pc, #44]	; (8001790 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800176e:	f7ff ffd5 	bl	800171c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f002 fae5 	bl	8003d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7ff f92b 	bl	80009d0 <main>
  bx  lr    
 800177a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800177c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	200001ac 	.word	0x200001ac
  ldr r2, =_sidata
 8001788:	080048dc 	.word	0x080048dc
  ldr r2, =_sbss
 800178c:	200001ac 	.word	0x200001ac
  ldr r4, =_ebss
 8001790:	20000aa0 	.word	0x20000aa0

08001794 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <HAL_Init+0x40>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017a8:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <HAL_Init+0x40>)
 80017ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <HAL_Init+0x40>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c0:	2003      	movs	r0, #3
 80017c2:	f000 f931 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f000 f808 	bl	80017dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017cc:	f7ff fdb6 	bl	800133c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00

080017dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_InitTick+0x54>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_InitTick+0x58>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4619      	mov	r1, r3
 80017ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f93b 	bl	8001a76 <HAL_SYSTICK_Config>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e00e      	b.n	8001828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d80a      	bhi.n	8001826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001818:	f000 f911 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <HAL_InitTick+0x5c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	e000      	b.n	8001828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000013c 	.word	0x2000013c
 8001834:	20000144 	.word	0x20000144
 8001838:	20000140 	.word	0x20000140

0800183c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_IncTick+0x20>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_IncTick+0x24>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4413      	add	r3, r2
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <HAL_IncTick+0x24>)
 800184e:	6013      	str	r3, [r2, #0]
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000144 	.word	0x20000144
 8001860:	20000a8c 	.word	0x20000a8c

08001864 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  return uwTick;
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <HAL_GetTick+0x14>)
 800186a:	681b      	ldr	r3, [r3, #0]
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000a8c 	.word	0x20000a8c

0800187c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff ffee 	bl	8001864 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001894:	d005      	beq.n	80018a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <HAL_Delay+0x44>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018a2:	bf00      	nop
 80018a4:	f7ff ffde 	bl	8001864 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d8f7      	bhi.n	80018a4 <HAL_Delay+0x28>
  {
  }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000144 	.word	0x20000144

080018c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e0:	4013      	ands	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018f6:	4a04      	ldr	r2, [pc, #16]	; (8001908 <__NVIC_SetPriorityGrouping+0x44>)
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	60d3      	str	r3, [r2, #12]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <__NVIC_GetPriorityGrouping+0x18>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	f003 0307 	and.w	r3, r3, #7
}
 800191a:	4618      	mov	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a08:	f7ff ff8e 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff47 	bl	80018c4 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff5c 	bl	800190c <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff8e 	bl	800197c <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff5d 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ffb0 	bl	80019e4 <SysTick_Config>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e06c      	b.n	8001b7c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d106      	bne.n	8001aba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2223      	movs	r2, #35	; 0x23
 8001ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff fc69 	bl	800138c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_ETH_Init+0xf4>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_ETH_Init+0xf4>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <HAL_ETH_Init+0xf4>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <HAL_ETH_Init+0xf8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4a2b      	ldr	r2, [pc, #172]	; (8001b88 <HAL_ETH_Init+0xf8>)
 8001adc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ae0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <HAL_ETH_Init+0xf8>)
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4927      	ldr	r1, [pc, #156]	; (8001b88 <HAL_ETH_Init+0xf8>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <HAL_ETH_Init+0xf8>)
 8001af2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b0c:	f7ff feaa 	bl	8001864 <HAL_GetTick>
 8001b10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b12:	e011      	b.n	8001b38 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b14:	f7ff fea6 	bl	8001864 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b22:	d909      	bls.n	8001b38 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2204      	movs	r2, #4
 8001b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	22e0      	movs	r2, #224	; 0xe0
 8001b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e021      	b.n	8001b7c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1e4      	bne.n	8001b14 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f944 	bl	8001dd8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f9eb 	bl	8001f2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fa41 	bl	8001fde <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	461a      	mov	r2, r3
 8001b62:	2100      	movs	r1, #0
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f9a9 	bl	8001ebc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2210      	movs	r2, #16
 8001b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40013800 	.word	0x40013800

08001b8c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <ETH_SetMACConfig+0x134>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	7c1b      	ldrb	r3, [r3, #16]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <ETH_SetMACConfig+0x28>
 8001bae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bb2:	e000      	b.n	8001bb6 <ETH_SetMACConfig+0x2a>
 8001bb4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	7c5b      	ldrb	r3, [r3, #17]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d102      	bne.n	8001bc4 <ETH_SetMACConfig+0x38>
 8001bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bc2:	e000      	b.n	8001bc6 <ETH_SetMACConfig+0x3a>
 8001bc4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001bc6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001bcc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	7fdb      	ldrb	r3, [r3, #31]
 8001bd2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001bd4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001bda:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	7f92      	ldrb	r2, [r2, #30]
 8001be0:	2a00      	cmp	r2, #0
 8001be2:	d102      	bne.n	8001bea <ETH_SetMACConfig+0x5e>
 8001be4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be8:	e000      	b.n	8001bec <ETH_SetMACConfig+0x60>
 8001bea:	2200      	movs	r2, #0
                        macconf->Speed |
 8001bec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	7f1b      	ldrb	r3, [r3, #28]
 8001bf2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001bf4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001bfa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	791b      	ldrb	r3, [r3, #4]
 8001c00:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001c02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001c0a:	2a00      	cmp	r2, #0
 8001c0c:	d102      	bne.n	8001c14 <ETH_SetMACConfig+0x88>
 8001c0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c12:	e000      	b.n	8001c16 <ETH_SetMACConfig+0x8a>
 8001c14:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001c16:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	7bdb      	ldrb	r3, [r3, #15]
 8001c1c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001c1e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001c24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001c2c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c46:	2001      	movs	r0, #1
 8001c48:	f7ff fe18 	bl	800187c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c62:	4013      	ands	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c72:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001c78:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001c80:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001c88:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c90:	4313      	orrs	r3, r2
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ca8:	2001      	movs	r0, #1
 8001caa:	f7ff fde7 	bl	800187c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	619a      	str	r2, [r3, #24]
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	ff20810f 	.word	0xff20810f

08001cc4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <ETH_SetDMAConfig+0x110>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	7b1b      	ldrb	r3, [r3, #12]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d102      	bne.n	8001cf0 <ETH_SetDMAConfig+0x2c>
 8001cea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001cee:	e000      	b.n	8001cf2 <ETH_SetDMAConfig+0x2e>
 8001cf0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	7b5b      	ldrb	r3, [r3, #13]
 8001cf6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001cf8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	7f52      	ldrb	r2, [r2, #29]
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d102      	bne.n	8001d08 <ETH_SetDMAConfig+0x44>
 8001d02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d06:	e000      	b.n	8001d0a <ETH_SetDMAConfig+0x46>
 8001d08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001d0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	7b9b      	ldrb	r3, [r3, #14]
 8001d10:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001d12:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001d18:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	7f1b      	ldrb	r3, [r3, #28]
 8001d1e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001d20:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	7f9b      	ldrb	r3, [r3, #30]
 8001d26:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001d28:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001d2e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d36:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d48:	461a      	mov	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff fd8e 	bl	800187c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	791b      	ldrb	r3, [r3, #4]
 8001d72:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d78:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001d7e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001d84:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d8c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001d8e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001d96:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d9c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001da6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001daa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fd5f 	bl	800187c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	f8de3f23 	.word	0xf8de3f23

08001dd8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0a6      	sub	sp, #152	; 0x98
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001de0:	2301      	movs	r3, #1
 8001de2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001dec:	2300      	movs	r3, #0
 8001dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001df6:	2301      	movs	r3, #1
 8001df8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e14:	2300      	movs	r3, #0
 8001e16:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e44:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e50:	4619      	mov	r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fe9a 	bl	8001b8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001e66:	2301      	movs	r3, #1
 8001e68:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e8c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e92:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e98:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	4619      	mov	r1, r3
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ff08 	bl	8001cc4 <ETH_SetDMAConfig>
}
 8001eb4:	bf00      	nop
 8001eb6:	3798      	adds	r7, #152	; 0x98
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3305      	adds	r3, #5
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	3204      	adds	r2, #4
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <ETH_MACAddressConfig+0x68>)
 8001ede:	4413      	add	r3, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3303      	adds	r3, #3
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	061a      	lsls	r2, r3, #24
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	041b      	lsls	r3, r3, #16
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3301      	adds	r3, #1
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	4313      	orrs	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <ETH_MACAddressConfig+0x6c>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	6013      	str	r3, [r2, #0]
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40028040 	.word	0x40028040
 8001f28:	40028044 	.word	0x40028044

08001f2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e03e      	b.n	8001fb8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68d9      	ldr	r1, [r3, #12]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	4613      	mov	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	440b      	add	r3, r1
 8001f4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f64:	68b9      	ldr	r1, [r7, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	3206      	adds	r2, #6
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d80c      	bhi.n	8001f9c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68d9      	ldr	r1, [r3, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	461a      	mov	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	e004      	b.n	8001fa6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d9bd      	bls.n	8001f3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd0:	611a      	str	r2, [r3, #16]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e046      	b.n	800207a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6919      	ldr	r1, [r3, #16]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2200      	movs	r2, #0
 800201a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002028:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002030:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	3212      	adds	r2, #18
 8002046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d80c      	bhi.n	800206a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6919      	ldr	r1, [r3, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	440b      	add	r3, r1
 8002062:	461a      	mov	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	e004      	b.n	8002074 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3301      	adds	r3, #1
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d9b5      	bls.n	8001fec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020aa:	60da      	str	r2, [r3, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e177      	b.n	80023c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 8166 	bne.w	80023be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d005      	beq.n	800210a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	2b02      	cmp	r3, #2
 8002108:	d130      	bne.n	800216c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0201 	and.w	r2, r3, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b03      	cmp	r3, #3
 8002176:	d017      	beq.n	80021a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d123      	bne.n	80021fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	69b9      	ldr	r1, [r7, #24]
 80021f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80c0 	beq.w	80023be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_GPIO_Init+0x324>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225a:	4a61      	ldr	r2, [pc, #388]	; (80023e0 <HAL_GPIO_Init+0x328>)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a58      	ldr	r2, [pc, #352]	; (80023e4 <HAL_GPIO_Init+0x32c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d037      	beq.n	80022f6 <HAL_GPIO_Init+0x23e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a57      	ldr	r2, [pc, #348]	; (80023e8 <HAL_GPIO_Init+0x330>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d031      	beq.n	80022f2 <HAL_GPIO_Init+0x23a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a56      	ldr	r2, [pc, #344]	; (80023ec <HAL_GPIO_Init+0x334>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02b      	beq.n	80022ee <HAL_GPIO_Init+0x236>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a55      	ldr	r2, [pc, #340]	; (80023f0 <HAL_GPIO_Init+0x338>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d025      	beq.n	80022ea <HAL_GPIO_Init+0x232>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a54      	ldr	r2, [pc, #336]	; (80023f4 <HAL_GPIO_Init+0x33c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01f      	beq.n	80022e6 <HAL_GPIO_Init+0x22e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a53      	ldr	r2, [pc, #332]	; (80023f8 <HAL_GPIO_Init+0x340>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x22a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a52      	ldr	r2, [pc, #328]	; (80023fc <HAL_GPIO_Init+0x344>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x226>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a51      	ldr	r2, [pc, #324]	; (8002400 <HAL_GPIO_Init+0x348>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x222>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a50      	ldr	r2, [pc, #320]	; (8002404 <HAL_GPIO_Init+0x34c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x21e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4f      	ldr	r2, [pc, #316]	; (8002408 <HAL_GPIO_Init+0x350>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x21a>
 80022ce:	2309      	movs	r3, #9
 80022d0:	e012      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022d2:	230a      	movs	r3, #10
 80022d4:	e010      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022d6:	2308      	movs	r3, #8
 80022d8:	e00e      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022da:	2307      	movs	r3, #7
 80022dc:	e00c      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022de:	2306      	movs	r3, #6
 80022e0:	e00a      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022e2:	2305      	movs	r3, #5
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022e6:	2304      	movs	r3, #4
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x240>
 80022f6:	2300      	movs	r3, #0
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f002 0203 	and.w	r2, r2, #3
 80022fe:	0092      	lsls	r2, r2, #2
 8002300:	4093      	lsls	r3, r2
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002308:	4935      	ldr	r1, [pc, #212]	; (80023e0 <HAL_GPIO_Init+0x328>)
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3302      	adds	r3, #2
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_GPIO_Init+0x354>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233a:	4a34      	ldr	r2, [pc, #208]	; (800240c <HAL_GPIO_Init+0x354>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_GPIO_Init+0x354>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002364:	4a29      	ldr	r2, [pc, #164]	; (800240c <HAL_GPIO_Init+0x354>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236a:	4b28      	ldr	r3, [pc, #160]	; (800240c <HAL_GPIO_Init+0x354>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800238e:	4a1f      	ldr	r2, [pc, #124]	; (800240c <HAL_GPIO_Init+0x354>)
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <HAL_GPIO_Init+0x354>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b8:	4a14      	ldr	r2, [pc, #80]	; (800240c <HAL_GPIO_Init+0x354>)
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61fb      	str	r3, [r7, #28]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	2b0f      	cmp	r3, #15
 80023c8:	f67f ae84 	bls.w	80020d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3724      	adds	r7, #36	; 0x24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40021400 	.word	0x40021400
 80023fc:	40021800 	.word	0x40021800
 8002400:	40021c00 	.word	0x40021c00
 8002404:	40022000 	.word	0x40022000
 8002408:	40022400 	.word	0x40022400
 800240c:	40013c00 	.word	0x40013c00

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800242c:	e003      	b.n	8002436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	619a      	str	r2, [r3, #24]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002442:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002444:	b08f      	sub	sp, #60	; 0x3c
 8002446:	af0a      	add	r7, sp, #40	; 0x28
 8002448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e10f      	b.n	8002674 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff f89a 	bl	80015a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2203      	movs	r2, #3
 8002478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d102      	bne.n	800248e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f001 f9ad 	bl	80037f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	603b      	str	r3, [r7, #0]
 800249e:	687e      	ldr	r6, [r7, #4]
 80024a0:	466d      	mov	r5, sp
 80024a2:	f106 0410 	add.w	r4, r6, #16
 80024a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80024b6:	1d33      	adds	r3, r6, #4
 80024b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ba:	6838      	ldr	r0, [r7, #0]
 80024bc:	f001 f938 	bl	8003730 <USB_CoreInit>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e0d0      	b.n	8002674 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 f99b 	bl	8003814 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
 80024e2:	e04a      	b.n	800257a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	333d      	adds	r3, #61	; 0x3d
 80024f4:	2201      	movs	r2, #1
 80024f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4413      	add	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	333c      	adds	r3, #60	; 0x3c
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800250c:	7bfa      	ldrb	r2, [r7, #15]
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	b298      	uxth	r0, r3
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3344      	adds	r3, #68	; 0x44
 8002520:	4602      	mov	r2, r0
 8002522:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3340      	adds	r3, #64	; 0x40
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3348      	adds	r3, #72	; 0x48
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	334c      	adds	r3, #76	; 0x4c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3354      	adds	r3, #84	; 0x54
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	3301      	adds	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	7bfa      	ldrb	r2, [r7, #15]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d3af      	bcc.n	80024e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e044      	b.n	8002614 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025b2:	7bfa      	ldrb	r2, [r7, #15]
 80025b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	3301      	adds	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	7bfa      	ldrb	r2, [r7, #15]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	d3b5      	bcc.n	800258a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	687e      	ldr	r6, [r7, #4]
 8002626:	466d      	mov	r5, sp
 8002628:	f106 0410 	add.w	r4, r6, #16
 800262c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002630:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002632:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002634:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002638:	e885 0003 	stmia.w	r5, {r0, r1}
 800263c:	1d33      	adds	r3, r6, #4
 800263e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002640:	6838      	ldr	r0, [r7, #0]
 8002642:	f001 f933 	bl	80038ac <USB_DevInit>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e00d      	b.n	8002674 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fafe 	bl	8003c6e <USB_DevDisconnect>

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800267c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e267      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d075      	beq.n	8002786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800269a:	4b88      	ldr	r3, [pc, #544]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	d00c      	beq.n	80026c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a6:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d112      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b2:	4b82      	ldr	r3, [pc, #520]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026be:	d10b      	bne.n	80026d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c0:	4b7e      	ldr	r3, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d05b      	beq.n	8002784 <HAL_RCC_OscConfig+0x108>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d157      	bne.n	8002784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e242      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e0:	d106      	bne.n	80026f0 <HAL_RCC_OscConfig+0x74>
 80026e2:	4b76      	ldr	r3, [pc, #472]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a75      	ldr	r2, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	e01d      	b.n	800272c <HAL_RCC_OscConfig+0xb0>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f8:	d10c      	bne.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026fa:	4b70      	ldr	r3, [pc, #448]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a6f      	ldr	r2, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002700:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b6d      	ldr	r3, [pc, #436]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a6c      	ldr	r2, [pc, #432]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e00b      	b.n	800272c <HAL_RCC_OscConfig+0xb0>
 8002714:	4b69      	ldr	r3, [pc, #420]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a68      	ldr	r2, [pc, #416]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800271a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271e:	6013      	str	r3, [r2, #0]
 8002720:	4b66      	ldr	r3, [pc, #408]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a65      	ldr	r2, [pc, #404]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002726:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800272a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff f896 	bl	8001864 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800273c:	f7ff f892 	bl	8001864 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	; 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e207      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b5b      	ldr	r3, [pc, #364]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0xc0>
 800275a:	e014      	b.n	8002786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7ff f882 	bl	8001864 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002764:	f7ff f87e 	bl	8001864 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e1f3      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002776:	4b51      	ldr	r3, [pc, #324]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0xe8>
 8002782:	e000      	b.n	8002786 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d063      	beq.n	800285a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002792:	4b4a      	ldr	r3, [pc, #296]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d11c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027aa:	4b44      	ldr	r3, [pc, #272]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d116      	bne.n	80027e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x152>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e1c7      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4937      	ldr	r1, [pc, #220]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027e2:	e03a      	b.n	800285a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ec:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <HAL_RCC_OscConfig+0x244>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7ff f837 	bl	8001864 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fa:	f7ff f833 	bl	8001864 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e1a8      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280c:	4b2b      	ldr	r3, [pc, #172]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b28      	ldr	r3, [pc, #160]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	4925      	ldr	r1, [pc, #148]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]
 800282c:	e015      	b.n	800285a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0x244>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7ff f816 	bl	8001864 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800283c:	f7ff f812 	bl	8001864 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e187      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284e:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d036      	beq.n	80028d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d016      	beq.n	800289c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_RCC_OscConfig+0x248>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002874:	f7fe fff6 	bl	8001864 <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe fff2 	bl	8001864 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e167      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_OscConfig+0x240>)
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x200>
 800289a:	e01b      	b.n	80028d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_OscConfig+0x248>)
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a2:	f7fe ffdf 	bl	8001864 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a8:	e00e      	b.n	80028c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028aa:	f7fe ffdb 	bl	8001864 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d907      	bls.n	80028c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e150      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470000 	.word	0x42470000
 80028c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c8:	4b88      	ldr	r3, [pc, #544]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80028ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1ea      	bne.n	80028aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8097 	beq.w	8002a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e6:	4b81      	ldr	r3, [pc, #516]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	4b7d      	ldr	r3, [pc, #500]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a7c      	ldr	r2, [pc, #496]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b7a      	ldr	r3, [pc, #488]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290e:	2301      	movs	r3, #1
 8002910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b77      	ldr	r3, [pc, #476]	; (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291e:	4b74      	ldr	r3, [pc, #464]	; (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a73      	ldr	r2, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe ff9b 	bl	8001864 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fe ff97 	bl	8001864 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e10c      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <HAL_RCC_OscConfig+0x474>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d106      	bne.n	8002966 <HAL_RCC_OscConfig+0x2ea>
 8002958:	4b64      	ldr	r3, [pc, #400]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295c:	4a63      	ldr	r2, [pc, #396]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6713      	str	r3, [r2, #112]	; 0x70
 8002964:	e01c      	b.n	80029a0 <HAL_RCC_OscConfig+0x324>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b05      	cmp	r3, #5
 800296c:	d10c      	bne.n	8002988 <HAL_RCC_OscConfig+0x30c>
 800296e:	4b5f      	ldr	r3, [pc, #380]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	4a5e      	ldr	r2, [pc, #376]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002974:	f043 0304 	orr.w	r3, r3, #4
 8002978:	6713      	str	r3, [r2, #112]	; 0x70
 800297a:	4b5c      	ldr	r3, [pc, #368]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800297c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297e:	4a5b      	ldr	r2, [pc, #364]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6713      	str	r3, [r2, #112]	; 0x70
 8002986:	e00b      	b.n	80029a0 <HAL_RCC_OscConfig+0x324>
 8002988:	4b58      	ldr	r3, [pc, #352]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298c:	4a57      	ldr	r2, [pc, #348]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	; 0x70
 8002994:	4b55      	ldr	r3, [pc, #340]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	4a54      	ldr	r2, [pc, #336]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 800299a:	f023 0304 	bic.w	r3, r3, #4
 800299e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d015      	beq.n	80029d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a8:	f7fe ff5c 	bl	8001864 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b0:	f7fe ff58 	bl	8001864 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e0cb      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c6:	4b49      	ldr	r3, [pc, #292]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0ee      	beq.n	80029b0 <HAL_RCC_OscConfig+0x334>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fe ff46 	bl	8001864 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe ff42 	bl	8001864 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0b5      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f2:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1ee      	bne.n	80029dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a04:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	4a38      	ldr	r2, [pc, #224]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 80a1 	beq.w	8002b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a1a:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d05c      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d141      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe ff16 	bl	8001864 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe ff12 	bl	8001864 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e087      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b27      	ldr	r3, [pc, #156]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	019b      	lsls	r3, r3, #6
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	3b01      	subs	r3, #1
 8002a74:	041b      	lsls	r3, r3, #16
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	491b      	ldr	r1, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	4b1b      	ldr	r3, [pc, #108]	; (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8a:	f7fe feeb 	bl	8001864 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a92:	f7fe fee7 	bl	8001864 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e05c      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa4:	4b11      	ldr	r3, [pc, #68]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCC_OscConfig+0x416>
 8002ab0:	e054      	b.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCC_OscConfig+0x478>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fed4 	bl	8001864 <HAL_GetTick>
 8002abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fed0 	bl	8001864 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e045      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <HAL_RCC_OscConfig+0x470>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x444>
 8002ade:	e03d      	b.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e038      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000
 8002af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_RCC_OscConfig+0x4ec>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d028      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d121      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d11a      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b28:	4013      	ands	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d111      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3e:	085b      	lsrs	r3, r3, #1
 8002b40:	3b01      	subs	r3, #1
 8002b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d107      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3718      	adds	r7, #24
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800

08002b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0cc      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d90c      	bls.n	8002ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0b8      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d020      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc0:	4b59      	ldr	r3, [pc, #356]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4a58      	ldr	r2, [pc, #352]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd8:	4b53      	ldr	r3, [pc, #332]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4a52      	ldr	r2, [pc, #328]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be4:	4b50      	ldr	r3, [pc, #320]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	494d      	ldr	r1, [pc, #308]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d044      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c0a:	4b47      	ldr	r3, [pc, #284]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d119      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e07f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b3f      	ldr	r3, [pc, #252]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e067      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4934      	ldr	r1, [pc, #208]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fe02 	bl	8001864 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fdfe 	bl	8001864 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e04f      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2b      	ldr	r3, [pc, #172]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b25      	ldr	r3, [pc, #148]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d20c      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e032      	b.n	8002d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d008      	beq.n	8002cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc0:	4b19      	ldr	r3, [pc, #100]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4916      	ldr	r1, [pc, #88]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	490e      	ldr	r1, [pc, #56]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cf2:	f000 f821 	bl	8002d38 <HAL_RCC_GetSysClockFreq>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	490a      	ldr	r1, [pc, #40]	; (8002d2c <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <HAL_RCC_ClockConfig+0x1c8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fd62 	bl	80017dc <HAL_InitTick>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023c00 	.word	0x40023c00
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	08004880 	.word	0x08004880
 8002d30:	2000013c 	.word	0x2000013c
 8002d34:	20000140 	.word	0x20000140

08002d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d3c:	b094      	sub	sp, #80	; 0x50
 8002d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d40:	2300      	movs	r3, #0
 8002d42:	647b      	str	r3, [r7, #68]	; 0x44
 8002d44:	2300      	movs	r3, #0
 8002d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d48:	2300      	movs	r3, #0
 8002d4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d50:	4b79      	ldr	r3, [pc, #484]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 030c 	and.w	r3, r3, #12
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d00d      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x40>
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	f200 80e1 	bhi.w	8002f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d002      	beq.n	8002d6c <HAL_RCC_GetSysClockFreq+0x34>
 8002d66:	2b04      	cmp	r3, #4
 8002d68:	d003      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d6a:	e0db      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d6c:	4b73      	ldr	r3, [pc, #460]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d6e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d70:	e0db      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d72:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d76:	e0d8      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d78:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d80:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d82:	4b6d      	ldr	r3, [pc, #436]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8e:	4b6a      	ldr	r3, [pc, #424]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	099b      	lsrs	r3, r3, #6
 8002d94:	2200      	movs	r2, #0
 8002d96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da0:	633b      	str	r3, [r7, #48]	; 0x30
 8002da2:	2300      	movs	r3, #0
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
 8002da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002daa:	4622      	mov	r2, r4
 8002dac:	462b      	mov	r3, r5
 8002dae:	f04f 0000 	mov.w	r0, #0
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	0159      	lsls	r1, r3, #5
 8002db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dbc:	0150      	lsls	r0, r2, #5
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4621      	mov	r1, r4
 8002dc4:	1a51      	subs	r1, r2, r1
 8002dc6:	6139      	str	r1, [r7, #16]
 8002dc8:	4629      	mov	r1, r5
 8002dca:	eb63 0301 	sbc.w	r3, r3, r1
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ddc:	4659      	mov	r1, fp
 8002dde:	018b      	lsls	r3, r1, #6
 8002de0:	4651      	mov	r1, sl
 8002de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002de6:	4651      	mov	r1, sl
 8002de8:	018a      	lsls	r2, r1, #6
 8002dea:	4651      	mov	r1, sl
 8002dec:	ebb2 0801 	subs.w	r8, r2, r1
 8002df0:	4659      	mov	r1, fp
 8002df2:	eb63 0901 	sbc.w	r9, r3, r1
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e0a:	4690      	mov	r8, r2
 8002e0c:	4699      	mov	r9, r3
 8002e0e:	4623      	mov	r3, r4
 8002e10:	eb18 0303 	adds.w	r3, r8, r3
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	462b      	mov	r3, r5
 8002e18:	eb49 0303 	adc.w	r3, r9, r3
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	024b      	lsls	r3, r1, #9
 8002e2e:	4621      	mov	r1, r4
 8002e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e34:	4621      	mov	r1, r4
 8002e36:	024a      	lsls	r2, r1, #9
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3e:	2200      	movs	r2, #0
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e48:	f7fd fa72 	bl	8000330 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4613      	mov	r3, r2
 8002e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e54:	e058      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	099b      	lsrs	r3, r3, #6
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	4611      	mov	r1, r2
 8002e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e66:	623b      	str	r3, [r7, #32]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	f04f 0000 	mov.w	r0, #0
 8002e78:	f04f 0100 	mov.w	r1, #0
 8002e7c:	0159      	lsls	r1, r3, #5
 8002e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e82:	0150      	lsls	r0, r2, #5
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4641      	mov	r1, r8
 8002e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e8e:	4649      	mov	r1, r9
 8002e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e94:	f04f 0200 	mov.w	r2, #0
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8002eac:	eb63 050b 	sbc.w	r5, r3, fp
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	00eb      	lsls	r3, r5, #3
 8002eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ebe:	00e2      	lsls	r2, r4, #3
 8002ec0:	4614      	mov	r4, r2
 8002ec2:	461d      	mov	r5, r3
 8002ec4:	4643      	mov	r3, r8
 8002ec6:	18e3      	adds	r3, r4, r3
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	464b      	mov	r3, r9
 8002ecc:	eb45 0303 	adc.w	r3, r5, r3
 8002ed0:	607b      	str	r3, [r7, #4]
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ede:	4629      	mov	r1, r5
 8002ee0:	028b      	lsls	r3, r1, #10
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ee8:	4621      	mov	r1, r4
 8002eea:	028a      	lsls	r2, r1, #10
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
 8002ef6:	61fa      	str	r2, [r7, #28]
 8002ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002efc:	f7fd fa18 	bl	8000330 <__aeabi_uldivmod>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4613      	mov	r3, r2
 8002f06:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f08:	4b0b      	ldr	r3, [pc, #44]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	3301      	adds	r3, #1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f22:	e002      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3750      	adds	r7, #80	; 0x50
 8002f30:	46bd      	mov	sp, r7
 8002f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f36:	bf00      	nop
 8002f38:	40023800 	.word	0x40023800
 8002f3c:	00f42400 	.word	0x00f42400
 8002f40:	007a1200 	.word	0x007a1200

08002f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	2000013c 	.word	0x2000013c

08002f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f60:	f7ff fff0 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	0a9b      	lsrs	r3, r3, #10
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4903      	ldr	r1, [pc, #12]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	08004890 	.word	0x08004890

08002f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f88:	f7ff ffdc 	bl	8002f44 <HAL_RCC_GetHCLKFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0b5b      	lsrs	r3, r3, #13
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	4903      	ldr	r1, [pc, #12]	; (8002fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	08004890 	.word	0x08004890

08002fac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e03f      	b.n	800303e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe faa0 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2224      	movs	r2, #36	; 0x24
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 f929 	bl	8003248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b08a      	sub	sp, #40	; 0x28
 800304a:	af02      	add	r7, sp, #8
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b20      	cmp	r3, #32
 8003064:	d17c      	bne.n	8003160 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_UART_Transmit+0x2c>
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e075      	b.n	8003162 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_UART_Transmit+0x3e>
 8003080:	2302      	movs	r3, #2
 8003082:	e06e      	b.n	8003162 <HAL_UART_Transmit+0x11c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2221      	movs	r2, #33	; 0x21
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309a:	f7fe fbe3 	bl	8001864 <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b4:	d108      	bne.n	80030c8 <HAL_UART_Transmit+0x82>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d104      	bne.n	80030c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	e003      	b.n	80030d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030d8:	e02a      	b.n	8003130 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	2180      	movs	r1, #128	; 0x80
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f840 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e036      	b.n	8003162 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10b      	bne.n	8003112 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	3302      	adds	r3, #2
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e007      	b.n	8003122 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1cf      	bne.n	80030da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2140      	movs	r1, #64	; 0x40
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f810 	bl	800316a <UART_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e006      	b.n	8003162 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b090      	sub	sp, #64	; 0x40
 800316e:	af00      	add	r7, sp, #0
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800317a:	e050      	b.n	800321e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003182:	d04c      	beq.n	800321e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003186:	2b00      	cmp	r3, #0
 8003188:	d007      	beq.n	800319a <UART_WaitOnFlagUntilTimeout+0x30>
 800318a:	f7fe fb6b 	bl	8001864 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003196:	429a      	cmp	r2, r3
 8003198:	d241      	bcs.n	800321e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	330c      	adds	r3, #12
 80031b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ba:	637a      	str	r2, [r7, #52]	; 0x34
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e5      	bne.n	800319a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	613b      	str	r3, [r7, #16]
   return(result);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3314      	adds	r3, #20
 80031ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ee:	623a      	str	r2, [r7, #32]
 80031f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	69f9      	ldr	r1, [r7, #28]
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e00f      	b.n	800323e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4013      	ands	r3, r2
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	bf0c      	ite	eq
 800322e:	2301      	moveq	r3, #1
 8003230:	2300      	movne	r3, #0
 8003232:	b2db      	uxtb	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	429a      	cmp	r2, r3
 800323a:	d09f      	beq.n	800317c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3740      	adds	r7, #64	; 0x40
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800324c:	b0c0      	sub	sp, #256	; 0x100
 800324e:	af00      	add	r7, sp, #0
 8003250:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	ea40 0301 	orr.w	r3, r0, r1
 8003270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	431a      	orrs	r2, r3
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032a0:	f021 010c 	bic.w	r1, r1, #12
 80032a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032ae:	430b      	orrs	r3, r1
 80032b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c2:	6999      	ldr	r1, [r3, #24]
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	ea40 0301 	orr.w	r3, r0, r1
 80032ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b8f      	ldr	r3, [pc, #572]	; (8003514 <UART_SetConfig+0x2cc>)
 80032d8:	429a      	cmp	r2, r3
 80032da:	d005      	beq.n	80032e8 <UART_SetConfig+0xa0>
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	4b8d      	ldr	r3, [pc, #564]	; (8003518 <UART_SetConfig+0x2d0>)
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d104      	bne.n	80032f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032e8:	f7ff fe4c 	bl	8002f84 <HAL_RCC_GetPCLK2Freq>
 80032ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032f0:	e003      	b.n	80032fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032f2:	f7ff fe33 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 80032f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003304:	f040 810c 	bne.w	8003520 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003312:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800331a:	4622      	mov	r2, r4
 800331c:	462b      	mov	r3, r5
 800331e:	1891      	adds	r1, r2, r2
 8003320:	65b9      	str	r1, [r7, #88]	; 0x58
 8003322:	415b      	adcs	r3, r3
 8003324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800332a:	4621      	mov	r1, r4
 800332c:	eb12 0801 	adds.w	r8, r2, r1
 8003330:	4629      	mov	r1, r5
 8003332:	eb43 0901 	adc.w	r9, r3, r1
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800334a:	4690      	mov	r8, r2
 800334c:	4699      	mov	r9, r3
 800334e:	4623      	mov	r3, r4
 8003350:	eb18 0303 	adds.w	r3, r8, r3
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003358:	462b      	mov	r3, r5
 800335a:	eb49 0303 	adc.w	r3, r9, r3
 800335e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800336e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003376:	460b      	mov	r3, r1
 8003378:	18db      	adds	r3, r3, r3
 800337a:	653b      	str	r3, [r7, #80]	; 0x50
 800337c:	4613      	mov	r3, r2
 800337e:	eb42 0303 	adc.w	r3, r2, r3
 8003382:	657b      	str	r3, [r7, #84]	; 0x54
 8003384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003388:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800338c:	f7fc ffd0 	bl	8000330 <__aeabi_uldivmod>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	4b61      	ldr	r3, [pc, #388]	; (800351c <UART_SetConfig+0x2d4>)
 8003396:	fba3 2302 	umull	r2, r3, r3, r2
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	011c      	lsls	r4, r3, #4
 800339e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a2:	2200      	movs	r2, #0
 80033a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033b0:	4642      	mov	r2, r8
 80033b2:	464b      	mov	r3, r9
 80033b4:	1891      	adds	r1, r2, r2
 80033b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80033b8:	415b      	adcs	r3, r3
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033c0:	4641      	mov	r1, r8
 80033c2:	eb12 0a01 	adds.w	sl, r2, r1
 80033c6:	4649      	mov	r1, r9
 80033c8:	eb43 0b01 	adc.w	fp, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e0:	4692      	mov	sl, r2
 80033e2:	469b      	mov	fp, r3
 80033e4:	4643      	mov	r3, r8
 80033e6:	eb1a 0303 	adds.w	r3, sl, r3
 80033ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033ee:	464b      	mov	r3, r9
 80033f0:	eb4b 0303 	adc.w	r3, fp, r3
 80033f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003404:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800340c:	460b      	mov	r3, r1
 800340e:	18db      	adds	r3, r3, r3
 8003410:	643b      	str	r3, [r7, #64]	; 0x40
 8003412:	4613      	mov	r3, r2
 8003414:	eb42 0303 	adc.w	r3, r2, r3
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
 800341a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800341e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003422:	f7fc ff85 	bl	8000330 <__aeabi_uldivmod>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4611      	mov	r1, r2
 800342c:	4b3b      	ldr	r3, [pc, #236]	; (800351c <UART_SetConfig+0x2d4>)
 800342e:	fba3 2301 	umull	r2, r3, r3, r1
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	2264      	movs	r2, #100	; 0x64
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	1acb      	subs	r3, r1, r3
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003442:	4b36      	ldr	r3, [pc, #216]	; (800351c <UART_SetConfig+0x2d4>)
 8003444:	fba3 2302 	umull	r2, r3, r3, r2
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003450:	441c      	add	r4, r3
 8003452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003456:	2200      	movs	r2, #0
 8003458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800345c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003460:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003464:	4642      	mov	r2, r8
 8003466:	464b      	mov	r3, r9
 8003468:	1891      	adds	r1, r2, r2
 800346a:	63b9      	str	r1, [r7, #56]	; 0x38
 800346c:	415b      	adcs	r3, r3
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003474:	4641      	mov	r1, r8
 8003476:	1851      	adds	r1, r2, r1
 8003478:	6339      	str	r1, [r7, #48]	; 0x30
 800347a:	4649      	mov	r1, r9
 800347c:	414b      	adcs	r3, r1
 800347e:	637b      	str	r3, [r7, #52]	; 0x34
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800348c:	4659      	mov	r1, fp
 800348e:	00cb      	lsls	r3, r1, #3
 8003490:	4651      	mov	r1, sl
 8003492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003496:	4651      	mov	r1, sl
 8003498:	00ca      	lsls	r2, r1, #3
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	4642      	mov	r2, r8
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034a8:	464b      	mov	r3, r9
 80034aa:	460a      	mov	r2, r1
 80034ac:	eb42 0303 	adc.w	r3, r2, r3
 80034b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034c8:	460b      	mov	r3, r1
 80034ca:	18db      	adds	r3, r3, r3
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	4613      	mov	r3, r2
 80034d0:	eb42 0303 	adc.w	r3, r2, r3
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034de:	f7fc ff27 	bl	8000330 <__aeabi_uldivmod>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4b0d      	ldr	r3, [pc, #52]	; (800351c <UART_SetConfig+0x2d4>)
 80034e8:	fba3 1302 	umull	r1, r3, r3, r2
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	2164      	movs	r1, #100	; 0x64
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	3332      	adds	r3, #50	; 0x32
 80034fa:	4a08      	ldr	r2, [pc, #32]	; (800351c <UART_SetConfig+0x2d4>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	f003 0207 	and.w	r2, r3, #7
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4422      	add	r2, r4
 800350e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003510:	e105      	b.n	800371e <UART_SetConfig+0x4d6>
 8003512:	bf00      	nop
 8003514:	40011000 	.word	0x40011000
 8003518:	40011400 	.word	0x40011400
 800351c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003524:	2200      	movs	r2, #0
 8003526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800352a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800352e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003532:	4642      	mov	r2, r8
 8003534:	464b      	mov	r3, r9
 8003536:	1891      	adds	r1, r2, r2
 8003538:	6239      	str	r1, [r7, #32]
 800353a:	415b      	adcs	r3, r3
 800353c:	627b      	str	r3, [r7, #36]	; 0x24
 800353e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003542:	4641      	mov	r1, r8
 8003544:	1854      	adds	r4, r2, r1
 8003546:	4649      	mov	r1, r9
 8003548:	eb43 0501 	adc.w	r5, r3, r1
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	f04f 0300 	mov.w	r3, #0
 8003554:	00eb      	lsls	r3, r5, #3
 8003556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800355a:	00e2      	lsls	r2, r4, #3
 800355c:	4614      	mov	r4, r2
 800355e:	461d      	mov	r5, r3
 8003560:	4643      	mov	r3, r8
 8003562:	18e3      	adds	r3, r4, r3
 8003564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003568:	464b      	mov	r3, r9
 800356a:	eb45 0303 	adc.w	r3, r5, r3
 800356e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800357e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800358e:	4629      	mov	r1, r5
 8003590:	008b      	lsls	r3, r1, #2
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003598:	4621      	mov	r1, r4
 800359a:	008a      	lsls	r2, r1, #2
 800359c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035a0:	f7fc fec6 	bl	8000330 <__aeabi_uldivmod>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4b60      	ldr	r3, [pc, #384]	; (800372c <UART_SetConfig+0x4e4>)
 80035aa:	fba3 2302 	umull	r2, r3, r3, r2
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	011c      	lsls	r4, r3, #4
 80035b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035c4:	4642      	mov	r2, r8
 80035c6:	464b      	mov	r3, r9
 80035c8:	1891      	adds	r1, r2, r2
 80035ca:	61b9      	str	r1, [r7, #24]
 80035cc:	415b      	adcs	r3, r3
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d4:	4641      	mov	r1, r8
 80035d6:	1851      	adds	r1, r2, r1
 80035d8:	6139      	str	r1, [r7, #16]
 80035da:	4649      	mov	r1, r9
 80035dc:	414b      	adcs	r3, r1
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035ec:	4659      	mov	r1, fp
 80035ee:	00cb      	lsls	r3, r1, #3
 80035f0:	4651      	mov	r1, sl
 80035f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f6:	4651      	mov	r1, sl
 80035f8:	00ca      	lsls	r2, r1, #3
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	4603      	mov	r3, r0
 8003600:	4642      	mov	r2, r8
 8003602:	189b      	adds	r3, r3, r2
 8003604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003608:	464b      	mov	r3, r9
 800360a:	460a      	mov	r2, r1
 800360c:	eb42 0303 	adc.w	r3, r2, r3
 8003610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	67bb      	str	r3, [r7, #120]	; 0x78
 800361e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800362c:	4649      	mov	r1, r9
 800362e:	008b      	lsls	r3, r1, #2
 8003630:	4641      	mov	r1, r8
 8003632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003636:	4641      	mov	r1, r8
 8003638:	008a      	lsls	r2, r1, #2
 800363a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800363e:	f7fc fe77 	bl	8000330 <__aeabi_uldivmod>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <UART_SetConfig+0x4e4>)
 8003648:	fba3 1302 	umull	r1, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	2164      	movs	r1, #100	; 0x64
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	3332      	adds	r3, #50	; 0x32
 800365a:	4a34      	ldr	r2, [pc, #208]	; (800372c <UART_SetConfig+0x4e4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003666:	441c      	add	r4, r3
 8003668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800366c:	2200      	movs	r2, #0
 800366e:	673b      	str	r3, [r7, #112]	; 0x70
 8003670:	677a      	str	r2, [r7, #116]	; 0x74
 8003672:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003676:	4642      	mov	r2, r8
 8003678:	464b      	mov	r3, r9
 800367a:	1891      	adds	r1, r2, r2
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	415b      	adcs	r3, r3
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003686:	4641      	mov	r1, r8
 8003688:	1851      	adds	r1, r2, r1
 800368a:	6039      	str	r1, [r7, #0]
 800368c:	4649      	mov	r1, r9
 800368e:	414b      	adcs	r3, r1
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800369e:	4659      	mov	r1, fp
 80036a0:	00cb      	lsls	r3, r1, #3
 80036a2:	4651      	mov	r1, sl
 80036a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036a8:	4651      	mov	r1, sl
 80036aa:	00ca      	lsls	r2, r1, #3
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	4603      	mov	r3, r0
 80036b2:	4642      	mov	r2, r8
 80036b4:	189b      	adds	r3, r3, r2
 80036b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80036b8:	464b      	mov	r3, r9
 80036ba:	460a      	mov	r2, r1
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	663b      	str	r3, [r7, #96]	; 0x60
 80036cc:	667a      	str	r2, [r7, #100]	; 0x64
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036da:	4649      	mov	r1, r9
 80036dc:	008b      	lsls	r3, r1, #2
 80036de:	4641      	mov	r1, r8
 80036e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036e4:	4641      	mov	r1, r8
 80036e6:	008a      	lsls	r2, r1, #2
 80036e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036ec:	f7fc fe20 	bl	8000330 <__aeabi_uldivmod>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <UART_SetConfig+0x4e4>)
 80036f6:	fba3 1302 	umull	r1, r3, r3, r2
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2164      	movs	r1, #100	; 0x64
 80036fe:	fb01 f303 	mul.w	r3, r1, r3
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	3332      	adds	r3, #50	; 0x32
 8003708:	4a08      	ldr	r2, [pc, #32]	; (800372c <UART_SetConfig+0x4e4>)
 800370a:	fba2 2303 	umull	r2, r3, r2, r3
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4422      	add	r2, r4
 800371c:	609a      	str	r2, [r3, #8]
}
 800371e:	bf00      	nop
 8003720:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003724:	46bd      	mov	sp, r7
 8003726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800372a:	bf00      	nop
 800372c:	51eb851f 	.word	0x51eb851f

08003730 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003730:	b084      	sub	sp, #16
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	f107 001c 	add.w	r0, r7, #28
 800373e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003744:	2b01      	cmp	r3, #1
 8003746:	d122      	bne.n	800378e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800375c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 faa2 	bl	8003ccc <USB_CoreReset>
 8003788:	4603      	mov	r3, r0
 800378a:	73fb      	strb	r3, [r7, #15]
 800378c:	e01a      	b.n	80037c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa96 	bl	8003ccc <USB_CoreReset>
 80037a0:	4603      	mov	r3, r0
 80037a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	639a      	str	r2, [r3, #56]	; 0x38
 80037b6:	e005      	b.n	80037c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80037c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d10b      	bne.n	80037e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f043 0206 	orr.w	r2, r3, #6
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f043 0220 	orr.w	r2, r3, #32
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037ee:	b004      	add	sp, #16
 80037f0:	4770      	bx	lr

080037f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f023 0201 	bic.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d115      	bne.n	8003862 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003842:	2001      	movs	r0, #1
 8003844:	f7fe f81a 	bl	800187c <HAL_Delay>
      ms++;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3301      	adds	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fa2e 	bl	8003cb0 <USB_GetMode>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d01e      	beq.n	8003898 <USB_SetCurrentMode+0x84>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b31      	cmp	r3, #49	; 0x31
 800385e:	d9f0      	bls.n	8003842 <USB_SetCurrentMode+0x2e>
 8003860:	e01a      	b.n	8003898 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d115      	bne.n	8003894 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003874:	2001      	movs	r0, #1
 8003876:	f7fe f801 	bl	800187c <HAL_Delay>
      ms++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	3301      	adds	r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fa15 	bl	8003cb0 <USB_GetMode>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <USB_SetCurrentMode+0x84>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b31      	cmp	r3, #49	; 0x31
 8003890:	d9f0      	bls.n	8003874 <USB_SetCurrentMode+0x60>
 8003892:	e001      	b.n	8003898 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e005      	b.n	80038a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b32      	cmp	r3, #50	; 0x32
 800389c:	d101      	bne.n	80038a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038ac:	b084      	sub	sp, #16
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	e009      	b.n	80038e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	3340      	adds	r3, #64	; 0x40
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	2200      	movs	r2, #0
 80038d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	3301      	adds	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2b0e      	cmp	r3, #14
 80038e4:	d9f2      	bls.n	80038cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11c      	bne.n	8003926 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
 8003924:	e00b      	b.n	800393e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003936:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003944:	461a      	mov	r2, r3
 8003946:	2300      	movs	r3, #0
 8003948:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003950:	4619      	mov	r1, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	461a      	mov	r2, r3
 800395a:	680b      	ldr	r3, [r1, #0]
 800395c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800395e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003960:	2b01      	cmp	r3, #1
 8003962:	d10c      	bne.n	800397e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d104      	bne.n	8003974 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800396a:	2100      	movs	r1, #0
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f965 	bl	8003c3c <USB_SetDevSpeed>
 8003972:	e008      	b.n	8003986 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003974:	2101      	movs	r1, #1
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f960 	bl	8003c3c <USB_SetDevSpeed>
 800397c:	e003      	b.n	8003986 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800397e:	2103      	movs	r1, #3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f95b 	bl	8003c3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003986:	2110      	movs	r1, #16
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 f8f3 	bl	8003b74 <USB_FlushTxFifo>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f91f 	bl	8003bdc <USB_FlushRxFifo>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ae:	461a      	mov	r2, r3
 80039b0:	2300      	movs	r3, #0
 80039b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ba:	461a      	mov	r2, r3
 80039bc:	2300      	movs	r3, #0
 80039be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c6:	461a      	mov	r2, r3
 80039c8:	2300      	movs	r3, #0
 80039ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	e043      	b.n	8003a5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e8:	d118      	bne.n	8003a1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fc:	461a      	mov	r2, r3
 80039fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e013      	b.n	8003a2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	461a      	mov	r2, r3
 8003a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e008      	b.n	8003a2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a28:	461a      	mov	r2, r3
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	3301      	adds	r3, #1
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d3b7      	bcc.n	80039d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a62:	2300      	movs	r3, #0
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	e043      	b.n	8003af0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a7e:	d118      	bne.n	8003ab2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a92:	461a      	mov	r2, r3
 8003a94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	e013      	b.n	8003ac4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	e008      	b.n	8003ac4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ae8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	3301      	adds	r3, #1
 8003aee:	613b      	str	r3, [r7, #16]
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d3b7      	bcc.n	8003a68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d105      	bne.n	8003b2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f043 0210 	orr.w	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	4b0f      	ldr	r3, [pc, #60]	; (8003b70 <USB_DevInit+0x2c4>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d005      	beq.n	8003b4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f043 0208 	orr.w	r2, r3, #8
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b58:	f043 0304 	orr.w	r3, r3, #4
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b6c:	b004      	add	sp, #16
 8003b6e:	4770      	bx	lr
 8003b70:	803c3800 	.word	0x803c3800

08003b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3301      	adds	r3, #1
 8003b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a13      	ldr	r2, [pc, #76]	; (8003bd8 <USB_FlushTxFifo+0x64>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e01b      	b.n	8003bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	daf2      	bge.n	8003b82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	019b      	lsls	r3, r3, #6
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <USB_FlushTxFifo+0x64>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e006      	b.n	8003bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d0f0      	beq.n	8003bac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	00030d40 	.word	0x00030d40

08003bdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4a11      	ldr	r2, [pc, #68]	; (8003c38 <USB_FlushRxFifo+0x5c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e018      	b.n	8003c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	daf2      	bge.n	8003be8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2210      	movs	r2, #16
 8003c0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <USB_FlushRxFifo+0x5c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e006      	b.n	8003c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d0f0      	beq.n	8003c0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	00030d40 	.word	0x00030d40

08003c3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b085      	sub	sp, #20
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c88:	f023 0303 	bic.w	r3, r3, #3
 8003c8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <USB_CoreReset+0x64>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e01b      	b.n	8003d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	daf2      	bge.n	8003cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f043 0201 	orr.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3301      	adds	r3, #1
 8003d06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <USB_CoreReset+0x64>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d901      	bls.n	8003d14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e006      	b.n	8003d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d0f0      	beq.n	8003d02 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	00030d40 	.word	0x00030d40

08003d34 <__errno>:
 8003d34:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <__errno+0x8>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	20000148 	.word	0x20000148

08003d40 <__libc_init_array>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	4d0d      	ldr	r5, [pc, #52]	; (8003d78 <__libc_init_array+0x38>)
 8003d44:	4c0d      	ldr	r4, [pc, #52]	; (8003d7c <__libc_init_array+0x3c>)
 8003d46:	1b64      	subs	r4, r4, r5
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	2600      	movs	r6, #0
 8003d4c:	42a6      	cmp	r6, r4
 8003d4e:	d109      	bne.n	8003d64 <__libc_init_array+0x24>
 8003d50:	4d0b      	ldr	r5, [pc, #44]	; (8003d80 <__libc_init_array+0x40>)
 8003d52:	4c0c      	ldr	r4, [pc, #48]	; (8003d84 <__libc_init_array+0x44>)
 8003d54:	f000 fc8e 	bl	8004674 <_init>
 8003d58:	1b64      	subs	r4, r4, r5
 8003d5a:	10a4      	asrs	r4, r4, #2
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	42a6      	cmp	r6, r4
 8003d60:	d105      	bne.n	8003d6e <__libc_init_array+0x2e>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d68:	4798      	blx	r3
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7ee      	b.n	8003d4c <__libc_init_array+0xc>
 8003d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d72:	4798      	blx	r3
 8003d74:	3601      	adds	r6, #1
 8003d76:	e7f2      	b.n	8003d5e <__libc_init_array+0x1e>
 8003d78:	080048d4 	.word	0x080048d4
 8003d7c:	080048d4 	.word	0x080048d4
 8003d80:	080048d4 	.word	0x080048d4
 8003d84:	080048d8 	.word	0x080048d8

08003d88 <memset>:
 8003d88:	4402      	add	r2, r0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d100      	bne.n	8003d92 <memset+0xa>
 8003d90:	4770      	bx	lr
 8003d92:	f803 1b01 	strb.w	r1, [r3], #1
 8003d96:	e7f9      	b.n	8003d8c <memset+0x4>

08003d98 <siprintf>:
 8003d98:	b40e      	push	{r1, r2, r3}
 8003d9a:	b500      	push	{lr}
 8003d9c:	b09c      	sub	sp, #112	; 0x70
 8003d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8003da0:	9002      	str	r0, [sp, #8]
 8003da2:	9006      	str	r0, [sp, #24]
 8003da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003da8:	4809      	ldr	r0, [pc, #36]	; (8003dd0 <siprintf+0x38>)
 8003daa:	9107      	str	r1, [sp, #28]
 8003dac:	9104      	str	r1, [sp, #16]
 8003dae:	4909      	ldr	r1, [pc, #36]	; (8003dd4 <siprintf+0x3c>)
 8003db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003db4:	9105      	str	r1, [sp, #20]
 8003db6:	6800      	ldr	r0, [r0, #0]
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	a902      	add	r1, sp, #8
 8003dbc:	f000 f868 	bl	8003e90 <_svfiprintf_r>
 8003dc0:	9b02      	ldr	r3, [sp, #8]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	b01c      	add	sp, #112	; 0x70
 8003dc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003dcc:	b003      	add	sp, #12
 8003dce:	4770      	bx	lr
 8003dd0:	20000148 	.word	0x20000148
 8003dd4:	ffff0208 	.word	0xffff0208

08003dd8 <__ssputs_r>:
 8003dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ddc:	688e      	ldr	r6, [r1, #8]
 8003dde:	429e      	cmp	r6, r3
 8003de0:	4682      	mov	sl, r0
 8003de2:	460c      	mov	r4, r1
 8003de4:	4690      	mov	r8, r2
 8003de6:	461f      	mov	r7, r3
 8003de8:	d838      	bhi.n	8003e5c <__ssputs_r+0x84>
 8003dea:	898a      	ldrh	r2, [r1, #12]
 8003dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003df0:	d032      	beq.n	8003e58 <__ssputs_r+0x80>
 8003df2:	6825      	ldr	r5, [r4, #0]
 8003df4:	6909      	ldr	r1, [r1, #16]
 8003df6:	eba5 0901 	sub.w	r9, r5, r1
 8003dfa:	6965      	ldr	r5, [r4, #20]
 8003dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e04:	3301      	adds	r3, #1
 8003e06:	444b      	add	r3, r9
 8003e08:	106d      	asrs	r5, r5, #1
 8003e0a:	429d      	cmp	r5, r3
 8003e0c:	bf38      	it	cc
 8003e0e:	461d      	movcc	r5, r3
 8003e10:	0553      	lsls	r3, r2, #21
 8003e12:	d531      	bpl.n	8003e78 <__ssputs_r+0xa0>
 8003e14:	4629      	mov	r1, r5
 8003e16:	f000 fb63 	bl	80044e0 <_malloc_r>
 8003e1a:	4606      	mov	r6, r0
 8003e1c:	b950      	cbnz	r0, 8003e34 <__ssputs_r+0x5c>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	f8ca 3000 	str.w	r3, [sl]
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e34:	6921      	ldr	r1, [r4, #16]
 8003e36:	464a      	mov	r2, r9
 8003e38:	f000 fabe 	bl	80043b8 <memcpy>
 8003e3c:	89a3      	ldrh	r3, [r4, #12]
 8003e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e46:	81a3      	strh	r3, [r4, #12]
 8003e48:	6126      	str	r6, [r4, #16]
 8003e4a:	6165      	str	r5, [r4, #20]
 8003e4c:	444e      	add	r6, r9
 8003e4e:	eba5 0509 	sub.w	r5, r5, r9
 8003e52:	6026      	str	r6, [r4, #0]
 8003e54:	60a5      	str	r5, [r4, #8]
 8003e56:	463e      	mov	r6, r7
 8003e58:	42be      	cmp	r6, r7
 8003e5a:	d900      	bls.n	8003e5e <__ssputs_r+0x86>
 8003e5c:	463e      	mov	r6, r7
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	4632      	mov	r2, r6
 8003e62:	4641      	mov	r1, r8
 8003e64:	f000 fab6 	bl	80043d4 <memmove>
 8003e68:	68a3      	ldr	r3, [r4, #8]
 8003e6a:	1b9b      	subs	r3, r3, r6
 8003e6c:	60a3      	str	r3, [r4, #8]
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	4433      	add	r3, r6
 8003e72:	6023      	str	r3, [r4, #0]
 8003e74:	2000      	movs	r0, #0
 8003e76:	e7db      	b.n	8003e30 <__ssputs_r+0x58>
 8003e78:	462a      	mov	r2, r5
 8003e7a:	f000 fba5 	bl	80045c8 <_realloc_r>
 8003e7e:	4606      	mov	r6, r0
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d1e1      	bne.n	8003e48 <__ssputs_r+0x70>
 8003e84:	6921      	ldr	r1, [r4, #16]
 8003e86:	4650      	mov	r0, sl
 8003e88:	f000 fabe 	bl	8004408 <_free_r>
 8003e8c:	e7c7      	b.n	8003e1e <__ssputs_r+0x46>
	...

08003e90 <_svfiprintf_r>:
 8003e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e94:	4698      	mov	r8, r3
 8003e96:	898b      	ldrh	r3, [r1, #12]
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	b09d      	sub	sp, #116	; 0x74
 8003e9c:	4607      	mov	r7, r0
 8003e9e:	460d      	mov	r5, r1
 8003ea0:	4614      	mov	r4, r2
 8003ea2:	d50e      	bpl.n	8003ec2 <_svfiprintf_r+0x32>
 8003ea4:	690b      	ldr	r3, [r1, #16]
 8003ea6:	b963      	cbnz	r3, 8003ec2 <_svfiprintf_r+0x32>
 8003ea8:	2140      	movs	r1, #64	; 0x40
 8003eaa:	f000 fb19 	bl	80044e0 <_malloc_r>
 8003eae:	6028      	str	r0, [r5, #0]
 8003eb0:	6128      	str	r0, [r5, #16]
 8003eb2:	b920      	cbnz	r0, 8003ebe <_svfiprintf_r+0x2e>
 8003eb4:	230c      	movs	r3, #12
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ebc:	e0d1      	b.n	8004062 <_svfiprintf_r+0x1d2>
 8003ebe:	2340      	movs	r3, #64	; 0x40
 8003ec0:	616b      	str	r3, [r5, #20]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8003ec6:	2320      	movs	r3, #32
 8003ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ed0:	2330      	movs	r3, #48	; 0x30
 8003ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800407c <_svfiprintf_r+0x1ec>
 8003ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003eda:	f04f 0901 	mov.w	r9, #1
 8003ede:	4623      	mov	r3, r4
 8003ee0:	469a      	mov	sl, r3
 8003ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ee6:	b10a      	cbz	r2, 8003eec <_svfiprintf_r+0x5c>
 8003ee8:	2a25      	cmp	r2, #37	; 0x25
 8003eea:	d1f9      	bne.n	8003ee0 <_svfiprintf_r+0x50>
 8003eec:	ebba 0b04 	subs.w	fp, sl, r4
 8003ef0:	d00b      	beq.n	8003f0a <_svfiprintf_r+0x7a>
 8003ef2:	465b      	mov	r3, fp
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4629      	mov	r1, r5
 8003ef8:	4638      	mov	r0, r7
 8003efa:	f7ff ff6d 	bl	8003dd8 <__ssputs_r>
 8003efe:	3001      	adds	r0, #1
 8003f00:	f000 80aa 	beq.w	8004058 <_svfiprintf_r+0x1c8>
 8003f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f06:	445a      	add	r2, fp
 8003f08:	9209      	str	r2, [sp, #36]	; 0x24
 8003f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 80a2 	beq.w	8004058 <_svfiprintf_r+0x1c8>
 8003f14:	2300      	movs	r3, #0
 8003f16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f1e:	f10a 0a01 	add.w	sl, sl, #1
 8003f22:	9304      	str	r3, [sp, #16]
 8003f24:	9307      	str	r3, [sp, #28]
 8003f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8003f2c:	4654      	mov	r4, sl
 8003f2e:	2205      	movs	r2, #5
 8003f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f34:	4851      	ldr	r0, [pc, #324]	; (800407c <_svfiprintf_r+0x1ec>)
 8003f36:	f7fc f9ab 	bl	8000290 <memchr>
 8003f3a:	9a04      	ldr	r2, [sp, #16]
 8003f3c:	b9d8      	cbnz	r0, 8003f76 <_svfiprintf_r+0xe6>
 8003f3e:	06d0      	lsls	r0, r2, #27
 8003f40:	bf44      	itt	mi
 8003f42:	2320      	movmi	r3, #32
 8003f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f48:	0711      	lsls	r1, r2, #28
 8003f4a:	bf44      	itt	mi
 8003f4c:	232b      	movmi	r3, #43	; 0x2b
 8003f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f52:	f89a 3000 	ldrb.w	r3, [sl]
 8003f56:	2b2a      	cmp	r3, #42	; 0x2a
 8003f58:	d015      	beq.n	8003f86 <_svfiprintf_r+0xf6>
 8003f5a:	9a07      	ldr	r2, [sp, #28]
 8003f5c:	4654      	mov	r4, sl
 8003f5e:	2000      	movs	r0, #0
 8003f60:	f04f 0c0a 	mov.w	ip, #10
 8003f64:	4621      	mov	r1, r4
 8003f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f6a:	3b30      	subs	r3, #48	; 0x30
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	d94e      	bls.n	800400e <_svfiprintf_r+0x17e>
 8003f70:	b1b0      	cbz	r0, 8003fa0 <_svfiprintf_r+0x110>
 8003f72:	9207      	str	r2, [sp, #28]
 8003f74:	e014      	b.n	8003fa0 <_svfiprintf_r+0x110>
 8003f76:	eba0 0308 	sub.w	r3, r0, r8
 8003f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	9304      	str	r3, [sp, #16]
 8003f82:	46a2      	mov	sl, r4
 8003f84:	e7d2      	b.n	8003f2c <_svfiprintf_r+0x9c>
 8003f86:	9b03      	ldr	r3, [sp, #12]
 8003f88:	1d19      	adds	r1, r3, #4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	9103      	str	r1, [sp, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfbb      	ittet	lt
 8003f92:	425b      	neglt	r3, r3
 8003f94:	f042 0202 	orrlt.w	r2, r2, #2
 8003f98:	9307      	strge	r3, [sp, #28]
 8003f9a:	9307      	strlt	r3, [sp, #28]
 8003f9c:	bfb8      	it	lt
 8003f9e:	9204      	strlt	r2, [sp, #16]
 8003fa0:	7823      	ldrb	r3, [r4, #0]
 8003fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8003fa4:	d10c      	bne.n	8003fc0 <_svfiprintf_r+0x130>
 8003fa6:	7863      	ldrb	r3, [r4, #1]
 8003fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8003faa:	d135      	bne.n	8004018 <_svfiprintf_r+0x188>
 8003fac:	9b03      	ldr	r3, [sp, #12]
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	9203      	str	r2, [sp, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bfb8      	it	lt
 8003fb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003fbc:	3402      	adds	r4, #2
 8003fbe:	9305      	str	r3, [sp, #20]
 8003fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800408c <_svfiprintf_r+0x1fc>
 8003fc4:	7821      	ldrb	r1, [r4, #0]
 8003fc6:	2203      	movs	r2, #3
 8003fc8:	4650      	mov	r0, sl
 8003fca:	f7fc f961 	bl	8000290 <memchr>
 8003fce:	b140      	cbz	r0, 8003fe2 <_svfiprintf_r+0x152>
 8003fd0:	2340      	movs	r3, #64	; 0x40
 8003fd2:	eba0 000a 	sub.w	r0, r0, sl
 8003fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8003fda:	9b04      	ldr	r3, [sp, #16]
 8003fdc:	4303      	orrs	r3, r0
 8003fde:	3401      	adds	r4, #1
 8003fe0:	9304      	str	r3, [sp, #16]
 8003fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fe6:	4826      	ldr	r0, [pc, #152]	; (8004080 <_svfiprintf_r+0x1f0>)
 8003fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fec:	2206      	movs	r2, #6
 8003fee:	f7fc f94f 	bl	8000290 <memchr>
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	d038      	beq.n	8004068 <_svfiprintf_r+0x1d8>
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <_svfiprintf_r+0x1f4>)
 8003ff8:	bb1b      	cbnz	r3, 8004042 <_svfiprintf_r+0x1b2>
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	3307      	adds	r3, #7
 8003ffe:	f023 0307 	bic.w	r3, r3, #7
 8004002:	3308      	adds	r3, #8
 8004004:	9303      	str	r3, [sp, #12]
 8004006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004008:	4433      	add	r3, r6
 800400a:	9309      	str	r3, [sp, #36]	; 0x24
 800400c:	e767      	b.n	8003ede <_svfiprintf_r+0x4e>
 800400e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004012:	460c      	mov	r4, r1
 8004014:	2001      	movs	r0, #1
 8004016:	e7a5      	b.n	8003f64 <_svfiprintf_r+0xd4>
 8004018:	2300      	movs	r3, #0
 800401a:	3401      	adds	r4, #1
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	4619      	mov	r1, r3
 8004020:	f04f 0c0a 	mov.w	ip, #10
 8004024:	4620      	mov	r0, r4
 8004026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800402a:	3a30      	subs	r2, #48	; 0x30
 800402c:	2a09      	cmp	r2, #9
 800402e:	d903      	bls.n	8004038 <_svfiprintf_r+0x1a8>
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0c5      	beq.n	8003fc0 <_svfiprintf_r+0x130>
 8004034:	9105      	str	r1, [sp, #20]
 8004036:	e7c3      	b.n	8003fc0 <_svfiprintf_r+0x130>
 8004038:	fb0c 2101 	mla	r1, ip, r1, r2
 800403c:	4604      	mov	r4, r0
 800403e:	2301      	movs	r3, #1
 8004040:	e7f0      	b.n	8004024 <_svfiprintf_r+0x194>
 8004042:	ab03      	add	r3, sp, #12
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	462a      	mov	r2, r5
 8004048:	4b0f      	ldr	r3, [pc, #60]	; (8004088 <_svfiprintf_r+0x1f8>)
 800404a:	a904      	add	r1, sp, #16
 800404c:	4638      	mov	r0, r7
 800404e:	f3af 8000 	nop.w
 8004052:	1c42      	adds	r2, r0, #1
 8004054:	4606      	mov	r6, r0
 8004056:	d1d6      	bne.n	8004006 <_svfiprintf_r+0x176>
 8004058:	89ab      	ldrh	r3, [r5, #12]
 800405a:	065b      	lsls	r3, r3, #25
 800405c:	f53f af2c 	bmi.w	8003eb8 <_svfiprintf_r+0x28>
 8004060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004062:	b01d      	add	sp, #116	; 0x74
 8004064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004068:	ab03      	add	r3, sp, #12
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	462a      	mov	r2, r5
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <_svfiprintf_r+0x1f8>)
 8004070:	a904      	add	r1, sp, #16
 8004072:	4638      	mov	r0, r7
 8004074:	f000 f87a 	bl	800416c <_printf_i>
 8004078:	e7eb      	b.n	8004052 <_svfiprintf_r+0x1c2>
 800407a:	bf00      	nop
 800407c:	08004898 	.word	0x08004898
 8004080:	080048a2 	.word	0x080048a2
 8004084:	00000000 	.word	0x00000000
 8004088:	08003dd9 	.word	0x08003dd9
 800408c:	0800489e 	.word	0x0800489e

08004090 <_printf_common>:
 8004090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004094:	4616      	mov	r6, r2
 8004096:	4699      	mov	r9, r3
 8004098:	688a      	ldr	r2, [r1, #8]
 800409a:	690b      	ldr	r3, [r1, #16]
 800409c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a0:	4293      	cmp	r3, r2
 80040a2:	bfb8      	it	lt
 80040a4:	4613      	movlt	r3, r2
 80040a6:	6033      	str	r3, [r6, #0]
 80040a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040ac:	4607      	mov	r7, r0
 80040ae:	460c      	mov	r4, r1
 80040b0:	b10a      	cbz	r2, 80040b6 <_printf_common+0x26>
 80040b2:	3301      	adds	r3, #1
 80040b4:	6033      	str	r3, [r6, #0]
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	0699      	lsls	r1, r3, #26
 80040ba:	bf42      	ittt	mi
 80040bc:	6833      	ldrmi	r3, [r6, #0]
 80040be:	3302      	addmi	r3, #2
 80040c0:	6033      	strmi	r3, [r6, #0]
 80040c2:	6825      	ldr	r5, [r4, #0]
 80040c4:	f015 0506 	ands.w	r5, r5, #6
 80040c8:	d106      	bne.n	80040d8 <_printf_common+0x48>
 80040ca:	f104 0a19 	add.w	sl, r4, #25
 80040ce:	68e3      	ldr	r3, [r4, #12]
 80040d0:	6832      	ldr	r2, [r6, #0]
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	42ab      	cmp	r3, r5
 80040d6:	dc26      	bgt.n	8004126 <_printf_common+0x96>
 80040d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040dc:	1e13      	subs	r3, r2, #0
 80040de:	6822      	ldr	r2, [r4, #0]
 80040e0:	bf18      	it	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	0692      	lsls	r2, r2, #26
 80040e6:	d42b      	bmi.n	8004140 <_printf_common+0xb0>
 80040e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040ec:	4649      	mov	r1, r9
 80040ee:	4638      	mov	r0, r7
 80040f0:	47c0      	blx	r8
 80040f2:	3001      	adds	r0, #1
 80040f4:	d01e      	beq.n	8004134 <_printf_common+0xa4>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	68e5      	ldr	r5, [r4, #12]
 80040fa:	6832      	ldr	r2, [r6, #0]
 80040fc:	f003 0306 	and.w	r3, r3, #6
 8004100:	2b04      	cmp	r3, #4
 8004102:	bf08      	it	eq
 8004104:	1aad      	subeq	r5, r5, r2
 8004106:	68a3      	ldr	r3, [r4, #8]
 8004108:	6922      	ldr	r2, [r4, #16]
 800410a:	bf0c      	ite	eq
 800410c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004110:	2500      	movne	r5, #0
 8004112:	4293      	cmp	r3, r2
 8004114:	bfc4      	itt	gt
 8004116:	1a9b      	subgt	r3, r3, r2
 8004118:	18ed      	addgt	r5, r5, r3
 800411a:	2600      	movs	r6, #0
 800411c:	341a      	adds	r4, #26
 800411e:	42b5      	cmp	r5, r6
 8004120:	d11a      	bne.n	8004158 <_printf_common+0xc8>
 8004122:	2000      	movs	r0, #0
 8004124:	e008      	b.n	8004138 <_printf_common+0xa8>
 8004126:	2301      	movs	r3, #1
 8004128:	4652      	mov	r2, sl
 800412a:	4649      	mov	r1, r9
 800412c:	4638      	mov	r0, r7
 800412e:	47c0      	blx	r8
 8004130:	3001      	adds	r0, #1
 8004132:	d103      	bne.n	800413c <_printf_common+0xac>
 8004134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413c:	3501      	adds	r5, #1
 800413e:	e7c6      	b.n	80040ce <_printf_common+0x3e>
 8004140:	18e1      	adds	r1, r4, r3
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	2030      	movs	r0, #48	; 0x30
 8004146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800414a:	4422      	add	r2, r4
 800414c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004154:	3302      	adds	r3, #2
 8004156:	e7c7      	b.n	80040e8 <_printf_common+0x58>
 8004158:	2301      	movs	r3, #1
 800415a:	4622      	mov	r2, r4
 800415c:	4649      	mov	r1, r9
 800415e:	4638      	mov	r0, r7
 8004160:	47c0      	blx	r8
 8004162:	3001      	adds	r0, #1
 8004164:	d0e6      	beq.n	8004134 <_printf_common+0xa4>
 8004166:	3601      	adds	r6, #1
 8004168:	e7d9      	b.n	800411e <_printf_common+0x8e>
	...

0800416c <_printf_i>:
 800416c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	7e0f      	ldrb	r7, [r1, #24]
 8004172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004174:	2f78      	cmp	r7, #120	; 0x78
 8004176:	4691      	mov	r9, r2
 8004178:	4680      	mov	r8, r0
 800417a:	460c      	mov	r4, r1
 800417c:	469a      	mov	sl, r3
 800417e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004182:	d807      	bhi.n	8004194 <_printf_i+0x28>
 8004184:	2f62      	cmp	r7, #98	; 0x62
 8004186:	d80a      	bhi.n	800419e <_printf_i+0x32>
 8004188:	2f00      	cmp	r7, #0
 800418a:	f000 80d8 	beq.w	800433e <_printf_i+0x1d2>
 800418e:	2f58      	cmp	r7, #88	; 0x58
 8004190:	f000 80a3 	beq.w	80042da <_printf_i+0x16e>
 8004194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800419c:	e03a      	b.n	8004214 <_printf_i+0xa8>
 800419e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041a2:	2b15      	cmp	r3, #21
 80041a4:	d8f6      	bhi.n	8004194 <_printf_i+0x28>
 80041a6:	a101      	add	r1, pc, #4	; (adr r1, 80041ac <_printf_i+0x40>)
 80041a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041ac:	08004205 	.word	0x08004205
 80041b0:	08004219 	.word	0x08004219
 80041b4:	08004195 	.word	0x08004195
 80041b8:	08004195 	.word	0x08004195
 80041bc:	08004195 	.word	0x08004195
 80041c0:	08004195 	.word	0x08004195
 80041c4:	08004219 	.word	0x08004219
 80041c8:	08004195 	.word	0x08004195
 80041cc:	08004195 	.word	0x08004195
 80041d0:	08004195 	.word	0x08004195
 80041d4:	08004195 	.word	0x08004195
 80041d8:	08004325 	.word	0x08004325
 80041dc:	08004249 	.word	0x08004249
 80041e0:	08004307 	.word	0x08004307
 80041e4:	08004195 	.word	0x08004195
 80041e8:	08004195 	.word	0x08004195
 80041ec:	08004347 	.word	0x08004347
 80041f0:	08004195 	.word	0x08004195
 80041f4:	08004249 	.word	0x08004249
 80041f8:	08004195 	.word	0x08004195
 80041fc:	08004195 	.word	0x08004195
 8004200:	0800430f 	.word	0x0800430f
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	1d1a      	adds	r2, r3, #4
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	602a      	str	r2, [r5, #0]
 800420c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004214:	2301      	movs	r3, #1
 8004216:	e0a3      	b.n	8004360 <_printf_i+0x1f4>
 8004218:	6820      	ldr	r0, [r4, #0]
 800421a:	6829      	ldr	r1, [r5, #0]
 800421c:	0606      	lsls	r6, r0, #24
 800421e:	f101 0304 	add.w	r3, r1, #4
 8004222:	d50a      	bpl.n	800423a <_printf_i+0xce>
 8004224:	680e      	ldr	r6, [r1, #0]
 8004226:	602b      	str	r3, [r5, #0]
 8004228:	2e00      	cmp	r6, #0
 800422a:	da03      	bge.n	8004234 <_printf_i+0xc8>
 800422c:	232d      	movs	r3, #45	; 0x2d
 800422e:	4276      	negs	r6, r6
 8004230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004234:	485e      	ldr	r0, [pc, #376]	; (80043b0 <_printf_i+0x244>)
 8004236:	230a      	movs	r3, #10
 8004238:	e019      	b.n	800426e <_printf_i+0x102>
 800423a:	680e      	ldr	r6, [r1, #0]
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004242:	bf18      	it	ne
 8004244:	b236      	sxthne	r6, r6
 8004246:	e7ef      	b.n	8004228 <_printf_i+0xbc>
 8004248:	682b      	ldr	r3, [r5, #0]
 800424a:	6820      	ldr	r0, [r4, #0]
 800424c:	1d19      	adds	r1, r3, #4
 800424e:	6029      	str	r1, [r5, #0]
 8004250:	0601      	lsls	r1, r0, #24
 8004252:	d501      	bpl.n	8004258 <_printf_i+0xec>
 8004254:	681e      	ldr	r6, [r3, #0]
 8004256:	e002      	b.n	800425e <_printf_i+0xf2>
 8004258:	0646      	lsls	r6, r0, #25
 800425a:	d5fb      	bpl.n	8004254 <_printf_i+0xe8>
 800425c:	881e      	ldrh	r6, [r3, #0]
 800425e:	4854      	ldr	r0, [pc, #336]	; (80043b0 <_printf_i+0x244>)
 8004260:	2f6f      	cmp	r7, #111	; 0x6f
 8004262:	bf0c      	ite	eq
 8004264:	2308      	moveq	r3, #8
 8004266:	230a      	movne	r3, #10
 8004268:	2100      	movs	r1, #0
 800426a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800426e:	6865      	ldr	r5, [r4, #4]
 8004270:	60a5      	str	r5, [r4, #8]
 8004272:	2d00      	cmp	r5, #0
 8004274:	bfa2      	ittt	ge
 8004276:	6821      	ldrge	r1, [r4, #0]
 8004278:	f021 0104 	bicge.w	r1, r1, #4
 800427c:	6021      	strge	r1, [r4, #0]
 800427e:	b90e      	cbnz	r6, 8004284 <_printf_i+0x118>
 8004280:	2d00      	cmp	r5, #0
 8004282:	d04d      	beq.n	8004320 <_printf_i+0x1b4>
 8004284:	4615      	mov	r5, r2
 8004286:	fbb6 f1f3 	udiv	r1, r6, r3
 800428a:	fb03 6711 	mls	r7, r3, r1, r6
 800428e:	5dc7      	ldrb	r7, [r0, r7]
 8004290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004294:	4637      	mov	r7, r6
 8004296:	42bb      	cmp	r3, r7
 8004298:	460e      	mov	r6, r1
 800429a:	d9f4      	bls.n	8004286 <_printf_i+0x11a>
 800429c:	2b08      	cmp	r3, #8
 800429e:	d10b      	bne.n	80042b8 <_printf_i+0x14c>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	07de      	lsls	r6, r3, #31
 80042a4:	d508      	bpl.n	80042b8 <_printf_i+0x14c>
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	6861      	ldr	r1, [r4, #4]
 80042aa:	4299      	cmp	r1, r3
 80042ac:	bfde      	ittt	le
 80042ae:	2330      	movle	r3, #48	; 0x30
 80042b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80042b8:	1b52      	subs	r2, r2, r5
 80042ba:	6122      	str	r2, [r4, #16]
 80042bc:	f8cd a000 	str.w	sl, [sp]
 80042c0:	464b      	mov	r3, r9
 80042c2:	aa03      	add	r2, sp, #12
 80042c4:	4621      	mov	r1, r4
 80042c6:	4640      	mov	r0, r8
 80042c8:	f7ff fee2 	bl	8004090 <_printf_common>
 80042cc:	3001      	adds	r0, #1
 80042ce:	d14c      	bne.n	800436a <_printf_i+0x1fe>
 80042d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042d4:	b004      	add	sp, #16
 80042d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042da:	4835      	ldr	r0, [pc, #212]	; (80043b0 <_printf_i+0x244>)
 80042dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042e0:	6829      	ldr	r1, [r5, #0]
 80042e2:	6823      	ldr	r3, [r4, #0]
 80042e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80042e8:	6029      	str	r1, [r5, #0]
 80042ea:	061d      	lsls	r5, r3, #24
 80042ec:	d514      	bpl.n	8004318 <_printf_i+0x1ac>
 80042ee:	07df      	lsls	r7, r3, #31
 80042f0:	bf44      	itt	mi
 80042f2:	f043 0320 	orrmi.w	r3, r3, #32
 80042f6:	6023      	strmi	r3, [r4, #0]
 80042f8:	b91e      	cbnz	r6, 8004302 <_printf_i+0x196>
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	f023 0320 	bic.w	r3, r3, #32
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	2310      	movs	r3, #16
 8004304:	e7b0      	b.n	8004268 <_printf_i+0xfc>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f043 0320 	orr.w	r3, r3, #32
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	2378      	movs	r3, #120	; 0x78
 8004310:	4828      	ldr	r0, [pc, #160]	; (80043b4 <_printf_i+0x248>)
 8004312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004316:	e7e3      	b.n	80042e0 <_printf_i+0x174>
 8004318:	0659      	lsls	r1, r3, #25
 800431a:	bf48      	it	mi
 800431c:	b2b6      	uxthmi	r6, r6
 800431e:	e7e6      	b.n	80042ee <_printf_i+0x182>
 8004320:	4615      	mov	r5, r2
 8004322:	e7bb      	b.n	800429c <_printf_i+0x130>
 8004324:	682b      	ldr	r3, [r5, #0]
 8004326:	6826      	ldr	r6, [r4, #0]
 8004328:	6961      	ldr	r1, [r4, #20]
 800432a:	1d18      	adds	r0, r3, #4
 800432c:	6028      	str	r0, [r5, #0]
 800432e:	0635      	lsls	r5, r6, #24
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	d501      	bpl.n	8004338 <_printf_i+0x1cc>
 8004334:	6019      	str	r1, [r3, #0]
 8004336:	e002      	b.n	800433e <_printf_i+0x1d2>
 8004338:	0670      	lsls	r0, r6, #25
 800433a:	d5fb      	bpl.n	8004334 <_printf_i+0x1c8>
 800433c:	8019      	strh	r1, [r3, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	6123      	str	r3, [r4, #16]
 8004342:	4615      	mov	r5, r2
 8004344:	e7ba      	b.n	80042bc <_printf_i+0x150>
 8004346:	682b      	ldr	r3, [r5, #0]
 8004348:	1d1a      	adds	r2, r3, #4
 800434a:	602a      	str	r2, [r5, #0]
 800434c:	681d      	ldr	r5, [r3, #0]
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	2100      	movs	r1, #0
 8004352:	4628      	mov	r0, r5
 8004354:	f7fb ff9c 	bl	8000290 <memchr>
 8004358:	b108      	cbz	r0, 800435e <_printf_i+0x1f2>
 800435a:	1b40      	subs	r0, r0, r5
 800435c:	6060      	str	r0, [r4, #4]
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	6123      	str	r3, [r4, #16]
 8004362:	2300      	movs	r3, #0
 8004364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004368:	e7a8      	b.n	80042bc <_printf_i+0x150>
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	462a      	mov	r2, r5
 800436e:	4649      	mov	r1, r9
 8004370:	4640      	mov	r0, r8
 8004372:	47d0      	blx	sl
 8004374:	3001      	adds	r0, #1
 8004376:	d0ab      	beq.n	80042d0 <_printf_i+0x164>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	079b      	lsls	r3, r3, #30
 800437c:	d413      	bmi.n	80043a6 <_printf_i+0x23a>
 800437e:	68e0      	ldr	r0, [r4, #12]
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	4298      	cmp	r0, r3
 8004384:	bfb8      	it	lt
 8004386:	4618      	movlt	r0, r3
 8004388:	e7a4      	b.n	80042d4 <_printf_i+0x168>
 800438a:	2301      	movs	r3, #1
 800438c:	4632      	mov	r2, r6
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	47d0      	blx	sl
 8004394:	3001      	adds	r0, #1
 8004396:	d09b      	beq.n	80042d0 <_printf_i+0x164>
 8004398:	3501      	adds	r5, #1
 800439a:	68e3      	ldr	r3, [r4, #12]
 800439c:	9903      	ldr	r1, [sp, #12]
 800439e:	1a5b      	subs	r3, r3, r1
 80043a0:	42ab      	cmp	r3, r5
 80043a2:	dcf2      	bgt.n	800438a <_printf_i+0x21e>
 80043a4:	e7eb      	b.n	800437e <_printf_i+0x212>
 80043a6:	2500      	movs	r5, #0
 80043a8:	f104 0619 	add.w	r6, r4, #25
 80043ac:	e7f5      	b.n	800439a <_printf_i+0x22e>
 80043ae:	bf00      	nop
 80043b0:	080048a9 	.word	0x080048a9
 80043b4:	080048ba 	.word	0x080048ba

080043b8 <memcpy>:
 80043b8:	440a      	add	r2, r1
 80043ba:	4291      	cmp	r1, r2
 80043bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043c0:	d100      	bne.n	80043c4 <memcpy+0xc>
 80043c2:	4770      	bx	lr
 80043c4:	b510      	push	{r4, lr}
 80043c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ce:	4291      	cmp	r1, r2
 80043d0:	d1f9      	bne.n	80043c6 <memcpy+0xe>
 80043d2:	bd10      	pop	{r4, pc}

080043d4 <memmove>:
 80043d4:	4288      	cmp	r0, r1
 80043d6:	b510      	push	{r4, lr}
 80043d8:	eb01 0402 	add.w	r4, r1, r2
 80043dc:	d902      	bls.n	80043e4 <memmove+0x10>
 80043de:	4284      	cmp	r4, r0
 80043e0:	4623      	mov	r3, r4
 80043e2:	d807      	bhi.n	80043f4 <memmove+0x20>
 80043e4:	1e43      	subs	r3, r0, #1
 80043e6:	42a1      	cmp	r1, r4
 80043e8:	d008      	beq.n	80043fc <memmove+0x28>
 80043ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043f2:	e7f8      	b.n	80043e6 <memmove+0x12>
 80043f4:	4402      	add	r2, r0
 80043f6:	4601      	mov	r1, r0
 80043f8:	428a      	cmp	r2, r1
 80043fa:	d100      	bne.n	80043fe <memmove+0x2a>
 80043fc:	bd10      	pop	{r4, pc}
 80043fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004406:	e7f7      	b.n	80043f8 <memmove+0x24>

08004408 <_free_r>:
 8004408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800440a:	2900      	cmp	r1, #0
 800440c:	d044      	beq.n	8004498 <_free_r+0x90>
 800440e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004412:	9001      	str	r0, [sp, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f1a1 0404 	sub.w	r4, r1, #4
 800441a:	bfb8      	it	lt
 800441c:	18e4      	addlt	r4, r4, r3
 800441e:	f000 f913 	bl	8004648 <__malloc_lock>
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <_free_r+0x94>)
 8004424:	9801      	ldr	r0, [sp, #4]
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	b933      	cbnz	r3, 8004438 <_free_r+0x30>
 800442a:	6063      	str	r3, [r4, #4]
 800442c:	6014      	str	r4, [r2, #0]
 800442e:	b003      	add	sp, #12
 8004430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004434:	f000 b90e 	b.w	8004654 <__malloc_unlock>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d908      	bls.n	800444e <_free_r+0x46>
 800443c:	6825      	ldr	r5, [r4, #0]
 800443e:	1961      	adds	r1, r4, r5
 8004440:	428b      	cmp	r3, r1
 8004442:	bf01      	itttt	eq
 8004444:	6819      	ldreq	r1, [r3, #0]
 8004446:	685b      	ldreq	r3, [r3, #4]
 8004448:	1949      	addeq	r1, r1, r5
 800444a:	6021      	streq	r1, [r4, #0]
 800444c:	e7ed      	b.n	800442a <_free_r+0x22>
 800444e:	461a      	mov	r2, r3
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b10b      	cbz	r3, 8004458 <_free_r+0x50>
 8004454:	42a3      	cmp	r3, r4
 8004456:	d9fa      	bls.n	800444e <_free_r+0x46>
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	1855      	adds	r5, r2, r1
 800445c:	42a5      	cmp	r5, r4
 800445e:	d10b      	bne.n	8004478 <_free_r+0x70>
 8004460:	6824      	ldr	r4, [r4, #0]
 8004462:	4421      	add	r1, r4
 8004464:	1854      	adds	r4, r2, r1
 8004466:	42a3      	cmp	r3, r4
 8004468:	6011      	str	r1, [r2, #0]
 800446a:	d1e0      	bne.n	800442e <_free_r+0x26>
 800446c:	681c      	ldr	r4, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	6053      	str	r3, [r2, #4]
 8004472:	4421      	add	r1, r4
 8004474:	6011      	str	r1, [r2, #0]
 8004476:	e7da      	b.n	800442e <_free_r+0x26>
 8004478:	d902      	bls.n	8004480 <_free_r+0x78>
 800447a:	230c      	movs	r3, #12
 800447c:	6003      	str	r3, [r0, #0]
 800447e:	e7d6      	b.n	800442e <_free_r+0x26>
 8004480:	6825      	ldr	r5, [r4, #0]
 8004482:	1961      	adds	r1, r4, r5
 8004484:	428b      	cmp	r3, r1
 8004486:	bf04      	itt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	bf04      	itt	eq
 8004490:	1949      	addeq	r1, r1, r5
 8004492:	6021      	streq	r1, [r4, #0]
 8004494:	6054      	str	r4, [r2, #4]
 8004496:	e7ca      	b.n	800442e <_free_r+0x26>
 8004498:	b003      	add	sp, #12
 800449a:	bd30      	pop	{r4, r5, pc}
 800449c:	20000a90 	.word	0x20000a90

080044a0 <sbrk_aligned>:
 80044a0:	b570      	push	{r4, r5, r6, lr}
 80044a2:	4e0e      	ldr	r6, [pc, #56]	; (80044dc <sbrk_aligned+0x3c>)
 80044a4:	460c      	mov	r4, r1
 80044a6:	6831      	ldr	r1, [r6, #0]
 80044a8:	4605      	mov	r5, r0
 80044aa:	b911      	cbnz	r1, 80044b2 <sbrk_aligned+0x12>
 80044ac:	f000 f8bc 	bl	8004628 <_sbrk_r>
 80044b0:	6030      	str	r0, [r6, #0]
 80044b2:	4621      	mov	r1, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 f8b7 	bl	8004628 <_sbrk_r>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d00a      	beq.n	80044d4 <sbrk_aligned+0x34>
 80044be:	1cc4      	adds	r4, r0, #3
 80044c0:	f024 0403 	bic.w	r4, r4, #3
 80044c4:	42a0      	cmp	r0, r4
 80044c6:	d007      	beq.n	80044d8 <sbrk_aligned+0x38>
 80044c8:	1a21      	subs	r1, r4, r0
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f8ac 	bl	8004628 <_sbrk_r>
 80044d0:	3001      	adds	r0, #1
 80044d2:	d101      	bne.n	80044d8 <sbrk_aligned+0x38>
 80044d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80044d8:	4620      	mov	r0, r4
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	20000a94 	.word	0x20000a94

080044e0 <_malloc_r>:
 80044e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e4:	1ccd      	adds	r5, r1, #3
 80044e6:	f025 0503 	bic.w	r5, r5, #3
 80044ea:	3508      	adds	r5, #8
 80044ec:	2d0c      	cmp	r5, #12
 80044ee:	bf38      	it	cc
 80044f0:	250c      	movcc	r5, #12
 80044f2:	2d00      	cmp	r5, #0
 80044f4:	4607      	mov	r7, r0
 80044f6:	db01      	blt.n	80044fc <_malloc_r+0x1c>
 80044f8:	42a9      	cmp	r1, r5
 80044fa:	d905      	bls.n	8004508 <_malloc_r+0x28>
 80044fc:	230c      	movs	r3, #12
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	2600      	movs	r6, #0
 8004502:	4630      	mov	r0, r6
 8004504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004508:	4e2e      	ldr	r6, [pc, #184]	; (80045c4 <_malloc_r+0xe4>)
 800450a:	f000 f89d 	bl	8004648 <__malloc_lock>
 800450e:	6833      	ldr	r3, [r6, #0]
 8004510:	461c      	mov	r4, r3
 8004512:	bb34      	cbnz	r4, 8004562 <_malloc_r+0x82>
 8004514:	4629      	mov	r1, r5
 8004516:	4638      	mov	r0, r7
 8004518:	f7ff ffc2 	bl	80044a0 <sbrk_aligned>
 800451c:	1c43      	adds	r3, r0, #1
 800451e:	4604      	mov	r4, r0
 8004520:	d14d      	bne.n	80045be <_malloc_r+0xde>
 8004522:	6834      	ldr	r4, [r6, #0]
 8004524:	4626      	mov	r6, r4
 8004526:	2e00      	cmp	r6, #0
 8004528:	d140      	bne.n	80045ac <_malloc_r+0xcc>
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	4631      	mov	r1, r6
 800452e:	4638      	mov	r0, r7
 8004530:	eb04 0803 	add.w	r8, r4, r3
 8004534:	f000 f878 	bl	8004628 <_sbrk_r>
 8004538:	4580      	cmp	r8, r0
 800453a:	d13a      	bne.n	80045b2 <_malloc_r+0xd2>
 800453c:	6821      	ldr	r1, [r4, #0]
 800453e:	3503      	adds	r5, #3
 8004540:	1a6d      	subs	r5, r5, r1
 8004542:	f025 0503 	bic.w	r5, r5, #3
 8004546:	3508      	adds	r5, #8
 8004548:	2d0c      	cmp	r5, #12
 800454a:	bf38      	it	cc
 800454c:	250c      	movcc	r5, #12
 800454e:	4629      	mov	r1, r5
 8004550:	4638      	mov	r0, r7
 8004552:	f7ff ffa5 	bl	80044a0 <sbrk_aligned>
 8004556:	3001      	adds	r0, #1
 8004558:	d02b      	beq.n	80045b2 <_malloc_r+0xd2>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	442b      	add	r3, r5
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	e00e      	b.n	8004580 <_malloc_r+0xa0>
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	1b52      	subs	r2, r2, r5
 8004566:	d41e      	bmi.n	80045a6 <_malloc_r+0xc6>
 8004568:	2a0b      	cmp	r2, #11
 800456a:	d916      	bls.n	800459a <_malloc_r+0xba>
 800456c:	1961      	adds	r1, r4, r5
 800456e:	42a3      	cmp	r3, r4
 8004570:	6025      	str	r5, [r4, #0]
 8004572:	bf18      	it	ne
 8004574:	6059      	strne	r1, [r3, #4]
 8004576:	6863      	ldr	r3, [r4, #4]
 8004578:	bf08      	it	eq
 800457a:	6031      	streq	r1, [r6, #0]
 800457c:	5162      	str	r2, [r4, r5]
 800457e:	604b      	str	r3, [r1, #4]
 8004580:	4638      	mov	r0, r7
 8004582:	f104 060b 	add.w	r6, r4, #11
 8004586:	f000 f865 	bl	8004654 <__malloc_unlock>
 800458a:	f026 0607 	bic.w	r6, r6, #7
 800458e:	1d23      	adds	r3, r4, #4
 8004590:	1af2      	subs	r2, r6, r3
 8004592:	d0b6      	beq.n	8004502 <_malloc_r+0x22>
 8004594:	1b9b      	subs	r3, r3, r6
 8004596:	50a3      	str	r3, [r4, r2]
 8004598:	e7b3      	b.n	8004502 <_malloc_r+0x22>
 800459a:	6862      	ldr	r2, [r4, #4]
 800459c:	42a3      	cmp	r3, r4
 800459e:	bf0c      	ite	eq
 80045a0:	6032      	streq	r2, [r6, #0]
 80045a2:	605a      	strne	r2, [r3, #4]
 80045a4:	e7ec      	b.n	8004580 <_malloc_r+0xa0>
 80045a6:	4623      	mov	r3, r4
 80045a8:	6864      	ldr	r4, [r4, #4]
 80045aa:	e7b2      	b.n	8004512 <_malloc_r+0x32>
 80045ac:	4634      	mov	r4, r6
 80045ae:	6876      	ldr	r6, [r6, #4]
 80045b0:	e7b9      	b.n	8004526 <_malloc_r+0x46>
 80045b2:	230c      	movs	r3, #12
 80045b4:	603b      	str	r3, [r7, #0]
 80045b6:	4638      	mov	r0, r7
 80045b8:	f000 f84c 	bl	8004654 <__malloc_unlock>
 80045bc:	e7a1      	b.n	8004502 <_malloc_r+0x22>
 80045be:	6025      	str	r5, [r4, #0]
 80045c0:	e7de      	b.n	8004580 <_malloc_r+0xa0>
 80045c2:	bf00      	nop
 80045c4:	20000a90 	.word	0x20000a90

080045c8 <_realloc_r>:
 80045c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045cc:	4680      	mov	r8, r0
 80045ce:	4614      	mov	r4, r2
 80045d0:	460e      	mov	r6, r1
 80045d2:	b921      	cbnz	r1, 80045de <_realloc_r+0x16>
 80045d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d8:	4611      	mov	r1, r2
 80045da:	f7ff bf81 	b.w	80044e0 <_malloc_r>
 80045de:	b92a      	cbnz	r2, 80045ec <_realloc_r+0x24>
 80045e0:	f7ff ff12 	bl	8004408 <_free_r>
 80045e4:	4625      	mov	r5, r4
 80045e6:	4628      	mov	r0, r5
 80045e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045ec:	f000 f838 	bl	8004660 <_malloc_usable_size_r>
 80045f0:	4284      	cmp	r4, r0
 80045f2:	4607      	mov	r7, r0
 80045f4:	d802      	bhi.n	80045fc <_realloc_r+0x34>
 80045f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045fa:	d812      	bhi.n	8004622 <_realloc_r+0x5a>
 80045fc:	4621      	mov	r1, r4
 80045fe:	4640      	mov	r0, r8
 8004600:	f7ff ff6e 	bl	80044e0 <_malloc_r>
 8004604:	4605      	mov	r5, r0
 8004606:	2800      	cmp	r0, #0
 8004608:	d0ed      	beq.n	80045e6 <_realloc_r+0x1e>
 800460a:	42bc      	cmp	r4, r7
 800460c:	4622      	mov	r2, r4
 800460e:	4631      	mov	r1, r6
 8004610:	bf28      	it	cs
 8004612:	463a      	movcs	r2, r7
 8004614:	f7ff fed0 	bl	80043b8 <memcpy>
 8004618:	4631      	mov	r1, r6
 800461a:	4640      	mov	r0, r8
 800461c:	f7ff fef4 	bl	8004408 <_free_r>
 8004620:	e7e1      	b.n	80045e6 <_realloc_r+0x1e>
 8004622:	4635      	mov	r5, r6
 8004624:	e7df      	b.n	80045e6 <_realloc_r+0x1e>
	...

08004628 <_sbrk_r>:
 8004628:	b538      	push	{r3, r4, r5, lr}
 800462a:	4d06      	ldr	r5, [pc, #24]	; (8004644 <_sbrk_r+0x1c>)
 800462c:	2300      	movs	r3, #0
 800462e:	4604      	mov	r4, r0
 8004630:	4608      	mov	r0, r1
 8004632:	602b      	str	r3, [r5, #0]
 8004634:	f7fd f83c 	bl	80016b0 <_sbrk>
 8004638:	1c43      	adds	r3, r0, #1
 800463a:	d102      	bne.n	8004642 <_sbrk_r+0x1a>
 800463c:	682b      	ldr	r3, [r5, #0]
 800463e:	b103      	cbz	r3, 8004642 <_sbrk_r+0x1a>
 8004640:	6023      	str	r3, [r4, #0]
 8004642:	bd38      	pop	{r3, r4, r5, pc}
 8004644:	20000a98 	.word	0x20000a98

08004648 <__malloc_lock>:
 8004648:	4801      	ldr	r0, [pc, #4]	; (8004650 <__malloc_lock+0x8>)
 800464a:	f000 b811 	b.w	8004670 <__retarget_lock_acquire_recursive>
 800464e:	bf00      	nop
 8004650:	20000a9c 	.word	0x20000a9c

08004654 <__malloc_unlock>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__malloc_unlock+0x8>)
 8004656:	f000 b80c 	b.w	8004672 <__retarget_lock_release_recursive>
 800465a:	bf00      	nop
 800465c:	20000a9c 	.word	0x20000a9c

08004660 <_malloc_usable_size_r>:
 8004660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004664:	1f18      	subs	r0, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	bfbc      	itt	lt
 800466a:	580b      	ldrlt	r3, [r1, r0]
 800466c:	18c0      	addlt	r0, r0, r3
 800466e:	4770      	bx	lr

08004670 <__retarget_lock_acquire_recursive>:
 8004670:	4770      	bx	lr

08004672 <__retarget_lock_release_recursive>:
 8004672:	4770      	bx	lr

08004674 <_init>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr

08004680 <_fini>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr
