
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cfc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f10  08003f10  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f18  08003f18  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08003f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000007f0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000880  20000880  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000ccb9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000eeaa  00000000  00000000  0002cd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d67  00000000  00000000  0003bc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b90  00000000  00000000  0003d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000db011  00000000  00000000  0003e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ab8  00000000  00000000  00119538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024615  00000000  00000000  00119ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e605  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033f4  00000000  00000000  0013e658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003e94 	.word	0x08003e94

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08003e94 	.word	0x08003e94

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <asm_zeros>:
@   r0: vector
@   r1: longitud
@
.thumb_func
    asm_zeros:
    	mov r2, 0
 80001f8:	f04f 0200 	mov.w	r2, #0

080001fc <.asm_zeros_loop>:
    .asm_zeros_loop:
    	str r2, [r0], 4
 80001fc:	f840 2b04 	str.w	r2, [r0], #4
    	subs r1, 1
 8000200:	3901      	subs	r1, #1
    	bne .asm_zeros_loop
 8000202:	d1fb      	bne.n	80001fc <.asm_zeros_loop>
    	bx lr
 8000204:	4770      	bx	lr

08000206 <strlen>:
 8000206:	4603      	mov	r3, r0
 8000208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020c:	2a00      	cmp	r2, #0
 800020e:	d1fb      	bne.n	8000208 <strlen+0x2>
 8000210:	1a18      	subs	r0, r3, r0
 8000212:	3801      	subs	r0, #1
 8000214:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <zeros>:


/* Functions definitions -----------------------------------------------------*/

void zeros(uint32_t *vector, uint32_t longitud)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
//	for (;vector < (&vector[0u] + longitud); vector++) {
//		*vector = 0u;
//	}

	while (longitud--) {
 80005ce:	e004      	b.n	80005da <zeros+0x16>
		*vector++ = 0u;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	1d1a      	adds	r2, r3, #4
 80005d4:	607a      	str	r2, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
	while (longitud--) {
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	1e5a      	subs	r2, r3, #1
 80005de:	603a      	str	r2, [r7, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f5      	bne.n	80005d0 <zeros+0xc>
	}
}
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b085      	sub	sp, #20
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	60b9      	str	r1, [r7, #8]
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	603b      	str	r3, [r7, #0]
//	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
//		tmp = *vectorIn * escalar;
//		*vectorOut++ = tmp;
//	}

	while (longitud--) {
 8000600:	e00a      	b.n	8000618 <productoEscalar32+0x26>
		*vectorOut++ = *vectorIn++ * escalar;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	1d1a      	adds	r2, r3, #4
 8000606:	60fa      	str	r2, [r7, #12]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	1d19      	adds	r1, r3, #4
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	fb01 f202 	mul.w	r2, r1, r2
 8000616:	601a      	str	r2, [r3, #0]
	while (longitud--) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	1e5a      	subs	r2, r3, #1
 800061c:	607a      	str	r2, [r7, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1ef      	bne.n	8000602 <productoEscalar32+0x10>
	}
}
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	4611      	mov	r1, r2
 800063c:	461a      	mov	r2, r3
 800063e:	460b      	mov	r3, r1
 8000640:	80fb      	strh	r3, [r7, #6]
 8000642:	4613      	mov	r3, r2
 8000644:	80bb      	strh	r3, [r7, #4]
//	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
//		tmp = *vectorIn * escalar;
//		*vectorOut++ = tmp;
//	}

	while (longitud--) {
 8000646:	e00b      	b.n	8000660 <productoEscalar16+0x30>
		*vectorOut++ = *vectorIn++ * escalar;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	1c9a      	adds	r2, r3, #2
 800064c:	60fa      	str	r2, [r7, #12]
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c99      	adds	r1, r3, #2
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	88b9      	ldrh	r1, [r7, #4]
 8000658:	fb11 f202 	smulbb	r2, r1, r2
 800065c:	b292      	uxth	r2, r2
 800065e:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	1e5a      	subs	r2, r3, #1
 8000664:	80fa      	strh	r2, [r7, #6]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1ee      	bne.n	8000648 <productoEscalar16+0x18>
	}
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	4611      	mov	r1, r2
 8000684:	461a      	mov	r2, r3
 8000686:	460b      	mov	r3, r1
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	4613      	mov	r3, r2
 800068c:	80bb      	strh	r3, [r7, #4]
//		/* Haciendo tmp &= 0x0FFF se logra overflow a 12 bits, no saturación */
//		tmp = tmp > 0x0FFF ? 0x0FFF : tmp;
//		*vectorOut++ = tmp;
//	}

	while (longitud--) {
 800068e:	e00e      	b.n	80006ae <productoEscalar12+0x36>
		*vectorOut++ = (*vectorIn++ * escalar) & 0x0FFF;
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	1c9a      	adds	r2, r3, #2
 8000694:	60fa      	str	r2, [r7, #12]
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	88ba      	ldrh	r2, [r7, #4]
 800069a:	fb12 f303 	smulbb	r3, r2, r3
 800069e:	b29a      	uxth	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	1c99      	adds	r1, r3, #2
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80006aa:	b292      	uxth	r2, r2
 80006ac:	801a      	strh	r2, [r3, #0]
	while (longitud--) {
 80006ae:	88fb      	ldrh	r3, [r7, #6]
 80006b0:	1e5a      	subs	r2, r3, #1
 80006b2:	80fa      	strh	r2, [r7, #6]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1eb      	bne.n	8000690 <productoEscalar12+0x18>
	}
}
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b088      	sub	sp, #32
 80006ca:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006cc:	f3ef 8314 	mrs	r3, CONTROL
 80006d0:	607b      	str	r3, [r7, #4]
  return(result);
 80006d2:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80006d4:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	61fb      	str	r3, [r7, #28]
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	f383 8814 	msr	CONTROL, r3
}
 80006e8:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006ea:	f3ef 8314 	mrs	r3, CONTROL
 80006ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80006f0:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80006f2:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f023 0301 	bic.w	r3, r3, #1
 80006fa:	61fb      	str	r3, [r7, #28]
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	f383 8814 	msr	CONTROL, r3
}
 8000706:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000708:	f3ef 8314 	mrs	r3, CONTROL
 800070c:	617b      	str	r3, [r7, #20]
  return(result);
 800070e:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000710:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000712:	f7ff fd6d 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000716:	f3ef 8314 	mrs	r3, CONTROL
 800071a:	61bb      	str	r3, [r7, #24]
  return(result);
 800071c:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 800071e:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000720:	bf00      	nop
 8000722:	3720      	adds	r7, #32
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc43 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f84f 	bl	80007d4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 8000736:	4820      	ldr	r0, [pc, #128]	; (80007b8 <main+0x90>)
 8000738:	f7ff fd65 	bl	8000206 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	230a      	movs	r3, #10
 8000742:	491d      	ldr	r1, [pc, #116]	; (80007b8 <main+0x90>)
 8000744:	481d      	ldr	r0, [pc, #116]	; (80007bc <main+0x94>)
 8000746:	f002 f88e 	bl	8002866 <HAL_UART_Transmit>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074a:	f000 f953 	bl	80009f4 <MX_GPIO_Init>
  MX_ETH_Init();
 800074e:	f000 f8ab 	bl	80008a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000752:	f000 f8f7 	bl	8000944 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000756:	f000 f91f 	bl	8000998 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 800075a:	f7ff ffb4 	bl	80006c6 <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 800075e:	2103      	movs	r1, #3
 8000760:	2005      	movs	r0, #5
 8000762:	f7ff fd47 	bl	80001f4 <asm_sum>
 8000766:	6078      	str	r0, [r7, #4]
  /* USER CODE END 2 */

  sprintf( buffer, "asm_sum(5,3) = %lu\r\n", (uint32_t)Resultado );
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	4915      	ldr	r1, [pc, #84]	; (80007c0 <main+0x98>)
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <main+0x90>)
 800076e:	f002 ff23 	bl	80035b8 <siprintf>
  HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <main+0x90>)
 8000774:	f7ff fd47 	bl	8000206 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29a      	uxth	r2, r3
 800077c:	230a      	movs	r3, #10
 800077e:	490e      	ldr	r1, [pc, #56]	; (80007b8 <main+0x90>)
 8000780:	480e      	ldr	r0, [pc, #56]	; (80007bc <main+0x94>)
 8000782:	f002 f870 	bl	8002866 <HAL_UART_Transmit>

  zeros((uint32_t *)buffer, LENGTH_BUFFER_MSG);
 8000786:	2119      	movs	r1, #25
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <main+0x90>)
 800078a:	f7ff ff1b 	bl	80005c4 <zeros>

  productoEscalar32(buffer_in_32, buffer_out_32, (uint32_t)LENGTH_BUFFER_IN_OUT, 5u);
 800078e:	2305      	movs	r3, #5
 8000790:	2205      	movs	r2, #5
 8000792:	490c      	ldr	r1, [pc, #48]	; (80007c4 <main+0x9c>)
 8000794:	480c      	ldr	r0, [pc, #48]	; (80007c8 <main+0xa0>)
 8000796:	f7ff ff2c 	bl	80005f2 <productoEscalar32>

  productoEscalar16(buffer_in_16, buffer_out_16, (uint16_t)LENGTH_BUFFER_IN_OUT, 2u);
 800079a:	2302      	movs	r3, #2
 800079c:	2205      	movs	r2, #5
 800079e:	490b      	ldr	r1, [pc, #44]	; (80007cc <main+0xa4>)
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0xa8>)
 80007a2:	f7ff ff45 	bl	8000630 <productoEscalar16>

  productoEscalar12(buffer_in_16, buffer_out_16, (uint16_t)LENGTH_BUFFER_IN_OUT, 1024u);
 80007a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007aa:	2205      	movs	r2, #5
 80007ac:	4907      	ldr	r1, [pc, #28]	; (80007cc <main+0xa4>)
 80007ae:	4808      	ldr	r0, [pc, #32]	; (80007d0 <main+0xa8>)
 80007b0:	f7ff ff62 	bl	8000678 <productoEscalar12>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <main+0x8c>
 80007b6:	bf00      	nop
 80007b8:	20000824 	.word	0x20000824
 80007bc:	200002d4 	.word	0x200002d4
 80007c0:	08003eac 	.word	0x08003eac
 80007c4:	20000840 	.word	0x20000840
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000854 	.word	0x20000854
 80007d0:	20000014 	.word	0x20000014

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	2230      	movs	r2, #48	; 0x30
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fee0 	bl	80035a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <SystemClock_Config+0xcc>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a27      	ldr	r2, [pc, #156]	; (80008a0 <SystemClock_Config+0xcc>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b25      	ldr	r3, [pc, #148]	; (80008a0 <SystemClock_Config+0xcc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SystemClock_Config+0xd0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <SystemClock_Config+0xd0>)
 800081e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <SystemClock_Config+0xd0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000834:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000848:	23a8      	movs	r3, #168	; 0xa8
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800084c:	2302      	movs	r3, #2
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000850:	2307      	movs	r3, #7
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	4618      	mov	r0, r3
 800085a:	f001 fb1f 	bl	8001e9c <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000864:	f000 f974 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	230f      	movs	r3, #15
 800086a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086c:	2302      	movs	r3, #2
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000874:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800087a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	2105      	movs	r1, #5
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fd80 	bl	800238c <HAL_RCC_ClockConfig>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000892:	f000 f95d 	bl	8000b50 <Error_Handler>
  }
}
 8000896:	bf00      	nop
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ETH_Init+0x84>)
 80008ae:	4a20      	ldr	r2, [pc, #128]	; (8000930 <MX_ETH_Init+0x88>)
 80008b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_ETH_Init+0x8c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_ETH_Init+0x8c>)
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_ETH_Init+0x8c>)
 80008c0:	22e1      	movs	r2, #225	; 0xe1
 80008c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_ETH_Init+0x8c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_ETH_Init+0x8c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_ETH_Init+0x8c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ETH_Init+0x84>)
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <MX_ETH_Init+0x8c>)
 80008da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_ETH_Init+0x84>)
 80008de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ETH_Init+0x84>)
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <MX_ETH_Init+0x90>)
 80008e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_ETH_Init+0x84>)
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_ETH_Init+0x94>)
 80008ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_ETH_Init+0x84>)
 80008f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_ETH_Init+0x84>)
 80008fa:	f000 fcd9 	bl	80012b0 <HAL_ETH_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 f924 	bl	8000b50 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000908:	2238      	movs	r2, #56	; 0x38
 800090a:	2100      	movs	r1, #0
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <MX_ETH_Init+0x98>)
 800090e:	f002 fe4b 	bl	80035a8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_ETH_Init+0x98>)
 8000914:	2221      	movs	r2, #33	; 0x21
 8000916:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_ETH_Init+0x98>)
 800091a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800091e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_ETH_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000224 	.word	0x20000224
 8000930:	40028000 	.word	0x40028000
 8000934:	20000860 	.word	0x20000860
 8000938:	20000184 	.word	0x20000184
 800093c:	200000e4 	.word	0x200000e4
 8000940:	200000ac 	.word	0x200000ac

08000944 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART3_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART3_UART_Init+0x4c>)
 800097c:	f001 ff26 	bl	80027cc <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f8e3 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200002d4 	.word	0x200002d4
 8000994:	40004800 	.word	0x40004800

08000998 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2204      	movs	r2, #4
 80009a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2201      	movs	r2, #1
 80009c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	; (80009f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009dc:	f001 f941 	bl	8001c62 <HAL_PCD_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e6:	f000 f8b3 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000318 	.word	0x20000318

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08c      	sub	sp, #48	; 0x30
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61bb      	str	r3, [r7, #24]
 8000a0e:	4b4c      	ldr	r3, [pc, #304]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	4a4b      	ldr	r2, [pc, #300]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1a:	4b49      	ldr	r3, [pc, #292]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	61bb      	str	r3, [r7, #24]
 8000a24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	4b45      	ldr	r3, [pc, #276]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	4a44      	ldr	r2, [pc, #272]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	6313      	str	r3, [r2, #48]	; 0x30
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a3d      	ldr	r2, [pc, #244]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b3b      	ldr	r3, [pc, #236]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_GPIO_Init+0x14c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ab8:	4822      	ldr	r0, [pc, #136]	; (8000b44 <MX_GPIO_Init+0x150>)
 8000aba:	f001 f8b9 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	4821      	ldr	r0, [pc, #132]	; (8000b48 <MX_GPIO_Init+0x154>)
 8000ac4:	f001 f8b4 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ace:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	481b      	ldr	r0, [pc, #108]	; (8000b4c <MX_GPIO_Init+0x158>)
 8000ae0:	f000 fefa 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ae4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	2301      	movs	r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4811      	ldr	r0, [pc, #68]	; (8000b44 <MX_GPIO_Init+0x150>)
 8000afe:	f000 feeb 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b02:	2340      	movs	r3, #64	; 0x40
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <MX_GPIO_Init+0x154>)
 8000b1a:	f000 fedd 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_GPIO_Init+0x154>)
 8000b32:	f000 fed1 	bl	80018d8 <HAL_GPIO_Init>

}
 8000b36:	bf00      	nop
 8000b38:	3730      	adds	r7, #48	; 0x30
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020400 	.word	0x40020400
 8000b48:	40021800 	.word	0x40021800
 8000b4c:	40020800 	.word	0x40020800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08e      	sub	sp, #56	; 0x38
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a55      	ldr	r2, [pc, #340]	; (8000d20 <HAL_ETH_MspInit+0x174>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	f040 80a4 	bne.w	8000d18 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
 8000bd4:	4b53      	ldr	r3, [pc, #332]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	4a52      	ldr	r2, [pc, #328]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000bda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bde:	6313      	str	r3, [r2, #48]	; 0x30
 8000be0:	4b50      	ldr	r3, [pc, #320]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be8:	623b      	str	r3, [r7, #32]
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a4b      	ldr	r2, [pc, #300]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000bf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfc:	4b49      	ldr	r3, [pc, #292]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	4b45      	ldr	r3, [pc, #276]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c10:	4a44      	ldr	r2, [pc, #272]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c16:	6313      	str	r3, [r2, #48]	; 0x30
 8000c18:	4b42      	ldr	r3, [pc, #264]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	4b3e      	ldr	r3, [pc, #248]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a3d      	ldr	r2, [pc, #244]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c48:	4a36      	ldr	r2, [pc, #216]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c50:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c64:	4a2f      	ldr	r2, [pc, #188]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	4b29      	ldr	r3, [pc, #164]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a28      	ldr	r2, [pc, #160]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
 8000c88:	4b26      	ldr	r3, [pc, #152]	; (8000d24 <HAL_ETH_MspInit+0x178>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c94:	2332      	movs	r3, #50	; 0x32
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	481e      	ldr	r0, [pc, #120]	; (8000d28 <HAL_ETH_MspInit+0x17c>)
 8000cb0:	f000 fe12 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cb4:	2386      	movs	r3, #134	; 0x86
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc4:	230b      	movs	r3, #11
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4817      	ldr	r0, [pc, #92]	; (8000d2c <HAL_ETH_MspInit+0x180>)
 8000cd0:	f000 fe02 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <HAL_ETH_MspInit+0x184>)
 8000cf2:	f000 fdf1 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cf6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d04:	2303      	movs	r3, #3
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d08:	230b      	movs	r3, #11
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4808      	ldr	r0, [pc, #32]	; (8000d34 <HAL_ETH_MspInit+0x188>)
 8000d14:	f000 fde0 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d18:	bf00      	nop
 8000d1a:	3738      	adds	r7, #56	; 0x38
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40028000 	.word	0x40028000
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40020800 	.word	0x40020800
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40021800 	.word	0x40021800

08000d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_UART_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12c      	bne.n	8000db4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da4:	2307      	movs	r3, #7
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_UART_MspInit+0x8c>)
 8000db0:	f000 fd92 	bl	80018d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40004800 	.word	0x40004800
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020c00 	.word	0x40020c00

08000dc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000de8:	d13f      	bne.n	8000e6a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e06:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e18:	230a      	movs	r3, #10
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4815      	ldr	r0, [pc, #84]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e24:	f000 fd58 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480e      	ldr	r0, [pc, #56]	; (8000e78 <HAL_PCD_MspInit+0xb0>)
 8000e3e:	f000 fd4b 	bl	80018d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_PCD_MspInit+0xac>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e6a:	bf00      	nop
 8000e6c:	3728      	adds	r7, #40	; 0x28
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020000 	.word	0x40020000

08000e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler+0x4>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <HardFault_Handler+0x4>

08000e88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <MemManage_Handler+0x4>

08000e8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <BusFault_Handler+0x4>

08000e94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <UsageFault_Handler+0x4>

08000e9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec8:	f000 f8c8 	bl	800105c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f002 fb28 	bl	8003554 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20030000 	.word	0x20030000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	20000868 	.word	0x20000868
 8000f38:	20000880 	.word	0x20000880

08000f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <SystemInit+0x20>)
 8000f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <SystemInit+0x20>)
 8000f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  nop
 8000f60:	bf00      	nop
  nop
 8000f62:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8000f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f68:	480d      	ldr	r0, [pc, #52]	; (8000fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6a:	490e      	ldr	r1, [pc, #56]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f80:	4c0b      	ldr	r4, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f8e:	f7ff ffd5 	bl	8000f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f92:	f002 fae5 	bl	8003560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f96:	f7ff fbc7 	bl	8000728 <main>
  bx  lr    
 8000f9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fa8:	08003f20 	.word	0x08003f20
  ldr r2, =_sbss
 8000fac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fb0:	20000880 	.word	0x20000880

08000fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_Init+0x40>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_Init+0x40>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_Init+0x40>)
 8000fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 f931 	bl	8001248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f000 f808 	bl	8000ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fec:	f7ff fdb6 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023c00 	.word	0x40023c00

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_InitTick+0x54>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x58>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001012:	fbb3 f3f1 	udiv	r3, r3, r1
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f93b 	bl	8001296 <HAL_SYSTICK_Config>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e00e      	b.n	8001048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d80a      	bhi.n	8001046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001030:	2200      	movs	r2, #0
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001038:	f000 f911 	bl	800125e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800103c:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_InitTick+0x5c>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001042:	2300      	movs	r3, #0
 8001044:	e000      	b.n	8001048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000020 	.word	0x20000020
 8001054:	20000028 	.word	0x20000028
 8001058:	20000024 	.word	0x20000024

0800105c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_IncTick+0x20>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x24>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4413      	add	r3, r2
 800106c:	4a04      	ldr	r2, [pc, #16]	; (8001080 <HAL_IncTick+0x24>)
 800106e:	6013      	str	r3, [r2, #0]
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000028 	.word	0x20000028
 8001080:	2000086c 	.word	0x2000086c

08001084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return uwTick;
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetTick+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2000086c 	.word	0x2000086c

0800109c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff ffee 	bl	8001084 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010b4:	d005      	beq.n	80010c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <HAL_Delay+0x44>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c2:	bf00      	nop
 80010c4:	f7ff ffde 	bl	8001084 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d8f7      	bhi.n	80010c4 <HAL_Delay+0x28>
  {
  }
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000028 	.word	0x20000028

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	6039      	str	r1, [r7, #0]
 8001152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	2b00      	cmp	r3, #0
 800115a:	db0a      	blt.n	8001172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	490c      	ldr	r1, [pc, #48]	; (8001194 <__NVIC_SetPriority+0x4c>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	0112      	lsls	r2, r2, #4
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	440b      	add	r3, r1
 800116c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001170:	e00a      	b.n	8001188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4908      	ldr	r1, [pc, #32]	; (8001198 <__NVIC_SetPriority+0x50>)
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	f003 030f 	and.w	r3, r3, #15
 800117e:	3b04      	subs	r3, #4
 8001180:	0112      	lsls	r2, r2, #4
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	440b      	add	r3, r1
 8001186:	761a      	strb	r2, [r3, #24]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000e100 	.word	0xe000e100
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800119c:	b480      	push	{r7}
 800119e:	b089      	sub	sp, #36	; 0x24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	f1c3 0307 	rsb	r3, r3, #7
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	bf28      	it	cs
 80011ba:	2304      	movcs	r3, #4
 80011bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3304      	adds	r3, #4
 80011c2:	2b06      	cmp	r3, #6
 80011c4:	d902      	bls.n	80011cc <NVIC_EncodePriority+0x30>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3b03      	subs	r3, #3
 80011ca:	e000      	b.n	80011ce <NVIC_EncodePriority+0x32>
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43da      	mvns	r2, r3
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa01 f303 	lsl.w	r3, r1, r3
 80011ee:	43d9      	mvns	r1, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	4313      	orrs	r3, r2
         );
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3724      	adds	r7, #36	; 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
	...

08001204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001214:	d301      	bcc.n	800121a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001216:	2301      	movs	r3, #1
 8001218:	e00f      	b.n	800123a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <SysTick_Config+0x40>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3b01      	subs	r3, #1
 8001220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001222:	210f      	movs	r1, #15
 8001224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001228:	f7ff ff8e 	bl	8001148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <SysTick_Config+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001232:	4b04      	ldr	r3, [pc, #16]	; (8001244 <SysTick_Config+0x40>)
 8001234:	2207      	movs	r2, #7
 8001236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010

08001248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff47 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001270:	f7ff ff5c 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68b9      	ldr	r1, [r7, #8]
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff ff8e 	bl	800119c <NVIC_EncodePriority>
 8001280:	4602      	mov	r2, r0
 8001282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff5d 	bl	8001148 <__NVIC_SetPriority>
}
 800128e:	bf00      	nop
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffb0 	bl	8001204 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e06c      	b.n	800139c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d106      	bne.n	80012da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2223      	movs	r2, #35	; 0x23
 80012d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff fc69 	bl	8000bac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b31      	ldr	r3, [pc, #196]	; (80013a4 <HAL_ETH_Init+0xf4>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <HAL_ETH_Init+0xf4>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <HAL_ETH_Init+0xf4>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012f6:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HAL_ETH_Init+0xf8>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <HAL_ETH_Init+0xf8>)
 80012fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001300:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001302:	4b29      	ldr	r3, [pc, #164]	; (80013a8 <HAL_ETH_Init+0xf8>)
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	4927      	ldr	r1, [pc, #156]	; (80013a8 <HAL_ETH_Init+0xf8>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_ETH_Init+0xf8>)
 8001312:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800132a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132c:	f7ff feaa 	bl	8001084 <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001332:	e011      	b.n	8001358 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001334:	f7ff fea6 	bl	8001084 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001342:	d909      	bls.n	8001358 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	22e0      	movs	r2, #224	; 0xe0
 8001350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e021      	b.n	800139c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e4      	bne.n	8001334 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f944 	bl	80015f8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f9eb 	bl	800174c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 fa41 	bl	80017fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	461a      	mov	r2, r3
 8001382:	2100      	movs	r1, #0
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 f9a9 	bl	80016dc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2210      	movs	r2, #16
 8001396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800

080013ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <ETH_SetMACConfig+0x134>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	7c1b      	ldrb	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d102      	bne.n	80013d4 <ETH_SetMACConfig+0x28>
 80013ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013d2:	e000      	b.n	80013d6 <ETH_SetMACConfig+0x2a>
 80013d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7c5b      	ldrb	r3, [r3, #17]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <ETH_SetMACConfig+0x38>
 80013de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e2:	e000      	b.n	80013e6 <ETH_SetMACConfig+0x3a>
 80013e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	7fdb      	ldrb	r3, [r3, #31]
 80013f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	7f92      	ldrb	r2, [r2, #30]
 8001400:	2a00      	cmp	r2, #0
 8001402:	d102      	bne.n	800140a <ETH_SetMACConfig+0x5e>
 8001404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001408:	e000      	b.n	800140c <ETH_SetMACConfig+0x60>
 800140a:	2200      	movs	r2, #0
                        macconf->Speed |
 800140c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	7f1b      	ldrb	r3, [r3, #28]
 8001412:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001414:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800141a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	791b      	ldrb	r3, [r3, #4]
 8001420:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001422:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	f892 2020 	ldrb.w	r2, [r2, #32]
 800142a:	2a00      	cmp	r2, #0
 800142c:	d102      	bne.n	8001434 <ETH_SetMACConfig+0x88>
 800142e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001432:	e000      	b.n	8001436 <ETH_SetMACConfig+0x8a>
 8001434:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	7bdb      	ldrb	r3, [r3, #15]
 800143c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800143e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001444:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800144c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800144e:	4313      	orrs	r3, r2
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fe18 	bl	800109c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001492:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001498:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 80014a0:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80014a8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b0:	4313      	orrs	r3, r2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff fde7 	bl	800109c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	619a      	str	r2, [r3, #24]
}
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	ff20810f 	.word	0xff20810f

080014e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <ETH_SetDMAConfig+0x110>)
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7b1b      	ldrb	r3, [r3, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <ETH_SetDMAConfig+0x2c>
 800150a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800150e:	e000      	b.n	8001512 <ETH_SetDMAConfig+0x2e>
 8001510:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	7b5b      	ldrb	r3, [r3, #13]
 8001516:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001518:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	7f52      	ldrb	r2, [r2, #29]
 800151e:	2a00      	cmp	r2, #0
 8001520:	d102      	bne.n	8001528 <ETH_SetDMAConfig+0x44>
 8001522:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001526:	e000      	b.n	800152a <ETH_SetDMAConfig+0x46>
 8001528:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	7b9b      	ldrb	r3, [r3, #14]
 8001530:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001532:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001538:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7f1b      	ldrb	r3, [r3, #28]
 800153e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001540:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	7f9b      	ldrb	r3, [r3, #30]
 8001546:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001548:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800154e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001556:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001558:	4313      	orrs	r3, r2
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001568:	461a      	mov	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff fd8e 	bl	800109c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001588:	461a      	mov	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	791b      	ldrb	r3, [r3, #4]
 8001592:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001598:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800159e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015a4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015ac:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015ae:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015b6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015bc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ca:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fd5f 	bl	800109c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	f8de3f23 	.word	0xf8de3f23

080015f8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0a6      	sub	sp, #152	; 0x98
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001600:	2301      	movs	r3, #1
 8001602:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800160c:	2300      	movs	r3, #0
 800160e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001616:	2301      	movs	r3, #1
 8001618:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001634:	2300      	movs	r3, #0
 8001636:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800163e:	2300      	movs	r3, #0
 8001640:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800165a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800165e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001660:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001664:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800166c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001670:	4619      	mov	r1, r3
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe9a 	bl	80013ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001678:	2301      	movs	r3, #1
 800167a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800167c:	2301      	movs	r3, #1
 800167e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001680:	2301      	movs	r3, #1
 8001682:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800168e:	2300      	movs	r3, #0
 8001690:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800169e:	2301      	movs	r3, #1
 80016a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	4619      	mov	r1, r3
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff08 	bl	80014e4 <ETH_SetDMAConfig>
}
 80016d4:	bf00      	nop
 80016d6:	3798      	adds	r7, #152	; 0x98
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016dc:	b480      	push	{r7}
 80016de:	b087      	sub	sp, #28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3305      	adds	r3, #5
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	3204      	adds	r2, #4
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <ETH_MACAddressConfig+0x68>)
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3303      	adds	r3, #3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	3302      	adds	r3, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	041b      	lsls	r3, r3, #16
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	4313      	orrs	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	7812      	ldrb	r2, [r2, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <ETH_MACAddressConfig+0x6c>)
 800172e:	4413      	add	r3, r2
 8001730:	461a      	mov	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	6013      	str	r3, [r2, #0]
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40028040 	.word	0x40028040
 8001748:	40028044 	.word	0x40028044

0800174c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	e03e      	b.n	80017d8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68d9      	ldr	r1, [r3, #12]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	440b      	add	r3, r1
 800176a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001784:	68b9      	ldr	r1, [r7, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68fa      	ldr	r2, [r7, #12]
 800178a:	3206      	adds	r2, #6
 800178c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d80c      	bhi.n	80017bc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68d9      	ldr	r1, [r3, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	440b      	add	r3, r1
 80017b4:	461a      	mov	r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	e004      	b.n	80017c6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	461a      	mov	r2, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d9bd      	bls.n	800175a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f0:	611a      	str	r2, [r3, #16]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e046      	b.n	800189a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6919      	ldr	r1, [r3, #16]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	2200      	movs	r2, #0
 8001828:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001848:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001850:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	3212      	adds	r2, #18
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b02      	cmp	r3, #2
 800186e:	d80c      	bhi.n	800188a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6919      	ldr	r1, [r3, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	461a      	mov	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60da      	str	r2, [r3, #12]
 8001888:	e004      	b.n	8001894 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	461a      	mov	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d9b5      	bls.n	800180c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691a      	ldr	r2, [r3, #16]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ca:	60da      	str	r2, [r3, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e177      	b.n	8001be4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8166 	bne.w	8001bde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d005      	beq.n	800192a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	2b02      	cmp	r3, #2
 8001928:	d130      	bne.n	800198c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 0201 	and.w	r2, r3, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b03      	cmp	r3, #3
 8001996:	d017      	beq.n	80019c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d123      	bne.n	8001a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80c0 	beq.w	8001bde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7a:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <HAL_GPIO_Init+0x328>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_GPIO_Init+0x32c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d037      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a56      	ldr	r2, [pc, #344]	; (8001c0c <HAL_GPIO_Init+0x334>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02b      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a55      	ldr	r2, [pc, #340]	; (8001c10 <HAL_GPIO_Init+0x338>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d025      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a54      	ldr	r2, [pc, #336]	; (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01f      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a53      	ldr	r2, [pc, #332]	; (8001c18 <HAL_GPIO_Init+0x340>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_GPIO_Init+0x344>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x226>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a51      	ldr	r2, [pc, #324]	; (8001c20 <HAL_GPIO_Init+0x348>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x222>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <HAL_GPIO_Init+0x34c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x21e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x21a>
 8001aee:	2309      	movs	r3, #9
 8001af0:	e012      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af2:	230a      	movs	r3, #10
 8001af4:	e010      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af6:	2308      	movs	r3, #8
 8001af8:	e00e      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00c      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00a      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	; (8001c00 <HAL_GPIO_Init+0x328>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5a:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b84:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f ae84 	bls.w	80018f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40021c00 	.word	0x40021c00
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40022400 	.word	0x40022400
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c64:	b08f      	sub	sp, #60	; 0x3c
 8001c66:	af0a      	add	r7, sp, #40	; 0x28
 8001c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e10f      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff f89a 	bl	8000dc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 f9ad 	bl	8003012 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	687e      	ldr	r6, [r7, #4]
 8001cc0:	466d      	mov	r5, sp
 8001cc2:	f106 0410 	add.w	r4, r6, #16
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd6:	1d33      	adds	r3, r6, #4
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f001 f938 	bl	8002f50 <USB_CoreInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0d0      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 f99b 	bl	8003034 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e04a      	b.n	8001d9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	333d      	adds	r3, #61	; 0x3d
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	333c      	adds	r3, #60	; 0x3c
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	b298      	uxth	r0, r3
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3344      	adds	r3, #68	; 0x44
 8001d40:	4602      	mov	r2, r0
 8001d42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	3340      	adds	r3, #64	; 0x40
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4413      	add	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3348      	adds	r3, #72	; 0x48
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	334c      	adds	r3, #76	; 0x4c
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3354      	adds	r3, #84	; 0x54
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	3301      	adds	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3af      	bcc.n	8001d04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e044      	b.n	8001e34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3301      	adds	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3b5      	bcc.n	8001daa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	687e      	ldr	r6, [r7, #4]
 8001e46:	466d      	mov	r5, sp
 8001e48:	f106 0410 	add.w	r4, r6, #16
 8001e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e5c:	1d33      	adds	r3, r6, #4
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f001 f933 	bl	80030cc <USB_DevInit>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e00d      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fafe 	bl	800348e <USB_DevDisconnect>

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e267      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b85      	ldr	r3, [pc, #532]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d112      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b82      	ldr	r3, [pc, #520]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e242      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x74>
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a75      	ldr	r2, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b70      	ldr	r3, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6f      	ldr	r2, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6c      	ldr	r2, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a68      	ldr	r2, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a65      	ldr	r2, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f896 	bl	8001084 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f892 	bl	8001084 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e207      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f882 	bl	8001084 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f87e 	bl	8001084 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1f3      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c7      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f837 	bl	8001084 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff f833 	bl	8001084 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a8      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4925      	ldr	r1, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f816 	bl	8001084 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff f812 	bl	8001084 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e187      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d036      	beq.n	80020f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe fff6 	bl	8001084 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe fff2 	bl	8001084 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e167      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x200>
 80020ba:	e01b      	b.n	80020f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7fe ffdf 	bl	8001084 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e00e      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7fe ffdb 	bl	8001084 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d907      	bls.n	80020e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e150      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	42470000 	.word	0x42470000
 80020e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ea      	bne.n	80020ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8097 	beq.w	8002230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b7d      	ldr	r3, [pc, #500]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a7c      	ldr	r2, [pc, #496]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b7a      	ldr	r3, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b77      	ldr	r3, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a73      	ldr	r2, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7fe ff9b 	bl	8001084 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe ff97 	bl	8001084 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e10c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x2ea>
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a63      	ldr	r2, [pc, #396]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x30c>
 800218e:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a5e      	ldr	r2, [pc, #376]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 80021a8:	4b58      	ldr	r3, [pc, #352]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a54      	ldr	r2, [pc, #336]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff5c 	bl	8001084 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff58 	bl	8001084 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0cb      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ee      	beq.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7fe ff46 	bl	8001084 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe ff42 	bl	8001084 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0b5      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ee      	bne.n	80021fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a38      	ldr	r2, [pc, #224]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800222a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a1 	beq.w	800237c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d05c      	beq.n	8002300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d141      	bne.n	80022d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe ff16 	bl	8001084 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe ff12 	bl	8001084 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e087      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	3b01      	subs	r3, #1
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	491b      	ldr	r1, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe feeb 	bl	8001084 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fee7 	bl	8001084 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e05c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x416>
 80022d0:	e054      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe fed4 	bl	8001084 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fed0 	bl	8001084 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e045      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e038      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000
 8002314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x4ec>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d028      	beq.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d121      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11a      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800234e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002350:	4293      	cmp	r3, r2
 8002352:	d111      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cc      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d90c      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d044      	beq.n	80024ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d119      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d003      	beq.n	800244a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	2b03      	cmp	r3, #3
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e067      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7fe fe02 	bl	8001084 <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe fdfe 	bl	8001084 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e04f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d20c      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fd62 	bl	8000ffc <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	08003ec4 	.word	0x08003ec4
 8002550:	20000020 	.word	0x20000020
 8002554:	20000024 	.word	0x20000024

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800255c:	b094      	sub	sp, #80	; 0x50
 800255e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	647b      	str	r3, [r7, #68]	; 0x44
 8002564:	2300      	movs	r3, #0
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	2300      	movs	r3, #0
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002570:	4b79      	ldr	r3, [pc, #484]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d00d      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x40>
 800257c:	2b08      	cmp	r3, #8
 800257e:	f200 80e1 	bhi.w	8002744 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x34>
 8002586:	2b04      	cmp	r3, #4
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x3a>
 800258a:	e0db      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_GetSysClockFreq+0x204>)
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002590:	e0db      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_GetSysClockFreq+0x208>)
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002596:	e0d8      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a2:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	2200      	movs	r2, #0
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
 80025c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ca:	4622      	mov	r2, r4
 80025cc:	462b      	mov	r3, r5
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4621      	mov	r1, r4
 80025e4:	1a51      	subs	r1, r2, r1
 80025e6:	6139      	str	r1, [r7, #16]
 80025e8:	4629      	mov	r1, r5
 80025ea:	eb63 0301 	sbc.w	r3, r3, r1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025fc:	4659      	mov	r1, fp
 80025fe:	018b      	lsls	r3, r1, #6
 8002600:	4651      	mov	r1, sl
 8002602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002606:	4651      	mov	r1, sl
 8002608:	018a      	lsls	r2, r1, #6
 800260a:	4651      	mov	r1, sl
 800260c:	ebb2 0801 	subs.w	r8, r2, r1
 8002610:	4659      	mov	r1, fp
 8002612:	eb63 0901 	sbc.w	r9, r3, r1
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262a:	4690      	mov	r8, r2
 800262c:	4699      	mov	r9, r3
 800262e:	4623      	mov	r3, r4
 8002630:	eb18 0303 	adds.w	r3, r8, r3
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	462b      	mov	r3, r5
 8002638:	eb49 0303 	adc.w	r3, r9, r3
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264a:	4629      	mov	r1, r5
 800264c:	024b      	lsls	r3, r1, #9
 800264e:	4621      	mov	r1, r4
 8002650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002654:	4621      	mov	r1, r4
 8002656:	024a      	lsls	r2, r1, #9
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265e:	2200      	movs	r2, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
 8002662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002668:	f7fd fe2a 	bl	80002c0 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002674:	e058      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	4618      	mov	r0, r3
 8002680:	4611      	mov	r1, r2
 8002682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0159      	lsls	r1, r3, #5
 800269e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a2:	0150      	lsls	r0, r2, #5
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4641      	mov	r1, r8
 80026aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ae:	4649      	mov	r1, r9
 80026b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c8:	ebb2 040a 	subs.w	r4, r2, sl
 80026cc:	eb63 050b 	sbc.w	r5, r3, fp
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	00eb      	lsls	r3, r5, #3
 80026da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026de:	00e2      	lsls	r2, r4, #3
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	18e3      	adds	r3, r4, r3
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	464b      	mov	r3, r9
 80026ec:	eb45 0303 	adc.w	r3, r5, r3
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fe:	4629      	mov	r1, r5
 8002700:	028b      	lsls	r3, r1, #10
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002708:	4621      	mov	r1, r4
 800270a:	028a      	lsls	r2, r1, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	2200      	movs	r2, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	61fa      	str	r2, [r7, #28]
 8002718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271c:	f7fd fdd0 	bl	80002c0 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	3301      	adds	r3, #1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800273a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetSysClockFreq+0x204>)
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800274c:	4618      	mov	r0, r3
 800274e:	3750      	adds	r7, #80	; 0x50
 8002750:	46bd      	mov	sp, r7
 8002752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	00f42400 	.word	0x00f42400
 8002760:	007a1200 	.word	0x007a1200

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_GetHCLKFreq+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000020 	.word	0x20000020

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002780:	f7ff fff0 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0a9b      	lsrs	r3, r3, #10
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	08003ed4 	.word	0x08003ed4

080027a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a8:	f7ff ffdc 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0b5b      	lsrs	r3, r3, #13
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08003ed4 	.word	0x08003ed4

080027cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e03f      	b.n	800285e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe faa0 	bl	8000d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	; 0x24
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800280e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f929 	bl	8002a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b08a      	sub	sp, #40	; 0x28
 800286a:	af02      	add	r7, sp, #8
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b20      	cmp	r3, #32
 8002884:	d17c      	bne.n	8002980 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_UART_Transmit+0x2c>
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e075      	b.n	8002982 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_UART_Transmit+0x3e>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e06e      	b.n	8002982 <HAL_UART_Transmit+0x11c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2221      	movs	r2, #33	; 0x21
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028ba:	f7fe fbe3 	bl	8001084 <HAL_GetTick>
 80028be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	88fa      	ldrh	r2, [r7, #6]
 80028c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	88fa      	ldrh	r2, [r7, #6]
 80028ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028d4:	d108      	bne.n	80028e8 <HAL_UART_Transmit+0x82>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	e003      	b.n	80028f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028f8:	e02a      	b.n	8002950 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2200      	movs	r2, #0
 8002902:	2180      	movs	r1, #128	; 0x80
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f840 	bl	800298a <UART_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e036      	b.n	8002982 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10b      	bne.n	8002932 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002928:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	3302      	adds	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e007      	b.n	8002942 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3301      	adds	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1cf      	bne.n	80028fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	2140      	movs	r1, #64	; 0x40
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f810 	bl	800298a <UART_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e006      	b.n	8002982 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800297c:	2300      	movs	r3, #0
 800297e:	e000      	b.n	8002982 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002980:	2302      	movs	r3, #2
  }
}
 8002982:	4618      	mov	r0, r3
 8002984:	3720      	adds	r7, #32
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b090      	sub	sp, #64	; 0x40
 800298e:	af00      	add	r7, sp, #0
 8002990:	60f8      	str	r0, [r7, #12]
 8002992:	60b9      	str	r1, [r7, #8]
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	4613      	mov	r3, r2
 8002998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299a:	e050      	b.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029a2:	d04c      	beq.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80029a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <UART_WaitOnFlagUntilTimeout+0x30>
 80029aa:	f7fe fb6b 	bl	8001084 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d241      	bcs.n	8002a3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c4:	e853 3f00 	ldrex	r3, [r3]
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	330c      	adds	r3, #12
 80029d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029da:	637a      	str	r2, [r7, #52]	; 0x34
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e2:	e841 2300 	strex	r3, r2, [r1]
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1e5      	bne.n	80029ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3314      	adds	r3, #20
 80029f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	e853 3f00 	ldrex	r3, [r3]
 80029fc:	613b      	str	r3, [r7, #16]
   return(result);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3314      	adds	r3, #20
 8002a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a0e:	623a      	str	r2, [r7, #32]
 8002a10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a12:	69f9      	ldr	r1, [r7, #28]
 8002a14:	6a3a      	ldr	r2, [r7, #32]
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e5      	bne.n	80029ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e00f      	b.n	8002a5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4013      	ands	r3, r2
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	bf0c      	ite	eq
 8002a4e:	2301      	moveq	r3, #1
 8002a50:	2300      	movne	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d09f      	beq.n	800299c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3740      	adds	r7, #64	; 0x40
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a6c:	b0c0      	sub	sp, #256	; 0x100
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	ea40 0301 	orr.w	r3, r0, r1
 8002a90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ac0:	f021 010c 	bic.w	r1, r1, #12
 8002ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae2:	6999      	ldr	r1, [r3, #24]
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	ea40 0301 	orr.w	r3, r0, r1
 8002aee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b8f      	ldr	r3, [pc, #572]	; (8002d34 <UART_SetConfig+0x2cc>)
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d005      	beq.n	8002b08 <UART_SetConfig+0xa0>
 8002afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b8d      	ldr	r3, [pc, #564]	; (8002d38 <UART_SetConfig+0x2d0>)
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d104      	bne.n	8002b12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b08:	f7ff fe4c 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 8002b0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002b10:	e003      	b.n	8002b1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b12:	f7ff fe33 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 8002b16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b24:	f040 810c 	bne.w	8002d40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002b36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002b3a:	4622      	mov	r2, r4
 8002b3c:	462b      	mov	r3, r5
 8002b3e:	1891      	adds	r1, r2, r2
 8002b40:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b42:	415b      	adcs	r3, r3
 8002b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	eb12 0801 	adds.w	r8, r2, r1
 8002b50:	4629      	mov	r1, r5
 8002b52:	eb43 0901 	adc.w	r9, r3, r1
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b6a:	4690      	mov	r8, r2
 8002b6c:	4699      	mov	r9, r3
 8002b6e:	4623      	mov	r3, r4
 8002b70:	eb18 0303 	adds.w	r3, r8, r3
 8002b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b78:	462b      	mov	r3, r5
 8002b7a:	eb49 0303 	adc.w	r3, r9, r3
 8002b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b96:	460b      	mov	r3, r1
 8002b98:	18db      	adds	r3, r3, r3
 8002b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	eb42 0303 	adc.w	r3, r2, r3
 8002ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8002ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002bac:	f7fd fb88 	bl	80002c0 <__aeabi_uldivmod>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <UART_SetConfig+0x2d4>)
 8002bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bba:	095b      	lsrs	r3, r3, #5
 8002bbc:	011c      	lsls	r4, r3, #4
 8002bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002bcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002bd0:	4642      	mov	r2, r8
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	1891      	adds	r1, r2, r2
 8002bd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002bd8:	415b      	adcs	r3, r3
 8002bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002be0:	4641      	mov	r1, r8
 8002be2:	eb12 0a01 	adds.w	sl, r2, r1
 8002be6:	4649      	mov	r1, r9
 8002be8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bec:	f04f 0200 	mov.w	r2, #0
 8002bf0:	f04f 0300 	mov.w	r3, #0
 8002bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c00:	4692      	mov	sl, r2
 8002c02:	469b      	mov	fp, r3
 8002c04:	4643      	mov	r3, r8
 8002c06:	eb1a 0303 	adds.w	r3, sl, r3
 8002c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c0e:	464b      	mov	r3, r9
 8002c10:	eb4b 0303 	adc.w	r3, fp, r3
 8002c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002c28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	18db      	adds	r3, r3, r3
 8002c30:	643b      	str	r3, [r7, #64]	; 0x40
 8002c32:	4613      	mov	r3, r2
 8002c34:	eb42 0303 	adc.w	r3, r2, r3
 8002c38:	647b      	str	r3, [r7, #68]	; 0x44
 8002c3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c42:	f7fd fb3d 	bl	80002c0 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4b3b      	ldr	r3, [pc, #236]	; (8002d3c <UART_SetConfig+0x2d4>)
 8002c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2264      	movs	r2, #100	; 0x64
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	1acb      	subs	r3, r1, r3
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <UART_SetConfig+0x2d4>)
 8002c64:	fba3 2302 	umull	r2, r3, r3, r2
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c70:	441c      	add	r4, r3
 8002c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	1891      	adds	r1, r2, r2
 8002c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c94:	4641      	mov	r1, r8
 8002c96:	1851      	adds	r1, r2, r1
 8002c98:	6339      	str	r1, [r7, #48]	; 0x30
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	414b      	adcs	r3, r1
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	f04f 0300 	mov.w	r3, #0
 8002ca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002cac:	4659      	mov	r1, fp
 8002cae:	00cb      	lsls	r3, r1, #3
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cb6:	4651      	mov	r1, sl
 8002cb8:	00ca      	lsls	r2, r1, #3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4642      	mov	r2, r8
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cc8:	464b      	mov	r3, r9
 8002cca:	460a      	mov	r2, r1
 8002ccc:	eb42 0303 	adc.w	r3, r2, r3
 8002cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ce0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ce8:	460b      	mov	r3, r1
 8002cea:	18db      	adds	r3, r3, r3
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cee:	4613      	mov	r3, r2
 8002cf0:	eb42 0303 	adc.w	r3, r2, r3
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cfe:	f7fd fadf 	bl	80002c0 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <UART_SetConfig+0x2d4>)
 8002d08:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	2164      	movs	r1, #100	; 0x64
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3332      	adds	r3, #50	; 0x32
 8002d1a:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <UART_SetConfig+0x2d4>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	f003 0207 	and.w	r2, r3, #7
 8002d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4422      	add	r2, r4
 8002d2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d30:	e105      	b.n	8002f3e <UART_SetConfig+0x4d6>
 8002d32:	bf00      	nop
 8002d34:	40011000 	.word	0x40011000
 8002d38:	40011400 	.word	0x40011400
 8002d3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d52:	4642      	mov	r2, r8
 8002d54:	464b      	mov	r3, r9
 8002d56:	1891      	adds	r1, r2, r2
 8002d58:	6239      	str	r1, [r7, #32]
 8002d5a:	415b      	adcs	r3, r3
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d62:	4641      	mov	r1, r8
 8002d64:	1854      	adds	r4, r2, r1
 8002d66:	4649      	mov	r1, r9
 8002d68:	eb43 0501 	adc.w	r5, r3, r1
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	00eb      	lsls	r3, r5, #3
 8002d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d7a:	00e2      	lsls	r2, r4, #3
 8002d7c:	4614      	mov	r4, r2
 8002d7e:	461d      	mov	r5, r3
 8002d80:	4643      	mov	r3, r8
 8002d82:	18e3      	adds	r3, r4, r3
 8002d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d88:	464b      	mov	r3, r9
 8002d8a:	eb45 0303 	adc.w	r3, r5, r3
 8002d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002dae:	4629      	mov	r1, r5
 8002db0:	008b      	lsls	r3, r1, #2
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db8:	4621      	mov	r1, r4
 8002dba:	008a      	lsls	r2, r1, #2
 8002dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002dc0:	f7fd fa7e 	bl	80002c0 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4b60      	ldr	r3, [pc, #384]	; (8002f4c <UART_SetConfig+0x4e4>)
 8002dca:	fba3 2302 	umull	r2, r3, r3, r2
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	011c      	lsls	r4, r3, #4
 8002dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002de0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	1891      	adds	r1, r2, r2
 8002dea:	61b9      	str	r1, [r7, #24]
 8002dec:	415b      	adcs	r3, r3
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002df4:	4641      	mov	r1, r8
 8002df6:	1851      	adds	r1, r2, r1
 8002df8:	6139      	str	r1, [r7, #16]
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	414b      	adcs	r3, r1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e0c:	4659      	mov	r1, fp
 8002e0e:	00cb      	lsls	r3, r1, #3
 8002e10:	4651      	mov	r1, sl
 8002e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e16:	4651      	mov	r1, sl
 8002e18:	00ca      	lsls	r2, r1, #3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4642      	mov	r2, r8
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e28:	464b      	mov	r3, r9
 8002e2a:	460a      	mov	r2, r1
 8002e2c:	eb42 0303 	adc.w	r3, r2, r3
 8002e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e4c:	4649      	mov	r1, r9
 8002e4e:	008b      	lsls	r3, r1, #2
 8002e50:	4641      	mov	r1, r8
 8002e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e56:	4641      	mov	r1, r8
 8002e58:	008a      	lsls	r2, r1, #2
 8002e5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e5e:	f7fd fa2f 	bl	80002c0 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <UART_SetConfig+0x4e4>)
 8002e68:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	2164      	movs	r1, #100	; 0x64
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	3332      	adds	r3, #50	; 0x32
 8002e7a:	4a34      	ldr	r2, [pc, #208]	; (8002f4c <UART_SetConfig+0x4e4>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e86:	441c      	add	r4, r3
 8002e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e90:	677a      	str	r2, [r7, #116]	; 0x74
 8002e92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e96:	4642      	mov	r2, r8
 8002e98:	464b      	mov	r3, r9
 8002e9a:	1891      	adds	r1, r2, r2
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	415b      	adcs	r3, r3
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ea6:	4641      	mov	r1, r8
 8002ea8:	1851      	adds	r1, r2, r1
 8002eaa:	6039      	str	r1, [r7, #0]
 8002eac:	4649      	mov	r1, r9
 8002eae:	414b      	adcs	r3, r1
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ebe:	4659      	mov	r1, fp
 8002ec0:	00cb      	lsls	r3, r1, #3
 8002ec2:	4651      	mov	r1, sl
 8002ec4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ec8:	4651      	mov	r1, sl
 8002eca:	00ca      	lsls	r2, r1, #3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4642      	mov	r2, r8
 8002ed4:	189b      	adds	r3, r3, r2
 8002ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ed8:	464b      	mov	r3, r9
 8002eda:	460a      	mov	r2, r1
 8002edc:	eb42 0303 	adc.w	r3, r2, r3
 8002ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	663b      	str	r3, [r7, #96]	; 0x60
 8002eec:	667a      	str	r2, [r7, #100]	; 0x64
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002efa:	4649      	mov	r1, r9
 8002efc:	008b      	lsls	r3, r1, #2
 8002efe:	4641      	mov	r1, r8
 8002f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f04:	4641      	mov	r1, r8
 8002f06:	008a      	lsls	r2, r1, #2
 8002f08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002f0c:	f7fd f9d8 	bl	80002c0 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <UART_SetConfig+0x4e4>)
 8002f16:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2164      	movs	r1, #100	; 0x64
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	3332      	adds	r3, #50	; 0x32
 8002f28:	4a08      	ldr	r2, [pc, #32]	; (8002f4c <UART_SetConfig+0x4e4>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4422      	add	r2, r4
 8002f3c:	609a      	str	r2, [r3, #8]
}
 8002f3e:	bf00      	nop
 8002f40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f44:	46bd      	mov	sp, r7
 8002f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4a:	bf00      	nop
 8002f4c:	51eb851f 	.word	0x51eb851f

08002f50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f50:	b084      	sub	sp, #16
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b084      	sub	sp, #16
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	f107 001c 	add.w	r0, r7, #28
 8002f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d122      	bne.n	8002fae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d105      	bne.n	8002fa2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 faa2 	bl	80034ec <USB_CoreReset>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
 8002fac:	e01a      	b.n	8002fe4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa96 	bl	80034ec <USB_CoreReset>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	639a      	str	r2, [r3, #56]	; 0x38
 8002fd6:	e005      	b.n	8002fe4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d10b      	bne.n	8003002 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f043 0206 	orr.w	r2, r3, #6
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f043 0220 	orr.w	r2, r3, #32
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800300e:	b004      	add	sp, #16
 8003010:	4770      	bx	lr

08003012 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f023 0201 	bic.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d115      	bne.n	8003082 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003062:	2001      	movs	r0, #1
 8003064:	f7fe f81a 	bl	800109c <HAL_Delay>
      ms++;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	3301      	adds	r3, #1
 800306c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa2e 	bl	80034d0 <USB_GetMode>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d01e      	beq.n	80030b8 <USB_SetCurrentMode+0x84>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b31      	cmp	r3, #49	; 0x31
 800307e:	d9f0      	bls.n	8003062 <USB_SetCurrentMode+0x2e>
 8003080:	e01a      	b.n	80030b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d115      	bne.n	80030b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003094:	2001      	movs	r0, #1
 8003096:	f7fe f801 	bl	800109c <HAL_Delay>
      ms++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3301      	adds	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fa15 	bl	80034d0 <USB_GetMode>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <USB_SetCurrentMode+0x84>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b31      	cmp	r3, #49	; 0x31
 80030b0:	d9f0      	bls.n	8003094 <USB_SetCurrentMode+0x60>
 80030b2:	e001      	b.n	80030b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e005      	b.n	80030c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b32      	cmp	r3, #50	; 0x32
 80030bc:	d101      	bne.n	80030c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80030cc:	b084      	sub	sp, #16
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b086      	sub	sp, #24
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80030da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030e6:	2300      	movs	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	e009      	b.n	8003100 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	3340      	adds	r3, #64	; 0x40
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	2200      	movs	r2, #0
 80030f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	3301      	adds	r3, #1
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0e      	cmp	r3, #14
 8003104:	d9f2      	bls.n	80030ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003108:	2b00      	cmp	r3, #0
 800310a:	d11c      	bne.n	8003146 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	639a      	str	r2, [r3, #56]	; 0x38
 8003144:	e00b      	b.n	800315e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003164:	461a      	mov	r2, r3
 8003166:	2300      	movs	r3, #0
 8003168:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003170:	4619      	mov	r1, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003178:	461a      	mov	r2, r3
 800317a:	680b      	ldr	r3, [r1, #0]
 800317c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800317e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003180:	2b01      	cmp	r3, #1
 8003182:	d10c      	bne.n	800319e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800318a:	2100      	movs	r1, #0
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f965 	bl	800345c <USB_SetDevSpeed>
 8003192:	e008      	b.n	80031a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003194:	2101      	movs	r1, #1
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f960 	bl	800345c <USB_SetDevSpeed>
 800319c:	e003      	b.n	80031a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800319e:	2103      	movs	r1, #3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f95b 	bl	800345c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031a6:	2110      	movs	r1, #16
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8f3 	bl	8003394 <USB_FlushTxFifo>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 f91f 	bl	80033fc <USB_FlushRxFifo>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ce:	461a      	mov	r2, r3
 80031d0:	2300      	movs	r3, #0
 80031d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031da:	461a      	mov	r2, r3
 80031dc:	2300      	movs	r3, #0
 80031de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031e6:	461a      	mov	r2, r3
 80031e8:	2300      	movs	r3, #0
 80031ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	e043      	b.n	800327a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003208:	d118      	bne.n	800323c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321c:	461a      	mov	r2, r3
 800321e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e013      	b.n	800324e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003232:	461a      	mov	r2, r3
 8003234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	e008      	b.n	800324e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003248:	461a      	mov	r2, r3
 800324a:	2300      	movs	r3, #0
 800324c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800326c:	461a      	mov	r2, r3
 800326e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	3301      	adds	r3, #1
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	429a      	cmp	r2, r3
 8003280:	d3b7      	bcc.n	80031f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	e043      	b.n	8003310 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800329a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329e:	d118      	bne.n	80032d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b2:	461a      	mov	r2, r3
 80032b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	e013      	b.n	80032e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c8:	461a      	mov	r2, r3
 80032ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	e008      	b.n	80032e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032de:	461a      	mov	r2, r3
 80032e0:	2300      	movs	r3, #0
 80032e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f0:	461a      	mov	r2, r3
 80032f2:	2300      	movs	r3, #0
 80032f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003302:	461a      	mov	r2, r3
 8003304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	3301      	adds	r3, #1
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	429a      	cmp	r2, r3
 8003316:	d3b7      	bcc.n	8003288 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800332a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003338:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	2b00      	cmp	r3, #0
 800333e:	d105      	bne.n	800334c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f043 0210 	orr.w	r2, r3, #16
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <USB_DevInit+0x2c4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f043 0208 	orr.w	r2, r3, #8
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800336a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336c:	2b01      	cmp	r3, #1
 800336e:	d107      	bne.n	8003380 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003380:	7dfb      	ldrb	r3, [r7, #23]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800338c:	b004      	add	sp, #16
 800338e:	4770      	bx	lr
 8003390:	803c3800 	.word	0x803c3800

08003394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3301      	adds	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <USB_FlushTxFifo+0x64>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d901      	bls.n	80033b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e01b      	b.n	80033ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	daf2      	bge.n	80033a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	019b      	lsls	r3, r3, #6
 80033c4:	f043 0220 	orr.w	r2, r3, #32
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <USB_FlushTxFifo+0x64>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e006      	b.n	80033ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d0f0      	beq.n	80033cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	00030d40 	.word	0x00030d40

080033fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a11      	ldr	r2, [pc, #68]	; (8003458 <USB_FlushRxFifo+0x5c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e018      	b.n	800344c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	daf2      	bge.n	8003408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2210      	movs	r2, #16
 800342a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a08      	ldr	r2, [pc, #32]	; (8003458 <USB_FlushRxFifo+0x5c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e006      	b.n	800344c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b10      	cmp	r3, #16
 8003448:	d0f0      	beq.n	800342c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	00030d40 	.word	0x00030d40

0800345c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	78fb      	ldrb	r3, [r7, #3]
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800347c:	4313      	orrs	r3, r2
 800347e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800348e:	b480      	push	{r7}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80034a8:	f023 0303 	bic.w	r3, r3, #3
 80034ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f003 0301 	and.w	r3, r3, #1
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3301      	adds	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4a13      	ldr	r2, [pc, #76]	; (8003550 <USB_CoreReset+0x64>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e01b      	b.n	8003542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
 8003510:	daf2      	bge.n	80034f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	f043 0201 	orr.w	r2, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3301      	adds	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <USB_CoreReset+0x64>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d901      	bls.n	8003534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e006      	b.n	8003542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d0f0      	beq.n	8003522 <USB_CoreReset+0x36>

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	00030d40 	.word	0x00030d40

08003554 <__errno>:
 8003554:	4b01      	ldr	r3, [pc, #4]	; (800355c <__errno+0x8>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	2000002c 	.word	0x2000002c

08003560 <__libc_init_array>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	4d0d      	ldr	r5, [pc, #52]	; (8003598 <__libc_init_array+0x38>)
 8003564:	4c0d      	ldr	r4, [pc, #52]	; (800359c <__libc_init_array+0x3c>)
 8003566:	1b64      	subs	r4, r4, r5
 8003568:	10a4      	asrs	r4, r4, #2
 800356a:	2600      	movs	r6, #0
 800356c:	42a6      	cmp	r6, r4
 800356e:	d109      	bne.n	8003584 <__libc_init_array+0x24>
 8003570:	4d0b      	ldr	r5, [pc, #44]	; (80035a0 <__libc_init_array+0x40>)
 8003572:	4c0c      	ldr	r4, [pc, #48]	; (80035a4 <__libc_init_array+0x44>)
 8003574:	f000 fc8e 	bl	8003e94 <_init>
 8003578:	1b64      	subs	r4, r4, r5
 800357a:	10a4      	asrs	r4, r4, #2
 800357c:	2600      	movs	r6, #0
 800357e:	42a6      	cmp	r6, r4
 8003580:	d105      	bne.n	800358e <__libc_init_array+0x2e>
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	f855 3b04 	ldr.w	r3, [r5], #4
 8003588:	4798      	blx	r3
 800358a:	3601      	adds	r6, #1
 800358c:	e7ee      	b.n	800356c <__libc_init_array+0xc>
 800358e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003592:	4798      	blx	r3
 8003594:	3601      	adds	r6, #1
 8003596:	e7f2      	b.n	800357e <__libc_init_array+0x1e>
 8003598:	08003f18 	.word	0x08003f18
 800359c:	08003f18 	.word	0x08003f18
 80035a0:	08003f18 	.word	0x08003f18
 80035a4:	08003f1c 	.word	0x08003f1c

080035a8 <memset>:
 80035a8:	4402      	add	r2, r0
 80035aa:	4603      	mov	r3, r0
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d100      	bne.n	80035b2 <memset+0xa>
 80035b0:	4770      	bx	lr
 80035b2:	f803 1b01 	strb.w	r1, [r3], #1
 80035b6:	e7f9      	b.n	80035ac <memset+0x4>

080035b8 <siprintf>:
 80035b8:	b40e      	push	{r1, r2, r3}
 80035ba:	b500      	push	{lr}
 80035bc:	b09c      	sub	sp, #112	; 0x70
 80035be:	ab1d      	add	r3, sp, #116	; 0x74
 80035c0:	9002      	str	r0, [sp, #8]
 80035c2:	9006      	str	r0, [sp, #24]
 80035c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80035c8:	4809      	ldr	r0, [pc, #36]	; (80035f0 <siprintf+0x38>)
 80035ca:	9107      	str	r1, [sp, #28]
 80035cc:	9104      	str	r1, [sp, #16]
 80035ce:	4909      	ldr	r1, [pc, #36]	; (80035f4 <siprintf+0x3c>)
 80035d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80035d4:	9105      	str	r1, [sp, #20]
 80035d6:	6800      	ldr	r0, [r0, #0]
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	a902      	add	r1, sp, #8
 80035dc:	f000 f868 	bl	80036b0 <_svfiprintf_r>
 80035e0:	9b02      	ldr	r3, [sp, #8]
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	b01c      	add	sp, #112	; 0x70
 80035e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035ec:	b003      	add	sp, #12
 80035ee:	4770      	bx	lr
 80035f0:	2000002c 	.word	0x2000002c
 80035f4:	ffff0208 	.word	0xffff0208

080035f8 <__ssputs_r>:
 80035f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035fc:	688e      	ldr	r6, [r1, #8]
 80035fe:	429e      	cmp	r6, r3
 8003600:	4682      	mov	sl, r0
 8003602:	460c      	mov	r4, r1
 8003604:	4690      	mov	r8, r2
 8003606:	461f      	mov	r7, r3
 8003608:	d838      	bhi.n	800367c <__ssputs_r+0x84>
 800360a:	898a      	ldrh	r2, [r1, #12]
 800360c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003610:	d032      	beq.n	8003678 <__ssputs_r+0x80>
 8003612:	6825      	ldr	r5, [r4, #0]
 8003614:	6909      	ldr	r1, [r1, #16]
 8003616:	eba5 0901 	sub.w	r9, r5, r1
 800361a:	6965      	ldr	r5, [r4, #20]
 800361c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003624:	3301      	adds	r3, #1
 8003626:	444b      	add	r3, r9
 8003628:	106d      	asrs	r5, r5, #1
 800362a:	429d      	cmp	r5, r3
 800362c:	bf38      	it	cc
 800362e:	461d      	movcc	r5, r3
 8003630:	0553      	lsls	r3, r2, #21
 8003632:	d531      	bpl.n	8003698 <__ssputs_r+0xa0>
 8003634:	4629      	mov	r1, r5
 8003636:	f000 fb63 	bl	8003d00 <_malloc_r>
 800363a:	4606      	mov	r6, r0
 800363c:	b950      	cbnz	r0, 8003654 <__ssputs_r+0x5c>
 800363e:	230c      	movs	r3, #12
 8003640:	f8ca 3000 	str.w	r3, [sl]
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800364a:	81a3      	strh	r3, [r4, #12]
 800364c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003654:	6921      	ldr	r1, [r4, #16]
 8003656:	464a      	mov	r2, r9
 8003658:	f000 fabe 	bl	8003bd8 <memcpy>
 800365c:	89a3      	ldrh	r3, [r4, #12]
 800365e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003666:	81a3      	strh	r3, [r4, #12]
 8003668:	6126      	str	r6, [r4, #16]
 800366a:	6165      	str	r5, [r4, #20]
 800366c:	444e      	add	r6, r9
 800366e:	eba5 0509 	sub.w	r5, r5, r9
 8003672:	6026      	str	r6, [r4, #0]
 8003674:	60a5      	str	r5, [r4, #8]
 8003676:	463e      	mov	r6, r7
 8003678:	42be      	cmp	r6, r7
 800367a:	d900      	bls.n	800367e <__ssputs_r+0x86>
 800367c:	463e      	mov	r6, r7
 800367e:	6820      	ldr	r0, [r4, #0]
 8003680:	4632      	mov	r2, r6
 8003682:	4641      	mov	r1, r8
 8003684:	f000 fab6 	bl	8003bf4 <memmove>
 8003688:	68a3      	ldr	r3, [r4, #8]
 800368a:	1b9b      	subs	r3, r3, r6
 800368c:	60a3      	str	r3, [r4, #8]
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	4433      	add	r3, r6
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	2000      	movs	r0, #0
 8003696:	e7db      	b.n	8003650 <__ssputs_r+0x58>
 8003698:	462a      	mov	r2, r5
 800369a:	f000 fba5 	bl	8003de8 <_realloc_r>
 800369e:	4606      	mov	r6, r0
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d1e1      	bne.n	8003668 <__ssputs_r+0x70>
 80036a4:	6921      	ldr	r1, [r4, #16]
 80036a6:	4650      	mov	r0, sl
 80036a8:	f000 fabe 	bl	8003c28 <_free_r>
 80036ac:	e7c7      	b.n	800363e <__ssputs_r+0x46>
	...

080036b0 <_svfiprintf_r>:
 80036b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b4:	4698      	mov	r8, r3
 80036b6:	898b      	ldrh	r3, [r1, #12]
 80036b8:	061b      	lsls	r3, r3, #24
 80036ba:	b09d      	sub	sp, #116	; 0x74
 80036bc:	4607      	mov	r7, r0
 80036be:	460d      	mov	r5, r1
 80036c0:	4614      	mov	r4, r2
 80036c2:	d50e      	bpl.n	80036e2 <_svfiprintf_r+0x32>
 80036c4:	690b      	ldr	r3, [r1, #16]
 80036c6:	b963      	cbnz	r3, 80036e2 <_svfiprintf_r+0x32>
 80036c8:	2140      	movs	r1, #64	; 0x40
 80036ca:	f000 fb19 	bl	8003d00 <_malloc_r>
 80036ce:	6028      	str	r0, [r5, #0]
 80036d0:	6128      	str	r0, [r5, #16]
 80036d2:	b920      	cbnz	r0, 80036de <_svfiprintf_r+0x2e>
 80036d4:	230c      	movs	r3, #12
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036dc:	e0d1      	b.n	8003882 <_svfiprintf_r+0x1d2>
 80036de:	2340      	movs	r3, #64	; 0x40
 80036e0:	616b      	str	r3, [r5, #20]
 80036e2:	2300      	movs	r3, #0
 80036e4:	9309      	str	r3, [sp, #36]	; 0x24
 80036e6:	2320      	movs	r3, #32
 80036e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80036f0:	2330      	movs	r3, #48	; 0x30
 80036f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800389c <_svfiprintf_r+0x1ec>
 80036f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036fa:	f04f 0901 	mov.w	r9, #1
 80036fe:	4623      	mov	r3, r4
 8003700:	469a      	mov	sl, r3
 8003702:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003706:	b10a      	cbz	r2, 800370c <_svfiprintf_r+0x5c>
 8003708:	2a25      	cmp	r2, #37	; 0x25
 800370a:	d1f9      	bne.n	8003700 <_svfiprintf_r+0x50>
 800370c:	ebba 0b04 	subs.w	fp, sl, r4
 8003710:	d00b      	beq.n	800372a <_svfiprintf_r+0x7a>
 8003712:	465b      	mov	r3, fp
 8003714:	4622      	mov	r2, r4
 8003716:	4629      	mov	r1, r5
 8003718:	4638      	mov	r0, r7
 800371a:	f7ff ff6d 	bl	80035f8 <__ssputs_r>
 800371e:	3001      	adds	r0, #1
 8003720:	f000 80aa 	beq.w	8003878 <_svfiprintf_r+0x1c8>
 8003724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003726:	445a      	add	r2, fp
 8003728:	9209      	str	r2, [sp, #36]	; 0x24
 800372a:	f89a 3000 	ldrb.w	r3, [sl]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80a2 	beq.w	8003878 <_svfiprintf_r+0x1c8>
 8003734:	2300      	movs	r3, #0
 8003736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800373a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800373e:	f10a 0a01 	add.w	sl, sl, #1
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	9307      	str	r3, [sp, #28]
 8003746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800374a:	931a      	str	r3, [sp, #104]	; 0x68
 800374c:	4654      	mov	r4, sl
 800374e:	2205      	movs	r2, #5
 8003750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003754:	4851      	ldr	r0, [pc, #324]	; (800389c <_svfiprintf_r+0x1ec>)
 8003756:	f7fc fd63 	bl	8000220 <memchr>
 800375a:	9a04      	ldr	r2, [sp, #16]
 800375c:	b9d8      	cbnz	r0, 8003796 <_svfiprintf_r+0xe6>
 800375e:	06d0      	lsls	r0, r2, #27
 8003760:	bf44      	itt	mi
 8003762:	2320      	movmi	r3, #32
 8003764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003768:	0711      	lsls	r1, r2, #28
 800376a:	bf44      	itt	mi
 800376c:	232b      	movmi	r3, #43	; 0x2b
 800376e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003772:	f89a 3000 	ldrb.w	r3, [sl]
 8003776:	2b2a      	cmp	r3, #42	; 0x2a
 8003778:	d015      	beq.n	80037a6 <_svfiprintf_r+0xf6>
 800377a:	9a07      	ldr	r2, [sp, #28]
 800377c:	4654      	mov	r4, sl
 800377e:	2000      	movs	r0, #0
 8003780:	f04f 0c0a 	mov.w	ip, #10
 8003784:	4621      	mov	r1, r4
 8003786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800378a:	3b30      	subs	r3, #48	; 0x30
 800378c:	2b09      	cmp	r3, #9
 800378e:	d94e      	bls.n	800382e <_svfiprintf_r+0x17e>
 8003790:	b1b0      	cbz	r0, 80037c0 <_svfiprintf_r+0x110>
 8003792:	9207      	str	r2, [sp, #28]
 8003794:	e014      	b.n	80037c0 <_svfiprintf_r+0x110>
 8003796:	eba0 0308 	sub.w	r3, r0, r8
 800379a:	fa09 f303 	lsl.w	r3, r9, r3
 800379e:	4313      	orrs	r3, r2
 80037a0:	9304      	str	r3, [sp, #16]
 80037a2:	46a2      	mov	sl, r4
 80037a4:	e7d2      	b.n	800374c <_svfiprintf_r+0x9c>
 80037a6:	9b03      	ldr	r3, [sp, #12]
 80037a8:	1d19      	adds	r1, r3, #4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	9103      	str	r1, [sp, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	bfbb      	ittet	lt
 80037b2:	425b      	neglt	r3, r3
 80037b4:	f042 0202 	orrlt.w	r2, r2, #2
 80037b8:	9307      	strge	r3, [sp, #28]
 80037ba:	9307      	strlt	r3, [sp, #28]
 80037bc:	bfb8      	it	lt
 80037be:	9204      	strlt	r2, [sp, #16]
 80037c0:	7823      	ldrb	r3, [r4, #0]
 80037c2:	2b2e      	cmp	r3, #46	; 0x2e
 80037c4:	d10c      	bne.n	80037e0 <_svfiprintf_r+0x130>
 80037c6:	7863      	ldrb	r3, [r4, #1]
 80037c8:	2b2a      	cmp	r3, #42	; 0x2a
 80037ca:	d135      	bne.n	8003838 <_svfiprintf_r+0x188>
 80037cc:	9b03      	ldr	r3, [sp, #12]
 80037ce:	1d1a      	adds	r2, r3, #4
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	9203      	str	r2, [sp, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bfb8      	it	lt
 80037d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80037dc:	3402      	adds	r4, #2
 80037de:	9305      	str	r3, [sp, #20]
 80037e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80038ac <_svfiprintf_r+0x1fc>
 80037e4:	7821      	ldrb	r1, [r4, #0]
 80037e6:	2203      	movs	r2, #3
 80037e8:	4650      	mov	r0, sl
 80037ea:	f7fc fd19 	bl	8000220 <memchr>
 80037ee:	b140      	cbz	r0, 8003802 <_svfiprintf_r+0x152>
 80037f0:	2340      	movs	r3, #64	; 0x40
 80037f2:	eba0 000a 	sub.w	r0, r0, sl
 80037f6:	fa03 f000 	lsl.w	r0, r3, r0
 80037fa:	9b04      	ldr	r3, [sp, #16]
 80037fc:	4303      	orrs	r3, r0
 80037fe:	3401      	adds	r4, #1
 8003800:	9304      	str	r3, [sp, #16]
 8003802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003806:	4826      	ldr	r0, [pc, #152]	; (80038a0 <_svfiprintf_r+0x1f0>)
 8003808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800380c:	2206      	movs	r2, #6
 800380e:	f7fc fd07 	bl	8000220 <memchr>
 8003812:	2800      	cmp	r0, #0
 8003814:	d038      	beq.n	8003888 <_svfiprintf_r+0x1d8>
 8003816:	4b23      	ldr	r3, [pc, #140]	; (80038a4 <_svfiprintf_r+0x1f4>)
 8003818:	bb1b      	cbnz	r3, 8003862 <_svfiprintf_r+0x1b2>
 800381a:	9b03      	ldr	r3, [sp, #12]
 800381c:	3307      	adds	r3, #7
 800381e:	f023 0307 	bic.w	r3, r3, #7
 8003822:	3308      	adds	r3, #8
 8003824:	9303      	str	r3, [sp, #12]
 8003826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003828:	4433      	add	r3, r6
 800382a:	9309      	str	r3, [sp, #36]	; 0x24
 800382c:	e767      	b.n	80036fe <_svfiprintf_r+0x4e>
 800382e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003832:	460c      	mov	r4, r1
 8003834:	2001      	movs	r0, #1
 8003836:	e7a5      	b.n	8003784 <_svfiprintf_r+0xd4>
 8003838:	2300      	movs	r3, #0
 800383a:	3401      	adds	r4, #1
 800383c:	9305      	str	r3, [sp, #20]
 800383e:	4619      	mov	r1, r3
 8003840:	f04f 0c0a 	mov.w	ip, #10
 8003844:	4620      	mov	r0, r4
 8003846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800384a:	3a30      	subs	r2, #48	; 0x30
 800384c:	2a09      	cmp	r2, #9
 800384e:	d903      	bls.n	8003858 <_svfiprintf_r+0x1a8>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0c5      	beq.n	80037e0 <_svfiprintf_r+0x130>
 8003854:	9105      	str	r1, [sp, #20]
 8003856:	e7c3      	b.n	80037e0 <_svfiprintf_r+0x130>
 8003858:	fb0c 2101 	mla	r1, ip, r1, r2
 800385c:	4604      	mov	r4, r0
 800385e:	2301      	movs	r3, #1
 8003860:	e7f0      	b.n	8003844 <_svfiprintf_r+0x194>
 8003862:	ab03      	add	r3, sp, #12
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	462a      	mov	r2, r5
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <_svfiprintf_r+0x1f8>)
 800386a:	a904      	add	r1, sp, #16
 800386c:	4638      	mov	r0, r7
 800386e:	f3af 8000 	nop.w
 8003872:	1c42      	adds	r2, r0, #1
 8003874:	4606      	mov	r6, r0
 8003876:	d1d6      	bne.n	8003826 <_svfiprintf_r+0x176>
 8003878:	89ab      	ldrh	r3, [r5, #12]
 800387a:	065b      	lsls	r3, r3, #25
 800387c:	f53f af2c 	bmi.w	80036d8 <_svfiprintf_r+0x28>
 8003880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003882:	b01d      	add	sp, #116	; 0x74
 8003884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003888:	ab03      	add	r3, sp, #12
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	462a      	mov	r2, r5
 800388e:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <_svfiprintf_r+0x1f8>)
 8003890:	a904      	add	r1, sp, #16
 8003892:	4638      	mov	r0, r7
 8003894:	f000 f87a 	bl	800398c <_printf_i>
 8003898:	e7eb      	b.n	8003872 <_svfiprintf_r+0x1c2>
 800389a:	bf00      	nop
 800389c:	08003edc 	.word	0x08003edc
 80038a0:	08003ee6 	.word	0x08003ee6
 80038a4:	00000000 	.word	0x00000000
 80038a8:	080035f9 	.word	0x080035f9
 80038ac:	08003ee2 	.word	0x08003ee2

080038b0 <_printf_common>:
 80038b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038b4:	4616      	mov	r6, r2
 80038b6:	4699      	mov	r9, r3
 80038b8:	688a      	ldr	r2, [r1, #8]
 80038ba:	690b      	ldr	r3, [r1, #16]
 80038bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038c0:	4293      	cmp	r3, r2
 80038c2:	bfb8      	it	lt
 80038c4:	4613      	movlt	r3, r2
 80038c6:	6033      	str	r3, [r6, #0]
 80038c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038cc:	4607      	mov	r7, r0
 80038ce:	460c      	mov	r4, r1
 80038d0:	b10a      	cbz	r2, 80038d6 <_printf_common+0x26>
 80038d2:	3301      	adds	r3, #1
 80038d4:	6033      	str	r3, [r6, #0]
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	0699      	lsls	r1, r3, #26
 80038da:	bf42      	ittt	mi
 80038dc:	6833      	ldrmi	r3, [r6, #0]
 80038de:	3302      	addmi	r3, #2
 80038e0:	6033      	strmi	r3, [r6, #0]
 80038e2:	6825      	ldr	r5, [r4, #0]
 80038e4:	f015 0506 	ands.w	r5, r5, #6
 80038e8:	d106      	bne.n	80038f8 <_printf_common+0x48>
 80038ea:	f104 0a19 	add.w	sl, r4, #25
 80038ee:	68e3      	ldr	r3, [r4, #12]
 80038f0:	6832      	ldr	r2, [r6, #0]
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	42ab      	cmp	r3, r5
 80038f6:	dc26      	bgt.n	8003946 <_printf_common+0x96>
 80038f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038fc:	1e13      	subs	r3, r2, #0
 80038fe:	6822      	ldr	r2, [r4, #0]
 8003900:	bf18      	it	ne
 8003902:	2301      	movne	r3, #1
 8003904:	0692      	lsls	r2, r2, #26
 8003906:	d42b      	bmi.n	8003960 <_printf_common+0xb0>
 8003908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800390c:	4649      	mov	r1, r9
 800390e:	4638      	mov	r0, r7
 8003910:	47c0      	blx	r8
 8003912:	3001      	adds	r0, #1
 8003914:	d01e      	beq.n	8003954 <_printf_common+0xa4>
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	68e5      	ldr	r5, [r4, #12]
 800391a:	6832      	ldr	r2, [r6, #0]
 800391c:	f003 0306 	and.w	r3, r3, #6
 8003920:	2b04      	cmp	r3, #4
 8003922:	bf08      	it	eq
 8003924:	1aad      	subeq	r5, r5, r2
 8003926:	68a3      	ldr	r3, [r4, #8]
 8003928:	6922      	ldr	r2, [r4, #16]
 800392a:	bf0c      	ite	eq
 800392c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003930:	2500      	movne	r5, #0
 8003932:	4293      	cmp	r3, r2
 8003934:	bfc4      	itt	gt
 8003936:	1a9b      	subgt	r3, r3, r2
 8003938:	18ed      	addgt	r5, r5, r3
 800393a:	2600      	movs	r6, #0
 800393c:	341a      	adds	r4, #26
 800393e:	42b5      	cmp	r5, r6
 8003940:	d11a      	bne.n	8003978 <_printf_common+0xc8>
 8003942:	2000      	movs	r0, #0
 8003944:	e008      	b.n	8003958 <_printf_common+0xa8>
 8003946:	2301      	movs	r3, #1
 8003948:	4652      	mov	r2, sl
 800394a:	4649      	mov	r1, r9
 800394c:	4638      	mov	r0, r7
 800394e:	47c0      	blx	r8
 8003950:	3001      	adds	r0, #1
 8003952:	d103      	bne.n	800395c <_printf_common+0xac>
 8003954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800395c:	3501      	adds	r5, #1
 800395e:	e7c6      	b.n	80038ee <_printf_common+0x3e>
 8003960:	18e1      	adds	r1, r4, r3
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	2030      	movs	r0, #48	; 0x30
 8003966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800396a:	4422      	add	r2, r4
 800396c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003974:	3302      	adds	r3, #2
 8003976:	e7c7      	b.n	8003908 <_printf_common+0x58>
 8003978:	2301      	movs	r3, #1
 800397a:	4622      	mov	r2, r4
 800397c:	4649      	mov	r1, r9
 800397e:	4638      	mov	r0, r7
 8003980:	47c0      	blx	r8
 8003982:	3001      	adds	r0, #1
 8003984:	d0e6      	beq.n	8003954 <_printf_common+0xa4>
 8003986:	3601      	adds	r6, #1
 8003988:	e7d9      	b.n	800393e <_printf_common+0x8e>
	...

0800398c <_printf_i>:
 800398c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003990:	7e0f      	ldrb	r7, [r1, #24]
 8003992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003994:	2f78      	cmp	r7, #120	; 0x78
 8003996:	4691      	mov	r9, r2
 8003998:	4680      	mov	r8, r0
 800399a:	460c      	mov	r4, r1
 800399c:	469a      	mov	sl, r3
 800399e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039a2:	d807      	bhi.n	80039b4 <_printf_i+0x28>
 80039a4:	2f62      	cmp	r7, #98	; 0x62
 80039a6:	d80a      	bhi.n	80039be <_printf_i+0x32>
 80039a8:	2f00      	cmp	r7, #0
 80039aa:	f000 80d8 	beq.w	8003b5e <_printf_i+0x1d2>
 80039ae:	2f58      	cmp	r7, #88	; 0x58
 80039b0:	f000 80a3 	beq.w	8003afa <_printf_i+0x16e>
 80039b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039bc:	e03a      	b.n	8003a34 <_printf_i+0xa8>
 80039be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039c2:	2b15      	cmp	r3, #21
 80039c4:	d8f6      	bhi.n	80039b4 <_printf_i+0x28>
 80039c6:	a101      	add	r1, pc, #4	; (adr r1, 80039cc <_printf_i+0x40>)
 80039c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039cc:	08003a25 	.word	0x08003a25
 80039d0:	08003a39 	.word	0x08003a39
 80039d4:	080039b5 	.word	0x080039b5
 80039d8:	080039b5 	.word	0x080039b5
 80039dc:	080039b5 	.word	0x080039b5
 80039e0:	080039b5 	.word	0x080039b5
 80039e4:	08003a39 	.word	0x08003a39
 80039e8:	080039b5 	.word	0x080039b5
 80039ec:	080039b5 	.word	0x080039b5
 80039f0:	080039b5 	.word	0x080039b5
 80039f4:	080039b5 	.word	0x080039b5
 80039f8:	08003b45 	.word	0x08003b45
 80039fc:	08003a69 	.word	0x08003a69
 8003a00:	08003b27 	.word	0x08003b27
 8003a04:	080039b5 	.word	0x080039b5
 8003a08:	080039b5 	.word	0x080039b5
 8003a0c:	08003b67 	.word	0x08003b67
 8003a10:	080039b5 	.word	0x080039b5
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	080039b5 	.word	0x080039b5
 8003a1c:	080039b5 	.word	0x080039b5
 8003a20:	08003b2f 	.word	0x08003b2f
 8003a24:	682b      	ldr	r3, [r5, #0]
 8003a26:	1d1a      	adds	r2, r3, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	602a      	str	r2, [r5, #0]
 8003a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0a3      	b.n	8003b80 <_printf_i+0x1f4>
 8003a38:	6820      	ldr	r0, [r4, #0]
 8003a3a:	6829      	ldr	r1, [r5, #0]
 8003a3c:	0606      	lsls	r6, r0, #24
 8003a3e:	f101 0304 	add.w	r3, r1, #4
 8003a42:	d50a      	bpl.n	8003a5a <_printf_i+0xce>
 8003a44:	680e      	ldr	r6, [r1, #0]
 8003a46:	602b      	str	r3, [r5, #0]
 8003a48:	2e00      	cmp	r6, #0
 8003a4a:	da03      	bge.n	8003a54 <_printf_i+0xc8>
 8003a4c:	232d      	movs	r3, #45	; 0x2d
 8003a4e:	4276      	negs	r6, r6
 8003a50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a54:	485e      	ldr	r0, [pc, #376]	; (8003bd0 <_printf_i+0x244>)
 8003a56:	230a      	movs	r3, #10
 8003a58:	e019      	b.n	8003a8e <_printf_i+0x102>
 8003a5a:	680e      	ldr	r6, [r1, #0]
 8003a5c:	602b      	str	r3, [r5, #0]
 8003a5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a62:	bf18      	it	ne
 8003a64:	b236      	sxthne	r6, r6
 8003a66:	e7ef      	b.n	8003a48 <_printf_i+0xbc>
 8003a68:	682b      	ldr	r3, [r5, #0]
 8003a6a:	6820      	ldr	r0, [r4, #0]
 8003a6c:	1d19      	adds	r1, r3, #4
 8003a6e:	6029      	str	r1, [r5, #0]
 8003a70:	0601      	lsls	r1, r0, #24
 8003a72:	d501      	bpl.n	8003a78 <_printf_i+0xec>
 8003a74:	681e      	ldr	r6, [r3, #0]
 8003a76:	e002      	b.n	8003a7e <_printf_i+0xf2>
 8003a78:	0646      	lsls	r6, r0, #25
 8003a7a:	d5fb      	bpl.n	8003a74 <_printf_i+0xe8>
 8003a7c:	881e      	ldrh	r6, [r3, #0]
 8003a7e:	4854      	ldr	r0, [pc, #336]	; (8003bd0 <_printf_i+0x244>)
 8003a80:	2f6f      	cmp	r7, #111	; 0x6f
 8003a82:	bf0c      	ite	eq
 8003a84:	2308      	moveq	r3, #8
 8003a86:	230a      	movne	r3, #10
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a8e:	6865      	ldr	r5, [r4, #4]
 8003a90:	60a5      	str	r5, [r4, #8]
 8003a92:	2d00      	cmp	r5, #0
 8003a94:	bfa2      	ittt	ge
 8003a96:	6821      	ldrge	r1, [r4, #0]
 8003a98:	f021 0104 	bicge.w	r1, r1, #4
 8003a9c:	6021      	strge	r1, [r4, #0]
 8003a9e:	b90e      	cbnz	r6, 8003aa4 <_printf_i+0x118>
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	d04d      	beq.n	8003b40 <_printf_i+0x1b4>
 8003aa4:	4615      	mov	r5, r2
 8003aa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003aaa:	fb03 6711 	mls	r7, r3, r1, r6
 8003aae:	5dc7      	ldrb	r7, [r0, r7]
 8003ab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ab4:	4637      	mov	r7, r6
 8003ab6:	42bb      	cmp	r3, r7
 8003ab8:	460e      	mov	r6, r1
 8003aba:	d9f4      	bls.n	8003aa6 <_printf_i+0x11a>
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d10b      	bne.n	8003ad8 <_printf_i+0x14c>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	07de      	lsls	r6, r3, #31
 8003ac4:	d508      	bpl.n	8003ad8 <_printf_i+0x14c>
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	6861      	ldr	r1, [r4, #4]
 8003aca:	4299      	cmp	r1, r3
 8003acc:	bfde      	ittt	le
 8003ace:	2330      	movle	r3, #48	; 0x30
 8003ad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ad4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003ad8:	1b52      	subs	r2, r2, r5
 8003ada:	6122      	str	r2, [r4, #16]
 8003adc:	f8cd a000 	str.w	sl, [sp]
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	aa03      	add	r2, sp, #12
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	f7ff fee2 	bl	80038b0 <_printf_common>
 8003aec:	3001      	adds	r0, #1
 8003aee:	d14c      	bne.n	8003b8a <_printf_i+0x1fe>
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003af4:	b004      	add	sp, #16
 8003af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afa:	4835      	ldr	r0, [pc, #212]	; (8003bd0 <_printf_i+0x244>)
 8003afc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b00:	6829      	ldr	r1, [r5, #0]
 8003b02:	6823      	ldr	r3, [r4, #0]
 8003b04:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b08:	6029      	str	r1, [r5, #0]
 8003b0a:	061d      	lsls	r5, r3, #24
 8003b0c:	d514      	bpl.n	8003b38 <_printf_i+0x1ac>
 8003b0e:	07df      	lsls	r7, r3, #31
 8003b10:	bf44      	itt	mi
 8003b12:	f043 0320 	orrmi.w	r3, r3, #32
 8003b16:	6023      	strmi	r3, [r4, #0]
 8003b18:	b91e      	cbnz	r6, 8003b22 <_printf_i+0x196>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	f023 0320 	bic.w	r3, r3, #32
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	2310      	movs	r3, #16
 8003b24:	e7b0      	b.n	8003a88 <_printf_i+0xfc>
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	f043 0320 	orr.w	r3, r3, #32
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	2378      	movs	r3, #120	; 0x78
 8003b30:	4828      	ldr	r0, [pc, #160]	; (8003bd4 <_printf_i+0x248>)
 8003b32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b36:	e7e3      	b.n	8003b00 <_printf_i+0x174>
 8003b38:	0659      	lsls	r1, r3, #25
 8003b3a:	bf48      	it	mi
 8003b3c:	b2b6      	uxthmi	r6, r6
 8003b3e:	e7e6      	b.n	8003b0e <_printf_i+0x182>
 8003b40:	4615      	mov	r5, r2
 8003b42:	e7bb      	b.n	8003abc <_printf_i+0x130>
 8003b44:	682b      	ldr	r3, [r5, #0]
 8003b46:	6826      	ldr	r6, [r4, #0]
 8003b48:	6961      	ldr	r1, [r4, #20]
 8003b4a:	1d18      	adds	r0, r3, #4
 8003b4c:	6028      	str	r0, [r5, #0]
 8003b4e:	0635      	lsls	r5, r6, #24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	d501      	bpl.n	8003b58 <_printf_i+0x1cc>
 8003b54:	6019      	str	r1, [r3, #0]
 8003b56:	e002      	b.n	8003b5e <_printf_i+0x1d2>
 8003b58:	0670      	lsls	r0, r6, #25
 8003b5a:	d5fb      	bpl.n	8003b54 <_printf_i+0x1c8>
 8003b5c:	8019      	strh	r1, [r3, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	6123      	str	r3, [r4, #16]
 8003b62:	4615      	mov	r5, r2
 8003b64:	e7ba      	b.n	8003adc <_printf_i+0x150>
 8003b66:	682b      	ldr	r3, [r5, #0]
 8003b68:	1d1a      	adds	r2, r3, #4
 8003b6a:	602a      	str	r2, [r5, #0]
 8003b6c:	681d      	ldr	r5, [r3, #0]
 8003b6e:	6862      	ldr	r2, [r4, #4]
 8003b70:	2100      	movs	r1, #0
 8003b72:	4628      	mov	r0, r5
 8003b74:	f7fc fb54 	bl	8000220 <memchr>
 8003b78:	b108      	cbz	r0, 8003b7e <_printf_i+0x1f2>
 8003b7a:	1b40      	subs	r0, r0, r5
 8003b7c:	6060      	str	r0, [r4, #4]
 8003b7e:	6863      	ldr	r3, [r4, #4]
 8003b80:	6123      	str	r3, [r4, #16]
 8003b82:	2300      	movs	r3, #0
 8003b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b88:	e7a8      	b.n	8003adc <_printf_i+0x150>
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	462a      	mov	r2, r5
 8003b8e:	4649      	mov	r1, r9
 8003b90:	4640      	mov	r0, r8
 8003b92:	47d0      	blx	sl
 8003b94:	3001      	adds	r0, #1
 8003b96:	d0ab      	beq.n	8003af0 <_printf_i+0x164>
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	079b      	lsls	r3, r3, #30
 8003b9c:	d413      	bmi.n	8003bc6 <_printf_i+0x23a>
 8003b9e:	68e0      	ldr	r0, [r4, #12]
 8003ba0:	9b03      	ldr	r3, [sp, #12]
 8003ba2:	4298      	cmp	r0, r3
 8003ba4:	bfb8      	it	lt
 8003ba6:	4618      	movlt	r0, r3
 8003ba8:	e7a4      	b.n	8003af4 <_printf_i+0x168>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4632      	mov	r2, r6
 8003bae:	4649      	mov	r1, r9
 8003bb0:	4640      	mov	r0, r8
 8003bb2:	47d0      	blx	sl
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	d09b      	beq.n	8003af0 <_printf_i+0x164>
 8003bb8:	3501      	adds	r5, #1
 8003bba:	68e3      	ldr	r3, [r4, #12]
 8003bbc:	9903      	ldr	r1, [sp, #12]
 8003bbe:	1a5b      	subs	r3, r3, r1
 8003bc0:	42ab      	cmp	r3, r5
 8003bc2:	dcf2      	bgt.n	8003baa <_printf_i+0x21e>
 8003bc4:	e7eb      	b.n	8003b9e <_printf_i+0x212>
 8003bc6:	2500      	movs	r5, #0
 8003bc8:	f104 0619 	add.w	r6, r4, #25
 8003bcc:	e7f5      	b.n	8003bba <_printf_i+0x22e>
 8003bce:	bf00      	nop
 8003bd0:	08003eed 	.word	0x08003eed
 8003bd4:	08003efe 	.word	0x08003efe

08003bd8 <memcpy>:
 8003bd8:	440a      	add	r2, r1
 8003bda:	4291      	cmp	r1, r2
 8003bdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003be0:	d100      	bne.n	8003be4 <memcpy+0xc>
 8003be2:	4770      	bx	lr
 8003be4:	b510      	push	{r4, lr}
 8003be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bee:	4291      	cmp	r1, r2
 8003bf0:	d1f9      	bne.n	8003be6 <memcpy+0xe>
 8003bf2:	bd10      	pop	{r4, pc}

08003bf4 <memmove>:
 8003bf4:	4288      	cmp	r0, r1
 8003bf6:	b510      	push	{r4, lr}
 8003bf8:	eb01 0402 	add.w	r4, r1, r2
 8003bfc:	d902      	bls.n	8003c04 <memmove+0x10>
 8003bfe:	4284      	cmp	r4, r0
 8003c00:	4623      	mov	r3, r4
 8003c02:	d807      	bhi.n	8003c14 <memmove+0x20>
 8003c04:	1e43      	subs	r3, r0, #1
 8003c06:	42a1      	cmp	r1, r4
 8003c08:	d008      	beq.n	8003c1c <memmove+0x28>
 8003c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c12:	e7f8      	b.n	8003c06 <memmove+0x12>
 8003c14:	4402      	add	r2, r0
 8003c16:	4601      	mov	r1, r0
 8003c18:	428a      	cmp	r2, r1
 8003c1a:	d100      	bne.n	8003c1e <memmove+0x2a>
 8003c1c:	bd10      	pop	{r4, pc}
 8003c1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c26:	e7f7      	b.n	8003c18 <memmove+0x24>

08003c28 <_free_r>:
 8003c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c2a:	2900      	cmp	r1, #0
 8003c2c:	d044      	beq.n	8003cb8 <_free_r+0x90>
 8003c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c32:	9001      	str	r0, [sp, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f1a1 0404 	sub.w	r4, r1, #4
 8003c3a:	bfb8      	it	lt
 8003c3c:	18e4      	addlt	r4, r4, r3
 8003c3e:	f000 f913 	bl	8003e68 <__malloc_lock>
 8003c42:	4a1e      	ldr	r2, [pc, #120]	; (8003cbc <_free_r+0x94>)
 8003c44:	9801      	ldr	r0, [sp, #4]
 8003c46:	6813      	ldr	r3, [r2, #0]
 8003c48:	b933      	cbnz	r3, 8003c58 <_free_r+0x30>
 8003c4a:	6063      	str	r3, [r4, #4]
 8003c4c:	6014      	str	r4, [r2, #0]
 8003c4e:	b003      	add	sp, #12
 8003c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c54:	f000 b90e 	b.w	8003e74 <__malloc_unlock>
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	d908      	bls.n	8003c6e <_free_r+0x46>
 8003c5c:	6825      	ldr	r5, [r4, #0]
 8003c5e:	1961      	adds	r1, r4, r5
 8003c60:	428b      	cmp	r3, r1
 8003c62:	bf01      	itttt	eq
 8003c64:	6819      	ldreq	r1, [r3, #0]
 8003c66:	685b      	ldreq	r3, [r3, #4]
 8003c68:	1949      	addeq	r1, r1, r5
 8003c6a:	6021      	streq	r1, [r4, #0]
 8003c6c:	e7ed      	b.n	8003c4a <_free_r+0x22>
 8003c6e:	461a      	mov	r2, r3
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	b10b      	cbz	r3, 8003c78 <_free_r+0x50>
 8003c74:	42a3      	cmp	r3, r4
 8003c76:	d9fa      	bls.n	8003c6e <_free_r+0x46>
 8003c78:	6811      	ldr	r1, [r2, #0]
 8003c7a:	1855      	adds	r5, r2, r1
 8003c7c:	42a5      	cmp	r5, r4
 8003c7e:	d10b      	bne.n	8003c98 <_free_r+0x70>
 8003c80:	6824      	ldr	r4, [r4, #0]
 8003c82:	4421      	add	r1, r4
 8003c84:	1854      	adds	r4, r2, r1
 8003c86:	42a3      	cmp	r3, r4
 8003c88:	6011      	str	r1, [r2, #0]
 8003c8a:	d1e0      	bne.n	8003c4e <_free_r+0x26>
 8003c8c:	681c      	ldr	r4, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	6053      	str	r3, [r2, #4]
 8003c92:	4421      	add	r1, r4
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	e7da      	b.n	8003c4e <_free_r+0x26>
 8003c98:	d902      	bls.n	8003ca0 <_free_r+0x78>
 8003c9a:	230c      	movs	r3, #12
 8003c9c:	6003      	str	r3, [r0, #0]
 8003c9e:	e7d6      	b.n	8003c4e <_free_r+0x26>
 8003ca0:	6825      	ldr	r5, [r4, #0]
 8003ca2:	1961      	adds	r1, r4, r5
 8003ca4:	428b      	cmp	r3, r1
 8003ca6:	bf04      	itt	eq
 8003ca8:	6819      	ldreq	r1, [r3, #0]
 8003caa:	685b      	ldreq	r3, [r3, #4]
 8003cac:	6063      	str	r3, [r4, #4]
 8003cae:	bf04      	itt	eq
 8003cb0:	1949      	addeq	r1, r1, r5
 8003cb2:	6021      	streq	r1, [r4, #0]
 8003cb4:	6054      	str	r4, [r2, #4]
 8003cb6:	e7ca      	b.n	8003c4e <_free_r+0x26>
 8003cb8:	b003      	add	sp, #12
 8003cba:	bd30      	pop	{r4, r5, pc}
 8003cbc:	20000870 	.word	0x20000870

08003cc0 <sbrk_aligned>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4e0e      	ldr	r6, [pc, #56]	; (8003cfc <sbrk_aligned+0x3c>)
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	6831      	ldr	r1, [r6, #0]
 8003cc8:	4605      	mov	r5, r0
 8003cca:	b911      	cbnz	r1, 8003cd2 <sbrk_aligned+0x12>
 8003ccc:	f000 f8bc 	bl	8003e48 <_sbrk_r>
 8003cd0:	6030      	str	r0, [r6, #0]
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 f8b7 	bl	8003e48 <_sbrk_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d00a      	beq.n	8003cf4 <sbrk_aligned+0x34>
 8003cde:	1cc4      	adds	r4, r0, #3
 8003ce0:	f024 0403 	bic.w	r4, r4, #3
 8003ce4:	42a0      	cmp	r0, r4
 8003ce6:	d007      	beq.n	8003cf8 <sbrk_aligned+0x38>
 8003ce8:	1a21      	subs	r1, r4, r0
 8003cea:	4628      	mov	r0, r5
 8003cec:	f000 f8ac 	bl	8003e48 <_sbrk_r>
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d101      	bne.n	8003cf8 <sbrk_aligned+0x38>
 8003cf4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	bd70      	pop	{r4, r5, r6, pc}
 8003cfc:	20000874 	.word	0x20000874

08003d00 <_malloc_r>:
 8003d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d04:	1ccd      	adds	r5, r1, #3
 8003d06:	f025 0503 	bic.w	r5, r5, #3
 8003d0a:	3508      	adds	r5, #8
 8003d0c:	2d0c      	cmp	r5, #12
 8003d0e:	bf38      	it	cc
 8003d10:	250c      	movcc	r5, #12
 8003d12:	2d00      	cmp	r5, #0
 8003d14:	4607      	mov	r7, r0
 8003d16:	db01      	blt.n	8003d1c <_malloc_r+0x1c>
 8003d18:	42a9      	cmp	r1, r5
 8003d1a:	d905      	bls.n	8003d28 <_malloc_r+0x28>
 8003d1c:	230c      	movs	r3, #12
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	2600      	movs	r6, #0
 8003d22:	4630      	mov	r0, r6
 8003d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d28:	4e2e      	ldr	r6, [pc, #184]	; (8003de4 <_malloc_r+0xe4>)
 8003d2a:	f000 f89d 	bl	8003e68 <__malloc_lock>
 8003d2e:	6833      	ldr	r3, [r6, #0]
 8003d30:	461c      	mov	r4, r3
 8003d32:	bb34      	cbnz	r4, 8003d82 <_malloc_r+0x82>
 8003d34:	4629      	mov	r1, r5
 8003d36:	4638      	mov	r0, r7
 8003d38:	f7ff ffc2 	bl	8003cc0 <sbrk_aligned>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	4604      	mov	r4, r0
 8003d40:	d14d      	bne.n	8003dde <_malloc_r+0xde>
 8003d42:	6834      	ldr	r4, [r6, #0]
 8003d44:	4626      	mov	r6, r4
 8003d46:	2e00      	cmp	r6, #0
 8003d48:	d140      	bne.n	8003dcc <_malloc_r+0xcc>
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	4631      	mov	r1, r6
 8003d4e:	4638      	mov	r0, r7
 8003d50:	eb04 0803 	add.w	r8, r4, r3
 8003d54:	f000 f878 	bl	8003e48 <_sbrk_r>
 8003d58:	4580      	cmp	r8, r0
 8003d5a:	d13a      	bne.n	8003dd2 <_malloc_r+0xd2>
 8003d5c:	6821      	ldr	r1, [r4, #0]
 8003d5e:	3503      	adds	r5, #3
 8003d60:	1a6d      	subs	r5, r5, r1
 8003d62:	f025 0503 	bic.w	r5, r5, #3
 8003d66:	3508      	adds	r5, #8
 8003d68:	2d0c      	cmp	r5, #12
 8003d6a:	bf38      	it	cc
 8003d6c:	250c      	movcc	r5, #12
 8003d6e:	4629      	mov	r1, r5
 8003d70:	4638      	mov	r0, r7
 8003d72:	f7ff ffa5 	bl	8003cc0 <sbrk_aligned>
 8003d76:	3001      	adds	r0, #1
 8003d78:	d02b      	beq.n	8003dd2 <_malloc_r+0xd2>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	442b      	add	r3, r5
 8003d7e:	6023      	str	r3, [r4, #0]
 8003d80:	e00e      	b.n	8003da0 <_malloc_r+0xa0>
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	1b52      	subs	r2, r2, r5
 8003d86:	d41e      	bmi.n	8003dc6 <_malloc_r+0xc6>
 8003d88:	2a0b      	cmp	r2, #11
 8003d8a:	d916      	bls.n	8003dba <_malloc_r+0xba>
 8003d8c:	1961      	adds	r1, r4, r5
 8003d8e:	42a3      	cmp	r3, r4
 8003d90:	6025      	str	r5, [r4, #0]
 8003d92:	bf18      	it	ne
 8003d94:	6059      	strne	r1, [r3, #4]
 8003d96:	6863      	ldr	r3, [r4, #4]
 8003d98:	bf08      	it	eq
 8003d9a:	6031      	streq	r1, [r6, #0]
 8003d9c:	5162      	str	r2, [r4, r5]
 8003d9e:	604b      	str	r3, [r1, #4]
 8003da0:	4638      	mov	r0, r7
 8003da2:	f104 060b 	add.w	r6, r4, #11
 8003da6:	f000 f865 	bl	8003e74 <__malloc_unlock>
 8003daa:	f026 0607 	bic.w	r6, r6, #7
 8003dae:	1d23      	adds	r3, r4, #4
 8003db0:	1af2      	subs	r2, r6, r3
 8003db2:	d0b6      	beq.n	8003d22 <_malloc_r+0x22>
 8003db4:	1b9b      	subs	r3, r3, r6
 8003db6:	50a3      	str	r3, [r4, r2]
 8003db8:	e7b3      	b.n	8003d22 <_malloc_r+0x22>
 8003dba:	6862      	ldr	r2, [r4, #4]
 8003dbc:	42a3      	cmp	r3, r4
 8003dbe:	bf0c      	ite	eq
 8003dc0:	6032      	streq	r2, [r6, #0]
 8003dc2:	605a      	strne	r2, [r3, #4]
 8003dc4:	e7ec      	b.n	8003da0 <_malloc_r+0xa0>
 8003dc6:	4623      	mov	r3, r4
 8003dc8:	6864      	ldr	r4, [r4, #4]
 8003dca:	e7b2      	b.n	8003d32 <_malloc_r+0x32>
 8003dcc:	4634      	mov	r4, r6
 8003dce:	6876      	ldr	r6, [r6, #4]
 8003dd0:	e7b9      	b.n	8003d46 <_malloc_r+0x46>
 8003dd2:	230c      	movs	r3, #12
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	f000 f84c 	bl	8003e74 <__malloc_unlock>
 8003ddc:	e7a1      	b.n	8003d22 <_malloc_r+0x22>
 8003dde:	6025      	str	r5, [r4, #0]
 8003de0:	e7de      	b.n	8003da0 <_malloc_r+0xa0>
 8003de2:	bf00      	nop
 8003de4:	20000870 	.word	0x20000870

08003de8 <_realloc_r>:
 8003de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dec:	4680      	mov	r8, r0
 8003dee:	4614      	mov	r4, r2
 8003df0:	460e      	mov	r6, r1
 8003df2:	b921      	cbnz	r1, 8003dfe <_realloc_r+0x16>
 8003df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003df8:	4611      	mov	r1, r2
 8003dfa:	f7ff bf81 	b.w	8003d00 <_malloc_r>
 8003dfe:	b92a      	cbnz	r2, 8003e0c <_realloc_r+0x24>
 8003e00:	f7ff ff12 	bl	8003c28 <_free_r>
 8003e04:	4625      	mov	r5, r4
 8003e06:	4628      	mov	r0, r5
 8003e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e0c:	f000 f838 	bl	8003e80 <_malloc_usable_size_r>
 8003e10:	4284      	cmp	r4, r0
 8003e12:	4607      	mov	r7, r0
 8003e14:	d802      	bhi.n	8003e1c <_realloc_r+0x34>
 8003e16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e1a:	d812      	bhi.n	8003e42 <_realloc_r+0x5a>
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f7ff ff6e 	bl	8003d00 <_malloc_r>
 8003e24:	4605      	mov	r5, r0
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d0ed      	beq.n	8003e06 <_realloc_r+0x1e>
 8003e2a:	42bc      	cmp	r4, r7
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	4631      	mov	r1, r6
 8003e30:	bf28      	it	cs
 8003e32:	463a      	movcs	r2, r7
 8003e34:	f7ff fed0 	bl	8003bd8 <memcpy>
 8003e38:	4631      	mov	r1, r6
 8003e3a:	4640      	mov	r0, r8
 8003e3c:	f7ff fef4 	bl	8003c28 <_free_r>
 8003e40:	e7e1      	b.n	8003e06 <_realloc_r+0x1e>
 8003e42:	4635      	mov	r5, r6
 8003e44:	e7df      	b.n	8003e06 <_realloc_r+0x1e>
	...

08003e48 <_sbrk_r>:
 8003e48:	b538      	push	{r3, r4, r5, lr}
 8003e4a:	4d06      	ldr	r5, [pc, #24]	; (8003e64 <_sbrk_r+0x1c>)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4604      	mov	r4, r0
 8003e50:	4608      	mov	r0, r1
 8003e52:	602b      	str	r3, [r5, #0]
 8003e54:	f7fd f83c 	bl	8000ed0 <_sbrk>
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	d102      	bne.n	8003e62 <_sbrk_r+0x1a>
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	b103      	cbz	r3, 8003e62 <_sbrk_r+0x1a>
 8003e60:	6023      	str	r3, [r4, #0]
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
 8003e64:	20000878 	.word	0x20000878

08003e68 <__malloc_lock>:
 8003e68:	4801      	ldr	r0, [pc, #4]	; (8003e70 <__malloc_lock+0x8>)
 8003e6a:	f000 b811 	b.w	8003e90 <__retarget_lock_acquire_recursive>
 8003e6e:	bf00      	nop
 8003e70:	2000087c 	.word	0x2000087c

08003e74 <__malloc_unlock>:
 8003e74:	4801      	ldr	r0, [pc, #4]	; (8003e7c <__malloc_unlock+0x8>)
 8003e76:	f000 b80c 	b.w	8003e92 <__retarget_lock_release_recursive>
 8003e7a:	bf00      	nop
 8003e7c:	2000087c 	.word	0x2000087c

08003e80 <_malloc_usable_size_r>:
 8003e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e84:	1f18      	subs	r0, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfbc      	itt	lt
 8003e8a:	580b      	ldrlt	r3, [r1, r0]
 8003e8c:	18c0      	addlt	r0, r0, r3
 8003e8e:	4770      	bx	lr

08003e90 <__retarget_lock_acquire_recursive>:
 8003e90:	4770      	bx	lr

08003e92 <__retarget_lock_release_recursive>:
 8003e92:	4770      	bx	lr

08003e94 <_init>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	bf00      	nop
 8003e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	469e      	mov	lr, r3
 8003e9e:	4770      	bx	lr

08003ea0 <_fini>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr
