
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003e0c  08003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e70  08003e70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e78  08003e78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e7c  08003e7c  00013e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007ec  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000085c  2000085c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000cc8e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000ed66  00000000  00000000  0002cd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d78  00000000  00000000  0003ba94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b80  00000000  00000000  0003d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000daf94  00000000  00000000  0003e390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000aa8  00000000  00000000  00119328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024609  00000000  00000000  00119dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e3d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033a4  00000000  00000000  0013e42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003df4 	.word	0x08003df4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003df4 	.word	0x08003df4

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <strlen>:
 80001f8:	4603      	mov	r3, r0
 80001fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fe:	2a00      	cmp	r2, #0
 8000200:	d1fb      	bne.n	80001fa <strlen+0x2>
 8000202:	1a18      	subs	r0, r3, r0
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <zeros>:


/* Functions definitions -----------------------------------------------------*/

void zeros(uint32_t *vector, uint32_t longitud)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	for (;vector < (&vector[0u] + longitud); vector++) {
 80005be:	e005      	b.n	80005cc <zeros+0x18>
		*vector = 0u;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	for (;vector < (&vector[0u] + longitud); vector++) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3304      	adds	r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	dcf5      	bgt.n	80005c0 <zeros+0xc>
	}
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b087      	sub	sp, #28
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	603b      	str	r3, [r7, #0]
	uint32_t tmp = 0u;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 80005f4:	e00d      	b.n	8000612 <productoEscalar32+0x30>
		tmp = *vectorIn * escalar;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
		*vectorOut++ = tmp;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	1d1a      	adds	r2, r3, #4
 8000606:	60ba      	str	r2, [r7, #8]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	601a      	str	r2, [r3, #0]
	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3304      	adds	r3, #4
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dced      	bgt.n	80005f6 <productoEscalar32+0x14>
	}
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	371c      	adds	r7, #28
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800062e:	f3ef 8314 	mrs	r3, CONTROL
 8000632:	607b      	str	r3, [r7, #4]
  return(result);
 8000634:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000636:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	61fb      	str	r3, [r7, #28]
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	f383 8814 	msr	CONTROL, r3
}
 800064a:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800064c:	f3ef 8314 	mrs	r3, CONTROL
 8000650:	60fb      	str	r3, [r7, #12]
  return(result);
 8000652:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000654:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 8000656:	69fb      	ldr	r3, [r7, #28]
 8000658:	f023 0301 	bic.w	r3, r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	f383 8814 	msr	CONTROL, r3
}
 8000668:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800066a:	f3ef 8314 	mrs	r3, CONTROL
 800066e:	617b      	str	r3, [r7, #20]
  return(result);
 8000670:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 8000672:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 8000674:	f7ff fdbc 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000678:	f3ef 8314 	mrs	r3, CONTROL
 800067c:	61bb      	str	r3, [r7, #24]
  return(result);
 800067e:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000680:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fc41 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f84d 	bl	8000734 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 800069a:	4822      	ldr	r0, [pc, #136]	; (8000724 <main+0x98>)
 800069c:	f7ff fdac 	bl	80001f8 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	230a      	movs	r3, #10
 80006a6:	491f      	ldr	r1, [pc, #124]	; (8000724 <main+0x98>)
 80006a8:	481f      	ldr	r0, [pc, #124]	; (8000728 <main+0x9c>)
 80006aa:	f002 f88c 	bl	80027c6 <HAL_UART_Transmit>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ae:	f000 f951 	bl	8000954 <MX_GPIO_Init>
  MX_ETH_Init();
 80006b2:	f000 f8a9 	bl	8000808 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006b6:	f000 f8f5 	bl	80008a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ba:	f000 f91d 	bl	80008f8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 80006be:	f7ff ffb3 	bl	8000628 <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 80006c2:	2103      	movs	r1, #3
 80006c4:	2005      	movs	r0, #5
 80006c6:	f7ff fd95 	bl	80001f4 <asm_sum>
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE END 2 */

  sprintf( buffer, "asm_sum(5,3) = %lu\r\n", (uint32_t)Resultado );
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	4917      	ldr	r1, [pc, #92]	; (800072c <main+0xa0>)
 80006d0:	4814      	ldr	r0, [pc, #80]	; (8000724 <main+0x98>)
 80006d2:	f002 ff21 	bl	8003518 <siprintf>
  HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <main+0x98>)
 80006d8:	f7ff fd8e 	bl	80001f8 <strlen>
 80006dc:	4603      	mov	r3, r0
 80006de:	b29a      	uxth	r2, r3
 80006e0:	230a      	movs	r3, #10
 80006e2:	4910      	ldr	r1, [pc, #64]	; (8000724 <main+0x98>)
 80006e4:	4810      	ldr	r0, [pc, #64]	; (8000728 <main+0x9c>)
 80006e6:	f002 f86e 	bl	80027c6 <HAL_UART_Transmit>

  zeros((uint32_t *)buffer, (uint32_t) strlen((char *)buffer));
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <main+0x98>)
 80006ec:	f7ff fd84 	bl	80001f8 <strlen>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <main+0x98>)
 80006f6:	f7ff ff5d 	bl	80005b4 <zeros>

  memset(buffer, 5u, 25u);
 80006fa:	2219      	movs	r2, #25
 80006fc:	2105      	movs	r1, #5
 80006fe:	4809      	ldr	r0, [pc, #36]	; (8000724 <main+0x98>)
 8000700:	f002 ff02 	bl	8003508 <memset>

  memset(buffer_out, 0u, 25u);
 8000704:	2219      	movs	r2, #25
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	; (8000730 <main+0xa4>)
 800070a:	f002 fefd 	bl	8003508 <memset>

  productoEscalar32((uint32_t *)buffer, (uint32_t *)buffer_out, strlen((char *)buffer), 5u);
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <main+0x98>)
 8000710:	f7ff fd72 	bl	80001f8 <strlen>
 8000714:	4602      	mov	r2, r0
 8000716:	2305      	movs	r3, #5
 8000718:	4905      	ldr	r1, [pc, #20]	; (8000730 <main+0xa4>)
 800071a:	4802      	ldr	r0, [pc, #8]	; (8000724 <main+0x98>)
 800071c:	f7ff ff61 	bl	80005e2 <productoEscalar32>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000720:	e7fe      	b.n	8000720 <main+0x94>
 8000722:	bf00      	nop
 8000724:	20000804 	.word	0x20000804
 8000728:	200002b4 	.word	0x200002b4
 800072c:	08003e0c 	.word	0x08003e0c
 8000730:	20000820 	.word	0x20000820

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	; 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	2230      	movs	r2, #48	; 0x30
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f002 fee0 	bl	8003508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <SystemClock_Config+0xcc>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000760:	4a27      	ldr	r2, [pc, #156]	; (8000800 <SystemClock_Config+0xcc>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a21      	ldr	r2, [pc, #132]	; (8000804 <SystemClock_Config+0xd0>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000790:	2301      	movs	r3, #1
 8000792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000794:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079a:	2302      	movs	r3, #2
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a4:	2304      	movs	r3, #4
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a8:	23a8      	movs	r3, #168	; 0xa8
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007b0:	2307      	movs	r3, #7
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fb1f 	bl	8001dfc <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c4:	f000 f974 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2302      	movs	r3, #2
 80007ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2105      	movs	r1, #5
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 fd80 	bl	80022ec <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007f2:	f000 f95d 	bl	8000ab0 <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ETH_Init+0x84>)
 800080e:	4a20      	ldr	r2, [pc, #128]	; (8000890 <MX_ETH_Init+0x88>)
 8000810:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_ETH_Init+0x8c>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000818:	4b1e      	ldr	r3, [pc, #120]	; (8000894 <MX_ETH_Init+0x8c>)
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_ETH_Init+0x8c>)
 8000820:	22e1      	movs	r2, #225	; 0xe1
 8000822:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_ETH_Init+0x8c>)
 8000826:	2200      	movs	r2, #0
 8000828:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_ETH_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_ETH_Init+0x8c>)
 8000832:	2200      	movs	r2, #0
 8000834:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_ETH_Init+0x84>)
 8000838:	4a16      	ldr	r2, [pc, #88]	; (8000894 <MX_ETH_Init+0x8c>)
 800083a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_ETH_Init+0x84>)
 800083e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000842:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_ETH_Init+0x84>)
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <MX_ETH_Init+0x90>)
 8000848:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800084a:	4b10      	ldr	r3, [pc, #64]	; (800088c <MX_ETH_Init+0x84>)
 800084c:	4a13      	ldr	r2, [pc, #76]	; (800089c <MX_ETH_Init+0x94>)
 800084e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_ETH_Init+0x84>)
 8000852:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000856:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <MX_ETH_Init+0x84>)
 800085a:	f000 fcd9 	bl	8001210 <HAL_ETH_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f924 	bl	8000ab0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000868:	2238      	movs	r2, #56	; 0x38
 800086a:	2100      	movs	r1, #0
 800086c:	480c      	ldr	r0, [pc, #48]	; (80008a0 <MX_ETH_Init+0x98>)
 800086e:	f002 fe4b 	bl	8003508 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_ETH_Init+0x98>)
 8000874:	2221      	movs	r2, #33	; 0x21
 8000876:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_ETH_Init+0x98>)
 800087a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800087e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_ETH_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000204 	.word	0x20000204
 8000890:	40028000 	.word	0x40028000
 8000894:	2000083c 	.word	0x2000083c
 8000898:	20000164 	.word	0x20000164
 800089c:	200000c4 	.word	0x200000c4
 80008a0:	2000008c 	.word	0x2000008c

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_USART3_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART3_UART_Init+0x4c>)
 80008dc:	f001 ff26 	bl	800272c <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 f8e3 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200002b4 	.word	0x200002b4
 80008f4:	40004800 	.word	0x40004800

080008f8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000902:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000906:	2204      	movs	r2, #4
 8000908:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090c:	2202      	movs	r2, #2
 800090e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000918:	2202      	movs	r2, #2
 800091a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091e:	2201      	movs	r2, #1
 8000920:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000930:	2201      	movs	r2, #1
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	f001 f941 	bl	8001bc2 <HAL_PCD_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f8b3 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200002f8 	.word	0x200002f8

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	61bb      	str	r3, [r7, #24]
 800096e:	4b4c      	ldr	r3, [pc, #304]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a4b      	ldr	r2, [pc, #300]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000974:	f043 0304 	orr.w	r3, r3, #4
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b49      	ldr	r3, [pc, #292]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0304 	and.w	r3, r3, #4
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a44      	ldr	r2, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a3d      	ldr	r2, [pc, #244]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a36      	ldr	r2, [pc, #216]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a28      	ldr	r2, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_GPIO_Init+0x14c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a18:	4822      	ldr	r0, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0x150>)
 8000a1a:	f001 f8b9 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2140      	movs	r1, #64	; 0x40
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <MX_GPIO_Init+0x154>)
 8000a24:	f001 f8b4 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481b      	ldr	r0, [pc, #108]	; (8000aac <MX_GPIO_Init+0x158>)
 8000a40:	f000 fefa 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a44:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_GPIO_Init+0x150>)
 8000a5e:	f000 feeb 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a62:	2340      	movs	r3, #64	; 0x40
 8000a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	480b      	ldr	r0, [pc, #44]	; (8000aa8 <MX_GPIO_Init+0x154>)
 8000a7a:	f000 fedd 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a7e:	2380      	movs	r3, #128	; 0x80
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_GPIO_Init+0x154>)
 8000a92:	f000 fed1 	bl	8001838 <HAL_GPIO_Init>

}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	40021800 	.word	0x40021800
 8000aac:	40020800 	.word	0x40020800

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a55      	ldr	r2, [pc, #340]	; (8000c80 <HAL_ETH_MspInit+0x174>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	f040 80a4 	bne.w	8000c78 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b30:	2300      	movs	r3, #0
 8000b32:	623b      	str	r3, [r7, #32]
 8000b34:	4b53      	ldr	r3, [pc, #332]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a52      	ldr	r2, [pc, #328]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b50      	ldr	r3, [pc, #320]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b48:	623b      	str	r3, [r7, #32]
 8000b4a:	6a3b      	ldr	r3, [r7, #32]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
 8000b50:	4b4c      	ldr	r3, [pc, #304]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4a4b      	ldr	r2, [pc, #300]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b5a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5c:	4b49      	ldr	r3, [pc, #292]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b70:	4a44      	ldr	r2, [pc, #272]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b76:	6313      	str	r3, [r2, #48]	; 0x30
 8000b78:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	4a3d      	ldr	r2, [pc, #244]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6313      	str	r3, [r2, #48]	; 0x30
 8000b94:	4b3b      	ldr	r3, [pc, #236]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a2f      	ldr	r2, [pc, #188]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bc6:	f043 0302 	orr.w	r3, r3, #2
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0302 	and.w	r3, r3, #2
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bf4:	2332      	movs	r3, #50	; 0x32
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c00:	2303      	movs	r3, #3
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c04:	230b      	movs	r3, #11
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481e      	ldr	r0, [pc, #120]	; (8000c88 <HAL_ETH_MspInit+0x17c>)
 8000c10:	f000 fe12 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c14:	2386      	movs	r3, #134	; 0x86
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c24:	230b      	movs	r3, #11
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <HAL_ETH_MspInit+0x180>)
 8000c30:	f000 fe02 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c46:	230b      	movs	r3, #11
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480f      	ldr	r0, [pc, #60]	; (8000c90 <HAL_ETH_MspInit+0x184>)
 8000c52:	f000 fdf1 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c68:	230b      	movs	r3, #11
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	4808      	ldr	r0, [pc, #32]	; (8000c94 <HAL_ETH_MspInit+0x188>)
 8000c74:	f000 fde0 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3738      	adds	r7, #56	; 0x38
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40028000 	.word	0x40028000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40021800 	.word	0x40021800

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12c      	bne.n	8000d14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d04:	2307      	movs	r3, #7
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d10:	f000 fd92 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	; 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d48:	d13f      	bne.n	8000dca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a20      	ldr	r2, [pc, #128]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d66:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <HAL_PCD_MspInit+0xb0>)
 8000d84:	f000 fd58 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <HAL_PCD_MspInit+0xb0>)
 8000d9e:	f000 fd4b 	bl	8001838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dac:	6353      	str	r3, [r2, #52]	; 0x34
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a07      	ldr	r2, [pc, #28]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	; 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <NMI_Handler+0x4>

08000de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <MemManage_Handler+0x4>

08000dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <BusFault_Handler+0x4>

08000df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <UsageFault_Handler+0x4>

08000dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e28:	f000 f8c8 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e38:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <_sbrk+0x5c>)
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <_sbrk+0x60>)
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <_sbrk+0x64>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <_sbrk+0x64>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <_sbrk+0x68>)
 8000e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d207      	bcs.n	8000e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e60:	f002 fb28 	bl	80034b4 <__errno>
 8000e64:	4603      	mov	r3, r0
 8000e66:	220c      	movs	r2, #12
 8000e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e6e:	e009      	b.n	8000e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <_sbrk+0x64>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <_sbrk+0x64>)
 8000e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20030000 	.word	0x20030000
 8000e90:	00000400 	.word	0x00000400
 8000e94:	20000844 	.word	0x20000844
 8000e98:	20000860 	.word	0x20000860

08000e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <SystemInit+0x20>)
 8000ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea6:	4a05      	ldr	r2, [pc, #20]	; (8000ebc <SystemInit+0x20>)
 8000ea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  nop
 8000ec0:	bf00      	nop
  nop
 8000ec2:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ec8:	480d      	ldr	r0, [pc, #52]	; (8000f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eca:	490e      	ldr	r1, [pc, #56]	; (8000f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed0:	e002      	b.n	8000ed8 <LoopCopyDataInit>

08000ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed6:	3304      	adds	r3, #4

08000ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000edc:	d3f9      	bcc.n	8000ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee0:	4c0b      	ldr	r4, [pc, #44]	; (8000f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee4:	e001      	b.n	8000eea <LoopFillZerobss>

08000ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee8:	3204      	adds	r2, #4

08000eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eec:	d3fb      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eee:	f7ff ffd5 	bl	8000e9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f002 fae5 	bl	80034c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fbc9 	bl	800068c <main>
  bx  lr    
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000efc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f08:	08003e80 	.word	0x08003e80
  ldr r2, =_sbss
 8000f0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f10:	2000085c 	.word	0x2000085c

08000f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <HAL_Init+0x40>)
 8000f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f28:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_Init+0x40>)
 8000f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_Init+0x40>)
 8000f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f40:	2003      	movs	r0, #3
 8000f42:	f000 f931 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 f808 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4c:	f7ff fdb6 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023c00 	.word	0x40023c00

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_InitTick+0x54>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x58>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f93b 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00e      	b.n	8000fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d80a      	bhi.n	8000fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f98:	f000 f911 	bl	80011be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9c:	4a06      	ldr	r2, [pc, #24]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	e000      	b.n	8000fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000848 	.word	0x20000848

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000848 	.word	0x20000848

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff47 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff5c 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffb0 	bl	8001164 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06c      	b.n	80012fc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001228:	2b00      	cmp	r3, #0
 800122a:	d106      	bne.n	800123a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2223      	movs	r2, #35	; 0x23
 8001230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff fc69 	bl	8000b0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <HAL_ETH_Init+0xf4>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <HAL_ETH_Init+0xf4>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <HAL_ETH_Init+0xf4>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_ETH_Init+0xf8>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	4a2b      	ldr	r2, [pc, #172]	; (8001308 <HAL_ETH_Init+0xf8>)
 800125c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001260:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_ETH_Init+0xf8>)
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	4927      	ldr	r1, [pc, #156]	; (8001308 <HAL_ETH_Init+0xf8>)
 800126c:	4313      	orrs	r3, r2
 800126e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <HAL_ETH_Init+0xf8>)
 8001272:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6812      	ldr	r2, [r2, #0]
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800128a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800128c:	f7ff feaa 	bl	8000fe4 <HAL_GetTick>
 8001290:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001292:	e011      	b.n	80012b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001294:	f7ff fea6 	bl	8000fe4 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012a2:	d909      	bls.n	80012b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2204      	movs	r2, #4
 80012a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	22e0      	movs	r2, #224	; 0xe0
 80012b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e021      	b.n	80012fc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1e4      	bne.n	8001294 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 f944 	bl	8001558 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f9eb 	bl	80016ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fa41 	bl	800175e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	461a      	mov	r2, r3
 80012e2:	2100      	movs	r1, #0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f000 f9a9 	bl	800163c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2210      	movs	r2, #16
 80012f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800

0800130c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4b47      	ldr	r3, [pc, #284]	; (8001440 <ETH_SetMACConfig+0x134>)
 8001322:	4013      	ands	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	7c1b      	ldrb	r3, [r3, #16]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <ETH_SetMACConfig+0x28>
 800132e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001332:	e000      	b.n	8001336 <ETH_SetMACConfig+0x2a>
 8001334:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	7c5b      	ldrb	r3, [r3, #17]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <ETH_SetMACConfig+0x38>
 800133e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001342:	e000      	b.n	8001346 <ETH_SetMACConfig+0x3a>
 8001344:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001346:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800134c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	7fdb      	ldrb	r3, [r3, #31]
 8001352:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001354:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800135a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	7f92      	ldrb	r2, [r2, #30]
 8001360:	2a00      	cmp	r2, #0
 8001362:	d102      	bne.n	800136a <ETH_SetMACConfig+0x5e>
 8001364:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001368:	e000      	b.n	800136c <ETH_SetMACConfig+0x60>
 800136a:	2200      	movs	r2, #0
                        macconf->Speed |
 800136c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	7f1b      	ldrb	r3, [r3, #28]
 8001372:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001374:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800137a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	791b      	ldrb	r3, [r3, #4]
 8001380:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001382:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	f892 2020 	ldrb.w	r2, [r2, #32]
 800138a:	2a00      	cmp	r2, #0
 800138c:	d102      	bne.n	8001394 <ETH_SetMACConfig+0x88>
 800138e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001392:	e000      	b.n	8001396 <ETH_SetMACConfig+0x8a>
 8001394:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001396:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	7bdb      	ldrb	r3, [r3, #15]
 800139c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800139e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013ae:	4313      	orrs	r3, r2
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff fe18 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013f2:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 80013f8:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001400:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001408:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001410:	4313      	orrs	r3, r2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fde7 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	ff20810f 	.word	0xff20810f

08001444 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <ETH_SetDMAConfig+0x110>)
 800145e:	4013      	ands	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	7b1b      	ldrb	r3, [r3, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <ETH_SetDMAConfig+0x2c>
 800146a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800146e:	e000      	b.n	8001472 <ETH_SetDMAConfig+0x2e>
 8001470:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	7b5b      	ldrb	r3, [r3, #13]
 8001476:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001478:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	7f52      	ldrb	r2, [r2, #29]
 800147e:	2a00      	cmp	r2, #0
 8001480:	d102      	bne.n	8001488 <ETH_SetDMAConfig+0x44>
 8001482:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001486:	e000      	b.n	800148a <ETH_SetDMAConfig+0x46>
 8001488:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800148a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	7b9b      	ldrb	r3, [r3, #14]
 8001490:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001492:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001498:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	7f1b      	ldrb	r3, [r3, #28]
 800149e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	7f9b      	ldrb	r3, [r3, #30]
 80014a6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014a8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014b6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014b8:	4313      	orrs	r3, r2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c8:	461a      	mov	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fd8e 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014f8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014fe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001504:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800150c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800150e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001516:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800151c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001526:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800152a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fd5f 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	f8de3f23 	.word	0xf8de3f23

08001558 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0a6      	sub	sp, #152	; 0x98
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800156c:	2300      	movs	r3, #0
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001582:	2301      	movs	r3, #1
 8001584:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001594:	2300      	movs	r3, #0
 8001596:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fe9a 	bl	800130c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015d8:	2301      	movs	r3, #1
 80015da:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015dc:	2301      	movs	r3, #1
 80015de:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015e6:	2301      	movs	r3, #1
 80015e8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001604:	2301      	movs	r3, #1
 8001606:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800160e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001612:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ff08 	bl	8001444 <ETH_SetDMAConfig>
}
 8001634:	bf00      	nop
 8001636:	3798      	adds	r7, #152	; 0x98
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3305      	adds	r3, #5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	3204      	adds	r2, #4
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <ETH_MACAddressConfig+0x68>)
 800165e:	4413      	add	r3, r2
 8001660:	461a      	mov	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3303      	adds	r3, #3
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	061a      	lsls	r2, r3, #24
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3302      	adds	r3, #2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3301      	adds	r3, #1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	4313      	orrs	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <ETH_MACAddressConfig+0x6c>)
 800168e:	4413      	add	r3, r2
 8001690:	461a      	mov	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	6013      	str	r3, [r2, #0]
}
 8001696:	bf00      	nop
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40028040 	.word	0x40028040
 80016a8:	40028044 	.word	0x40028044

080016ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e03e      	b.n	8001738 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68d9      	ldr	r1, [r3, #12]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	3206      	adds	r2, #6
 80016ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d80c      	bhi.n	800171c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	461a      	mov	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	e004      	b.n	8001726 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	461a      	mov	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3301      	adds	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d9bd      	bls.n	80016ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001750:	611a      	str	r2, [r3, #16]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e046      	b.n	80017fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6919      	ldr	r1, [r3, #16]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80017b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	3212      	adds	r2, #18
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d80c      	bhi.n	80017ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6919      	ldr	r1, [r3, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	e004      	b.n	80017f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d9b5      	bls.n	800176c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182a:	60da      	str	r2, [r3, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	e177      	b.n	8001b44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8166 	bne.w	8001b3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d005      	beq.n	800188a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001886:	2b02      	cmp	r3, #2
 8001888:	d130      	bne.n	80018ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 0201 	and.w	r2, r3, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d017      	beq.n	8001928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d123      	bne.n	800197c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	69b9      	ldr	r1, [r7, #24]
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80c0 	beq.w	8001b3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <HAL_GPIO_Init+0x324>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a65      	ldr	r2, [pc, #404]	; (8001b5c <HAL_GPIO_Init+0x324>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_GPIO_Init+0x324>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019da:	4a61      	ldr	r2, [pc, #388]	; (8001b60 <HAL_GPIO_Init+0x328>)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_GPIO_Init+0x32c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d037      	beq.n	8001a76 <HAL_GPIO_Init+0x23e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d031      	beq.n	8001a72 <HAL_GPIO_Init+0x23a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_GPIO_Init+0x334>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d02b      	beq.n	8001a6e <HAL_GPIO_Init+0x236>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a55      	ldr	r2, [pc, #340]	; (8001b70 <HAL_GPIO_Init+0x338>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d025      	beq.n	8001a6a <HAL_GPIO_Init+0x232>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_GPIO_Init+0x33c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01f      	beq.n	8001a66 <HAL_GPIO_Init+0x22e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a53      	ldr	r2, [pc, #332]	; (8001b78 <HAL_GPIO_Init+0x340>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_GPIO_Init+0x22a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x344>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0x226>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x348>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_GPIO_Init+0x222>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x34c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <HAL_GPIO_Init+0x21e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x350>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_GPIO_Init+0x21a>
 8001a4e:	2309      	movs	r3, #9
 8001a50:	e012      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a52:	230a      	movs	r3, #10
 8001a54:	e010      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a56:	2308      	movs	r3, #8
 8001a58:	e00e      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	e00c      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a5e:	2306      	movs	r3, #6
 8001a60:	e00a      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a62:	2305      	movs	r3, #5
 8001a64:	e008      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a66:	2304      	movs	r3, #4
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e004      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a76:	2300      	movs	r3, #0
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f002 0203 	and.w	r2, r2, #3
 8001a7e:	0092      	lsls	r2, r2, #2
 8001a80:	4093      	lsls	r3, r2
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a88:	4935      	ldr	r1, [pc, #212]	; (8001b60 <HAL_GPIO_Init+0x328>)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aba:	4a34      	ldr	r2, [pc, #208]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae4:	4a29      	ldr	r2, [pc, #164]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	f67f ae84 	bls.w	8001854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40021400 	.word	0x40021400
 8001b7c:	40021800 	.word	0x40021800
 8001b80:	40021c00 	.word	0x40021c00
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40022400 	.word	0x40022400
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc4:	b08f      	sub	sp, #60	; 0x3c
 8001bc6:	af0a      	add	r7, sp, #40	; 0x28
 8001bc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e10f      	b.n	8001df4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff f89a 	bl	8000d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f001 f9ad 	bl	8002f72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	687e      	ldr	r6, [r7, #4]
 8001c20:	466d      	mov	r5, sp
 8001c22:	f106 0410 	add.w	r4, r6, #16
 8001c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c32:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c36:	1d33      	adds	r3, r6, #4
 8001c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3a:	6838      	ldr	r0, [r7, #0]
 8001c3c:	f001 f938 	bl	8002eb0 <USB_CoreInit>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d005      	beq.n	8001c52 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0d0      	b.n	8001df4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f001 f99b 	bl	8002f94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	e04a      	b.n	8001cfa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	333d      	adds	r3, #61	; 0x3d
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	333c      	adds	r3, #60	; 0x3c
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	b298      	uxth	r0, r3
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3344      	adds	r3, #68	; 0x44
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3340      	adds	r3, #64	; 0x40
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3348      	adds	r3, #72	; 0x48
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	334c      	adds	r3, #76	; 0x4c
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	3354      	adds	r3, #84	; 0x54
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	73fb      	strb	r3, [r7, #15]
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d3af      	bcc.n	8001c64 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
 8001d08:	e044      	b.n	8001d94 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d62:	7bfa      	ldrb	r2, [r7, #15]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	4413      	add	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3301      	adds	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3b5      	bcc.n	8001d0a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	687e      	ldr	r6, [r7, #4]
 8001da6:	466d      	mov	r5, sp
 8001da8:	f106 0410 	add.w	r4, r6, #16
 8001dac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dbc:	1d33      	adds	r3, r6, #4
 8001dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc0:	6838      	ldr	r0, [r7, #0]
 8001dc2:	f001 f933 	bl	800302c <USB_DevInit>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e00d      	b.n	8001df4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fafe 	bl	80033ee <USB_DevDisconnect>

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e267      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d075      	beq.n	8001f06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e1a:	4b88      	ldr	r3, [pc, #544]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d00c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e26:	4b85      	ldr	r3, [pc, #532]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d112      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e32:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e3e:	d10b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e40:	4b7e      	ldr	r3, [pc, #504]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d05b      	beq.n	8001f04 <HAL_RCC_OscConfig+0x108>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d157      	bne.n	8001f04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e242      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d106      	bne.n	8001e70 <HAL_RCC_OscConfig+0x74>
 8001e62:	4b76      	ldr	r3, [pc, #472]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a75      	ldr	r2, [pc, #468]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e01d      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b70      	ldr	r3, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6f      	ldr	r2, [pc, #444]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b6d      	ldr	r3, [pc, #436]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6c      	ldr	r2, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0xb0>
 8001e94:	4b69      	ldr	r3, [pc, #420]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a68      	ldr	r2, [pc, #416]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b66      	ldr	r3, [pc, #408]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a65      	ldr	r2, [pc, #404]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d013      	beq.n	8001edc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7ff f896 	bl	8000fe4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f892 	bl	8000fe4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e207      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	4b5b      	ldr	r3, [pc, #364]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xc0>
 8001eda:	e014      	b.n	8001f06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff f882 	bl	8000fe4 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff f87e 	bl	8000fe4 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1f3      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	4b51      	ldr	r3, [pc, #324]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xe8>
 8001f02:	e000      	b.n	8001f06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d063      	beq.n	8001fda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f12:	4b4a      	ldr	r3, [pc, #296]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d11c      	bne.n	8001f64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2a:	4b44      	ldr	r3, [pc, #272]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d116      	bne.n	8001f64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f36:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_OscConfig+0x152>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e1c7      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	4b3b      	ldr	r3, [pc, #236]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4937      	ldr	r1, [pc, #220]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	e03a      	b.n	8001fda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f6c:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x244>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff f837 	bl	8000fe4 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff f833 	bl	8000fe4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e1a8      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	4b2b      	ldr	r3, [pc, #172]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4925      	ldr	r1, [pc, #148]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	600b      	str	r3, [r1, #0]
 8001fac:	e015      	b.n	8001fda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_RCC_OscConfig+0x244>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f816 	bl	8000fe4 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f812 	bl	8000fe4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e187      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d036      	beq.n	8002054 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_RCC_OscConfig+0x248>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7fe fff6 	bl	8000fe4 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7fe fff2 	bl	8000fe4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e167      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x240>)
 8002010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0x200>
 800201a:	e01b      	b.n	8002054 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_OscConfig+0x248>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002022:	f7fe ffdf 	bl	8000fe4 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	e00e      	b.n	8002048 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800202a:	f7fe ffdb 	bl	8000fe4 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d907      	bls.n	8002048 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e150      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
 800203c:	40023800 	.word	0x40023800
 8002040:	42470000 	.word	0x42470000
 8002044:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	4b88      	ldr	r3, [pc, #544]	; (800226c <HAL_RCC_OscConfig+0x470>)
 800204a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ea      	bne.n	800202a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8097 	beq.w	8002190 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002066:	4b81      	ldr	r3, [pc, #516]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10f      	bne.n	8002092 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	4b7d      	ldr	r3, [pc, #500]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	4a7c      	ldr	r2, [pc, #496]	; (800226c <HAL_RCC_OscConfig+0x470>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	6413      	str	r3, [r2, #64]	; 0x40
 8002082:	4b7a      	ldr	r3, [pc, #488]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b77      	ldr	r3, [pc, #476]	; (8002270 <HAL_RCC_OscConfig+0x474>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b74      	ldr	r3, [pc, #464]	; (8002270 <HAL_RCC_OscConfig+0x474>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a73      	ldr	r2, [pc, #460]	; (8002270 <HAL_RCC_OscConfig+0x474>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7fe ff9b 	bl	8000fe4 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7fe ff97 	bl	8000fe4 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e10c      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b6a      	ldr	r3, [pc, #424]	; (8002270 <HAL_RCC_OscConfig+0x474>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x2ea>
 80020d8:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_RCC_OscConfig+0x470>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	4a63      	ldr	r2, [pc, #396]	; (800226c <HAL_RCC_OscConfig+0x470>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	; 0x70
 80020e4:	e01c      	b.n	8002120 <HAL_RCC_OscConfig+0x324>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b05      	cmp	r3, #5
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x30c>
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_OscConfig+0x470>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a5e      	ldr	r2, [pc, #376]	; (800226c <HAL_RCC_OscConfig+0x470>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_RCC_OscConfig+0x470>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a5b      	ldr	r2, [pc, #364]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
 8002106:	e00b      	b.n	8002120 <HAL_RCC_OscConfig+0x324>
 8002108:	4b58      	ldr	r3, [pc, #352]	; (800226c <HAL_RCC_OscConfig+0x470>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a57      	ldr	r2, [pc, #348]	; (800226c <HAL_RCC_OscConfig+0x470>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
 8002114:	4b55      	ldr	r3, [pc, #340]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	4a54      	ldr	r2, [pc, #336]	; (800226c <HAL_RCC_OscConfig+0x470>)
 800211a:	f023 0304 	bic.w	r3, r3, #4
 800211e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d015      	beq.n	8002154 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7fe ff5c 	bl	8000fe4 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe ff58 	bl	8000fe4 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e0cb      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002146:	4b49      	ldr	r3, [pc, #292]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ee      	beq.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002152:	e014      	b.n	800217e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002154:	f7fe ff46 	bl	8000fe4 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe ff42 	bl	8000fe4 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0b5      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002172:	4b3e      	ldr	r3, [pc, #248]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1ee      	bne.n	800215c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217e:	7dfb      	ldrb	r3, [r7, #23]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d105      	bne.n	8002190 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002184:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	4a38      	ldr	r2, [pc, #224]	; (800226c <HAL_RCC_OscConfig+0x470>)
 800218a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a1 	beq.w	80022dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800219a:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_OscConfig+0x470>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 030c 	and.w	r3, r3, #12
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d05c      	beq.n	8002260 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d141      	bne.n	8002232 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <HAL_RCC_OscConfig+0x478>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe ff16 	bl	8000fe4 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe ff12 	bl	8000fe4 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e087      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	4b27      	ldr	r3, [pc, #156]	; (800226c <HAL_RCC_OscConfig+0x470>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69da      	ldr	r2, [r3, #28]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	019b      	lsls	r3, r3, #6
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	3b01      	subs	r3, #1
 80021f4:	041b      	lsls	r3, r3, #16
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	491b      	ldr	r1, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x478>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800220a:	f7fe feeb 	bl	8000fe4 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe fee7 	bl	8000fe4 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e05c      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x416>
 8002230:	e054      	b.n	80022dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_OscConfig+0x478>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7fe fed4 	bl	8000fe4 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7fe fed0 	bl	8000fe4 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e045      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_OscConfig+0x470>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
 800225e:	e03d      	b.n	80022dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e038      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
 8002274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCC_OscConfig+0x4ec>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d028      	beq.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d121      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d11a      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d111      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	3b01      	subs	r3, #1
 80022c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0cc      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b68      	ldr	r3, [pc, #416]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d90c      	bls.n	8002328 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b65      	ldr	r3, [pc, #404]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800234a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002362:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	494d      	ldr	r1, [pc, #308]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d044      	beq.n	800240c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d119      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3b      	ldr	r3, [pc, #236]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e067      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4934      	ldr	r1, [pc, #208]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fe02 	bl	8000fe4 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fdfe 	bl	8000fe4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e04f      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 030f 	and.w	r3, r3, #15
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d20c      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4916      	ldr	r1, [pc, #88]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	4313      	orrs	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002472:	f000 f821 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8002476:	4602      	mov	r2, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	490a      	ldr	r1, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fd62 	bl	8000f5c <HAL_InitTick>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40023c00 	.word	0x40023c00
 80024a8:	40023800 	.word	0x40023800
 80024ac:	08003e24 	.word	0x08003e24
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000004 	.word	0x20000004

080024b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024bc:	b094      	sub	sp, #80	; 0x50
 80024be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	647b      	str	r3, [r7, #68]	; 0x44
 80024c4:	2300      	movs	r3, #0
 80024c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024c8:	2300      	movs	r3, #0
 80024ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d0:	4b79      	ldr	r3, [pc, #484]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d00d      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x40>
 80024dc:	2b08      	cmp	r3, #8
 80024de:	f200 80e1 	bhi.w	80026a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d002      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0x34>
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024ea:	e0db      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ec:	4b73      	ldr	r3, [pc, #460]	; (80026bc <HAL_RCC_GetSysClockFreq+0x204>)
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024f0:	e0db      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024f2:	4b73      	ldr	r3, [pc, #460]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80024f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024f6:	e0d8      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f8:	4b6f      	ldr	r3, [pc, #444]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002502:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250e:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	2200      	movs	r2, #0
 8002516:	63bb      	str	r3, [r7, #56]	; 0x38
 8002518:	63fa      	str	r2, [r7, #60]	; 0x3c
 800251a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800251c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
 8002522:	2300      	movs	r3, #0
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
 8002526:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800252a:	4622      	mov	r2, r4
 800252c:	462b      	mov	r3, r5
 800252e:	f04f 0000 	mov.w	r0, #0
 8002532:	f04f 0100 	mov.w	r1, #0
 8002536:	0159      	lsls	r1, r3, #5
 8002538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800253c:	0150      	lsls	r0, r2, #5
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4621      	mov	r1, r4
 8002544:	1a51      	subs	r1, r2, r1
 8002546:	6139      	str	r1, [r7, #16]
 8002548:	4629      	mov	r1, r5
 800254a:	eb63 0301 	sbc.w	r3, r3, r1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800255c:	4659      	mov	r1, fp
 800255e:	018b      	lsls	r3, r1, #6
 8002560:	4651      	mov	r1, sl
 8002562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002566:	4651      	mov	r1, sl
 8002568:	018a      	lsls	r2, r1, #6
 800256a:	4651      	mov	r1, sl
 800256c:	ebb2 0801 	subs.w	r8, r2, r1
 8002570:	4659      	mov	r1, fp
 8002572:	eb63 0901 	sbc.w	r9, r3, r1
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800258a:	4690      	mov	r8, r2
 800258c:	4699      	mov	r9, r3
 800258e:	4623      	mov	r3, r4
 8002590:	eb18 0303 	adds.w	r3, r8, r3
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	462b      	mov	r3, r5
 8002598:	eb49 0303 	adc.w	r3, r9, r3
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025aa:	4629      	mov	r1, r5
 80025ac:	024b      	lsls	r3, r1, #9
 80025ae:	4621      	mov	r1, r4
 80025b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025b4:	4621      	mov	r1, r4
 80025b6:	024a      	lsls	r2, r1, #9
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025be:	2200      	movs	r2, #0
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025c8:	f7fd fe72 	bl	80002b0 <__aeabi_uldivmod>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4613      	mov	r3, r2
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d4:	e058      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d6:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	099b      	lsrs	r3, r3, #6
 80025dc:	2200      	movs	r2, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	4611      	mov	r1, r2
 80025e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
 80025ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025f0:	4642      	mov	r2, r8
 80025f2:	464b      	mov	r3, r9
 80025f4:	f04f 0000 	mov.w	r0, #0
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	0159      	lsls	r1, r3, #5
 80025fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002602:	0150      	lsls	r0, r2, #5
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4641      	mov	r1, r8
 800260a:	ebb2 0a01 	subs.w	sl, r2, r1
 800260e:	4649      	mov	r1, r9
 8002610:	eb63 0b01 	sbc.w	fp, r3, r1
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002620:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002624:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002628:	ebb2 040a 	subs.w	r4, r2, sl
 800262c:	eb63 050b 	sbc.w	r5, r3, fp
 8002630:	f04f 0200 	mov.w	r2, #0
 8002634:	f04f 0300 	mov.w	r3, #0
 8002638:	00eb      	lsls	r3, r5, #3
 800263a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800263e:	00e2      	lsls	r2, r4, #3
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3
 8002644:	4643      	mov	r3, r8
 8002646:	18e3      	adds	r3, r4, r3
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	464b      	mov	r3, r9
 800264c:	eb45 0303 	adc.w	r3, r5, r3
 8002650:	607b      	str	r3, [r7, #4]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800265e:	4629      	mov	r1, r5
 8002660:	028b      	lsls	r3, r1, #10
 8002662:	4621      	mov	r1, r4
 8002664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002668:	4621      	mov	r1, r4
 800266a:	028a      	lsls	r2, r1, #10
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002672:	2200      	movs	r2, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	61fa      	str	r2, [r7, #28]
 8002678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800267c:	f7fd fe18 	bl	80002b0 <__aeabi_uldivmod>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4613      	mov	r3, r2
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	0c1b      	lsrs	r3, r3, #16
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800269a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a2:	e002      	b.n	80026aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <HAL_RCC_GetSysClockFreq+0x204>)
 80026a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3750      	adds	r7, #80	; 0x50
 80026b0:	46bd      	mov	sp, r7
 80026b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200

080026c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026e0:	f7ff fff0 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0a9b      	lsrs	r3, r3, #10
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40023800 	.word	0x40023800
 8002700:	08003e34 	.word	0x08003e34

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002708:	f7ff ffdc 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0b5b      	lsrs	r3, r3, #13
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	; (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40023800 	.word	0x40023800
 8002728:	08003e34 	.word	0x08003e34

0800272c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e03f      	b.n	80027be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d106      	bne.n	8002758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7fe faa0 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2224      	movs	r2, #36	; 0x24
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800276e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f929 	bl	80029c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b08a      	sub	sp, #40	; 0x28
 80027ca:	af02      	add	r7, sp, #8
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d17c      	bne.n	80028e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_UART_Transmit+0x2c>
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e075      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_UART_Transmit+0x3e>
 8002800:	2302      	movs	r3, #2
 8002802:	e06e      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2221      	movs	r2, #33	; 0x21
 8002816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800281a:	f7fe fbe3 	bl	8000fe4 <HAL_GetTick>
 800281e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	88fa      	ldrh	r2, [r7, #6]
 8002824:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002834:	d108      	bne.n	8002848 <HAL_UART_Transmit+0x82>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e003      	b.n	8002850 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002858:	e02a      	b.n	80028b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2200      	movs	r2, #0
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f840 	bl	80028ea <UART_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e036      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10b      	bne.n	8002892 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002888:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	3302      	adds	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
 8002890:	e007      	b.n	80028a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	3301      	adds	r3, #1
 80028a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1cf      	bne.n	800285a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f810 	bl	80028ea <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e006      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b090      	sub	sp, #64	; 0x40
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	603b      	str	r3, [r7, #0]
 80028f6:	4613      	mov	r3, r2
 80028f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028fa:	e050      	b.n	800299e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002902:	d04c      	beq.n	800299e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002906:	2b00      	cmp	r3, #0
 8002908:	d007      	beq.n	800291a <UART_WaitOnFlagUntilTimeout+0x30>
 800290a:	f7fe fb6b 	bl	8000fe4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002916:	429a      	cmp	r2, r3
 8002918:	d241      	bcs.n	800299e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	330c      	adds	r3, #12
 8002920:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	e853 3f00 	ldrex	r3, [r3]
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	330c      	adds	r3, #12
 8002938:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800293a:	637a      	str	r2, [r7, #52]	; 0x34
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800293e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002942:	e841 2300 	strex	r3, r2, [r1]
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1e5      	bne.n	800291a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	613b      	str	r3, [r7, #16]
   return(result);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	63bb      	str	r3, [r7, #56]	; 0x38
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3314      	adds	r3, #20
 800296c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800296e:	623a      	str	r2, [r7, #32]
 8002970:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002972:	69f9      	ldr	r1, [r7, #28]
 8002974:	6a3a      	ldr	r2, [r7, #32]
 8002976:	e841 2300 	strex	r3, r2, [r1]
 800297a:	61bb      	str	r3, [r7, #24]
   return(result);
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d1e5      	bne.n	800294e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2220      	movs	r2, #32
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2220      	movs	r2, #32
 800298e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e00f      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4013      	ands	r3, r2
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	bf0c      	ite	eq
 80029ae:	2301      	moveq	r3, #1
 80029b0:	2300      	movne	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d09f      	beq.n	80028fc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3740      	adds	r7, #64	; 0x40
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b0c0      	sub	sp, #256	; 0x100
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	ea40 0301 	orr.w	r3, r0, r1
 80029f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a20:	f021 010c 	bic.w	r1, r1, #12
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a42:	6999      	ldr	r1, [r3, #24]
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	ea40 0301 	orr.w	r3, r0, r1
 8002a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b8f      	ldr	r3, [pc, #572]	; (8002c94 <UART_SetConfig+0x2cc>)
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d005      	beq.n	8002a68 <UART_SetConfig+0xa0>
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b8d      	ldr	r3, [pc, #564]	; (8002c98 <UART_SetConfig+0x2d0>)
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d104      	bne.n	8002a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff fe4c 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8002a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a70:	e003      	b.n	8002a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a72:	f7ff fe33 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8002a76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a84:	f040 810c 	bne.w	8002ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	1891      	adds	r1, r2, r2
 8002aa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002aa2:	415b      	adcs	r3, r3
 8002aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002aaa:	4621      	mov	r1, r4
 8002aac:	eb12 0801 	adds.w	r8, r2, r1
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	eb43 0901 	adc.w	r9, r3, r1
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aca:	4690      	mov	r8, r2
 8002acc:	4699      	mov	r9, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	eb18 0303 	adds.w	r3, r8, r3
 8002ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ad8:	462b      	mov	r3, r5
 8002ada:	eb49 0303 	adc.w	r3, r9, r3
 8002ade:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002aee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002af6:	460b      	mov	r3, r1
 8002af8:	18db      	adds	r3, r3, r3
 8002afa:	653b      	str	r3, [r7, #80]	; 0x50
 8002afc:	4613      	mov	r3, r2
 8002afe:	eb42 0303 	adc.w	r3, r2, r3
 8002b02:	657b      	str	r3, [r7, #84]	; 0x54
 8002b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b0c:	f7fd fbd0 	bl	80002b0 <__aeabi_uldivmod>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4b61      	ldr	r3, [pc, #388]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002b16:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	011c      	lsls	r4, r3, #4
 8002b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b30:	4642      	mov	r2, r8
 8002b32:	464b      	mov	r3, r9
 8002b34:	1891      	adds	r1, r2, r2
 8002b36:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b38:	415b      	adcs	r3, r3
 8002b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b40:	4641      	mov	r1, r8
 8002b42:	eb12 0a01 	adds.w	sl, r2, r1
 8002b46:	4649      	mov	r1, r9
 8002b48:	eb43 0b01 	adc.w	fp, r3, r1
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b60:	4692      	mov	sl, r2
 8002b62:	469b      	mov	fp, r3
 8002b64:	4643      	mov	r3, r8
 8002b66:	eb1a 0303 	adds.w	r3, sl, r3
 8002b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	eb4b 0303 	adc.w	r3, fp, r3
 8002b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	18db      	adds	r3, r3, r3
 8002b90:	643b      	str	r3, [r7, #64]	; 0x40
 8002b92:	4613      	mov	r3, r2
 8002b94:	eb42 0303 	adc.w	r3, r2, r3
 8002b98:	647b      	str	r3, [r7, #68]	; 0x44
 8002b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002ba2:	f7fd fb85 	bl	80002b0 <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002bae:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2264      	movs	r2, #100	; 0x64
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	1acb      	subs	r3, r1, r3
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002bc2:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bd0:	441c      	add	r4, r3
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8002bec:	415b      	adcs	r3, r3
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	1851      	adds	r1, r2, r1
 8002bf8:	6339      	str	r1, [r7, #48]	; 0x30
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4651      	mov	r1, sl
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4642      	mov	r2, r8
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c28:	464b      	mov	r3, r9
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	eb42 0303 	adc.w	r3, r2, r3
 8002c30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c48:	460b      	mov	r3, r1
 8002c4a:	18db      	adds	r3, r3, r3
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c4e:	4613      	mov	r3, r2
 8002c50:	eb42 0303 	adc.w	r3, r2, r3
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002c5e:	f7fd fb27 	bl	80002b0 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002c68:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3332      	adds	r3, #50	; 0x32
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <UART_SetConfig+0x2d4>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 0207 	and.w	r2, r3, #7
 8002c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4422      	add	r2, r4
 8002c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c90:	e105      	b.n	8002e9e <UART_SetConfig+0x4d6>
 8002c92:	bf00      	nop
 8002c94:	40011000 	.word	0x40011000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002caa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002cb2:	4642      	mov	r2, r8
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	1891      	adds	r1, r2, r2
 8002cb8:	6239      	str	r1, [r7, #32]
 8002cba:	415b      	adcs	r3, r3
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	1854      	adds	r4, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb43 0501 	adc.w	r5, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	00eb      	lsls	r3, r5, #3
 8002cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cda:	00e2      	lsls	r2, r4, #3
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	18e3      	adds	r3, r4, r3
 8002ce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ce8:	464b      	mov	r3, r9
 8002cea:	eb45 0303 	adc.w	r3, r5, r3
 8002cee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d0e:	4629      	mov	r1, r5
 8002d10:	008b      	lsls	r3, r1, #2
 8002d12:	4621      	mov	r1, r4
 8002d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d18:	4621      	mov	r1, r4
 8002d1a:	008a      	lsls	r2, r1, #2
 8002d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d20:	f7fd fac6 	bl	80002b0 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4b60      	ldr	r3, [pc, #384]	; (8002eac <UART_SetConfig+0x4e4>)
 8002d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	011c      	lsls	r4, r3, #4
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	1891      	adds	r1, r2, r2
 8002d4a:	61b9      	str	r1, [r7, #24]
 8002d4c:	415b      	adcs	r3, r3
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d54:	4641      	mov	r1, r8
 8002d56:	1851      	adds	r1, r2, r1
 8002d58:	6139      	str	r1, [r7, #16]
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	414b      	adcs	r3, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	00cb      	lsls	r3, r1, #3
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d76:	4651      	mov	r1, sl
 8002d78:	00ca      	lsls	r2, r1, #3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4642      	mov	r2, r8
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d88:	464b      	mov	r3, r9
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	eb42 0303 	adc.w	r3, r2, r3
 8002d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002dac:	4649      	mov	r1, r9
 8002dae:	008b      	lsls	r3, r1, #2
 8002db0:	4641      	mov	r1, r8
 8002db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db6:	4641      	mov	r1, r8
 8002db8:	008a      	lsls	r2, r1, #2
 8002dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002dbe:	f7fd fa77 	bl	80002b0 <__aeabi_uldivmod>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4b39      	ldr	r3, [pc, #228]	; (8002eac <UART_SetConfig+0x4e4>)
 8002dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	2164      	movs	r1, #100	; 0x64
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	3332      	adds	r3, #50	; 0x32
 8002dda:	4a34      	ldr	r2, [pc, #208]	; (8002eac <UART_SetConfig+0x4e4>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de6:	441c      	add	r4, r3
 8002de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dec:	2200      	movs	r2, #0
 8002dee:	673b      	str	r3, [r7, #112]	; 0x70
 8002df0:	677a      	str	r2, [r7, #116]	; 0x74
 8002df2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002df6:	4642      	mov	r2, r8
 8002df8:	464b      	mov	r3, r9
 8002dfa:	1891      	adds	r1, r2, r2
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	415b      	adcs	r3, r3
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e06:	4641      	mov	r1, r8
 8002e08:	1851      	adds	r1, r2, r1
 8002e0a:	6039      	str	r1, [r7, #0]
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	414b      	adcs	r3, r1
 8002e10:	607b      	str	r3, [r7, #4]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e1e:	4659      	mov	r1, fp
 8002e20:	00cb      	lsls	r3, r1, #3
 8002e22:	4651      	mov	r1, sl
 8002e24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e28:	4651      	mov	r1, sl
 8002e2a:	00ca      	lsls	r2, r1, #3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4603      	mov	r3, r0
 8002e32:	4642      	mov	r2, r8
 8002e34:	189b      	adds	r3, r3, r2
 8002e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e38:	464b      	mov	r3, r9
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	eb42 0303 	adc.w	r3, r2, r3
 8002e40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e4c:	667a      	str	r2, [r7, #100]	; 0x64
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002e5a:	4649      	mov	r1, r9
 8002e5c:	008b      	lsls	r3, r1, #2
 8002e5e:	4641      	mov	r1, r8
 8002e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e64:	4641      	mov	r1, r8
 8002e66:	008a      	lsls	r2, r1, #2
 8002e68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e6c:	f7fd fa20 	bl	80002b0 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <UART_SetConfig+0x4e4>)
 8002e76:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	2164      	movs	r1, #100	; 0x64
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	3332      	adds	r3, #50	; 0x32
 8002e88:	4a08      	ldr	r2, [pc, #32]	; (8002eac <UART_SetConfig+0x4e4>)
 8002e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4422      	add	r2, r4
 8002e9c:	609a      	str	r2, [r3, #8]
}
 8002e9e:	bf00      	nop
 8002ea0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eaa:	bf00      	nop
 8002eac:	51eb851f 	.word	0x51eb851f

08002eb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	f107 001c 	add.w	r0, r7, #28
 8002ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d122      	bne.n	8002f0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 faa2 	bl	800344c <USB_CoreReset>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e01a      	b.n	8002f44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fa96 	bl	800344c <USB_CoreReset>
 8002f20:	4603      	mov	r3, r0
 8002f22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
 8002f36:	e005      	b.n	8002f44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d10b      	bne.n	8002f62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f043 0206 	orr.w	r2, r3, #6
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f043 0220 	orr.w	r2, r3, #32
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f6e:	b004      	add	sp, #16
 8002f70:	4770      	bx	lr

08002f72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f023 0201 	bic.w	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d115      	bne.n	8002fe2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fe f81a 	bl	8000ffc <HAL_Delay>
      ms++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa2e 	bl	8003430 <USB_GetMode>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d01e      	beq.n	8003018 <USB_SetCurrentMode+0x84>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2b31      	cmp	r3, #49	; 0x31
 8002fde:	d9f0      	bls.n	8002fc2 <USB_SetCurrentMode+0x2e>
 8002fe0:	e01a      	b.n	8003018 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d115      	bne.n	8003014 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f7fe f801 	bl	8000ffc <HAL_Delay>
      ms++;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fa15 	bl	8003430 <USB_GetMode>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <USB_SetCurrentMode+0x84>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b31      	cmp	r3, #49	; 0x31
 8003010:	d9f0      	bls.n	8002ff4 <USB_SetCurrentMode+0x60>
 8003012:	e001      	b.n	8003018 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e005      	b.n	8003024 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b32      	cmp	r3, #50	; 0x32
 800301c:	d101      	bne.n	8003022 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800302c:	b084      	sub	sp, #16
 800302e:	b580      	push	{r7, lr}
 8003030:	b086      	sub	sp, #24
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800303a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	e009      	b.n	8003060 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3340      	adds	r3, #64	; 0x40
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4413      	add	r3, r2
 8003056:	2200      	movs	r2, #0
 8003058:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	3301      	adds	r3, #1
 800305e:	613b      	str	r3, [r7, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	2b0e      	cmp	r3, #14
 8003064:	d9f2      	bls.n	800304c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d11c      	bne.n	80030a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800307a:	f043 0302 	orr.w	r3, r3, #2
 800307e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
 80030a4:	e00b      	b.n	80030be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030c4:	461a      	mov	r2, r3
 80030c6:	2300      	movs	r3, #0
 80030c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d0:	4619      	mov	r1, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d8:	461a      	mov	r2, r3
 80030da:	680b      	ldr	r3, [r1, #0]
 80030dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10c      	bne.n	80030fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d104      	bne.n	80030f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030ea:	2100      	movs	r1, #0
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f965 	bl	80033bc <USB_SetDevSpeed>
 80030f2:	e008      	b.n	8003106 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030f4:	2101      	movs	r1, #1
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f960 	bl	80033bc <USB_SetDevSpeed>
 80030fc:	e003      	b.n	8003106 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030fe:	2103      	movs	r1, #3
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f95b 	bl	80033bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003106:	2110      	movs	r1, #16
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8f3 	bl	80032f4 <USB_FlushTxFifo>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f91f 	bl	800335c <USB_FlushRxFifo>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	461a      	mov	r2, r3
 800313c:	2300      	movs	r3, #0
 800313e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003146:	461a      	mov	r2, r3
 8003148:	2300      	movs	r3, #0
 800314a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	e043      	b.n	80031da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003168:	d118      	bne.n	800319c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10a      	bne.n	8003186 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317c:	461a      	mov	r2, r3
 800317e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e013      	b.n	80031ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003192:	461a      	mov	r2, r3
 8003194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e008      	b.n	80031ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031a8:	461a      	mov	r2, r3
 80031aa:	2300      	movs	r3, #0
 80031ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ba:	461a      	mov	r2, r3
 80031bc:	2300      	movs	r3, #0
 80031be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031cc:	461a      	mov	r2, r3
 80031ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	3301      	adds	r3, #1
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d3b7      	bcc.n	8003152 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	e043      	b.n	8003270 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	015a      	lsls	r2, r3, #5
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031fe:	d118      	bne.n	8003232 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10a      	bne.n	800321c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	e013      	b.n	8003244 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e008      	b.n	8003244 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800323e:	461a      	mov	r2, r3
 8003240:	2300      	movs	r3, #0
 8003242:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	2300      	movs	r3, #0
 8003254:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3301      	adds	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	429a      	cmp	r2, r3
 8003276:	d3b7      	bcc.n	80031e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003286:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800328a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003298:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800329a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f043 0210 	orr.w	r2, r3, #16
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699a      	ldr	r2, [r3, #24]
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <USB_DevInit+0x2c4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f043 0208 	orr.w	r2, r3, #8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ec:	b004      	add	sp, #16
 80032ee:	4770      	bx	lr
 80032f0:	803c3800 	.word	0x803c3800

080032f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3301      	adds	r3, #1
 8003306:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <USB_FlushTxFifo+0x64>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e01b      	b.n	800334c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	daf2      	bge.n	8003302 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	019b      	lsls	r3, r3, #6
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a08      	ldr	r2, [pc, #32]	; (8003358 <USB_FlushTxFifo+0x64>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e006      	b.n	800334c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d0f0      	beq.n	800332c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	00030d40 	.word	0x00030d40

0800335c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3301      	adds	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4a11      	ldr	r2, [pc, #68]	; (80033b8 <USB_FlushRxFifo+0x5c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e018      	b.n	80033ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	daf2      	bge.n	8003368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2210      	movs	r2, #16
 800338a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <USB_FlushRxFifo+0x5c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e006      	b.n	80033ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d0f0      	beq.n	800338c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	00030d40 	.word	0x00030d40

080033bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003408:	f023 0303 	bic.w	r3, r3, #3
 800340c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0301 	and.w	r3, r3, #1
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <USB_CoreReset+0x64>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e01b      	b.n	80034a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	daf2      	bge.n	8003458 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3301      	adds	r3, #1
 8003486:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4a09      	ldr	r2, [pc, #36]	; (80034b0 <USB_CoreReset+0x64>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d901      	bls.n	8003494 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e006      	b.n	80034a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d0f0      	beq.n	8003482 <USB_CoreReset+0x36>

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	00030d40 	.word	0x00030d40

080034b4 <__errno>:
 80034b4:	4b01      	ldr	r3, [pc, #4]	; (80034bc <__errno+0x8>)
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000000c 	.word	0x2000000c

080034c0 <__libc_init_array>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4d0d      	ldr	r5, [pc, #52]	; (80034f8 <__libc_init_array+0x38>)
 80034c4:	4c0d      	ldr	r4, [pc, #52]	; (80034fc <__libc_init_array+0x3c>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	2600      	movs	r6, #0
 80034cc:	42a6      	cmp	r6, r4
 80034ce:	d109      	bne.n	80034e4 <__libc_init_array+0x24>
 80034d0:	4d0b      	ldr	r5, [pc, #44]	; (8003500 <__libc_init_array+0x40>)
 80034d2:	4c0c      	ldr	r4, [pc, #48]	; (8003504 <__libc_init_array+0x44>)
 80034d4:	f000 fc8e 	bl	8003df4 <_init>
 80034d8:	1b64      	subs	r4, r4, r5
 80034da:	10a4      	asrs	r4, r4, #2
 80034dc:	2600      	movs	r6, #0
 80034de:	42a6      	cmp	r6, r4
 80034e0:	d105      	bne.n	80034ee <__libc_init_array+0x2e>
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
 80034e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e8:	4798      	blx	r3
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7ee      	b.n	80034cc <__libc_init_array+0xc>
 80034ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f2:	4798      	blx	r3
 80034f4:	3601      	adds	r6, #1
 80034f6:	e7f2      	b.n	80034de <__libc_init_array+0x1e>
 80034f8:	08003e78 	.word	0x08003e78
 80034fc:	08003e78 	.word	0x08003e78
 8003500:	08003e78 	.word	0x08003e78
 8003504:	08003e7c 	.word	0x08003e7c

08003508 <memset>:
 8003508:	4402      	add	r2, r0
 800350a:	4603      	mov	r3, r0
 800350c:	4293      	cmp	r3, r2
 800350e:	d100      	bne.n	8003512 <memset+0xa>
 8003510:	4770      	bx	lr
 8003512:	f803 1b01 	strb.w	r1, [r3], #1
 8003516:	e7f9      	b.n	800350c <memset+0x4>

08003518 <siprintf>:
 8003518:	b40e      	push	{r1, r2, r3}
 800351a:	b500      	push	{lr}
 800351c:	b09c      	sub	sp, #112	; 0x70
 800351e:	ab1d      	add	r3, sp, #116	; 0x74
 8003520:	9002      	str	r0, [sp, #8]
 8003522:	9006      	str	r0, [sp, #24]
 8003524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003528:	4809      	ldr	r0, [pc, #36]	; (8003550 <siprintf+0x38>)
 800352a:	9107      	str	r1, [sp, #28]
 800352c:	9104      	str	r1, [sp, #16]
 800352e:	4909      	ldr	r1, [pc, #36]	; (8003554 <siprintf+0x3c>)
 8003530:	f853 2b04 	ldr.w	r2, [r3], #4
 8003534:	9105      	str	r1, [sp, #20]
 8003536:	6800      	ldr	r0, [r0, #0]
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	a902      	add	r1, sp, #8
 800353c:	f000 f868 	bl	8003610 <_svfiprintf_r>
 8003540:	9b02      	ldr	r3, [sp, #8]
 8003542:	2200      	movs	r2, #0
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	b01c      	add	sp, #112	; 0x70
 8003548:	f85d eb04 	ldr.w	lr, [sp], #4
 800354c:	b003      	add	sp, #12
 800354e:	4770      	bx	lr
 8003550:	2000000c 	.word	0x2000000c
 8003554:	ffff0208 	.word	0xffff0208

08003558 <__ssputs_r>:
 8003558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	688e      	ldr	r6, [r1, #8]
 800355e:	429e      	cmp	r6, r3
 8003560:	4682      	mov	sl, r0
 8003562:	460c      	mov	r4, r1
 8003564:	4690      	mov	r8, r2
 8003566:	461f      	mov	r7, r3
 8003568:	d838      	bhi.n	80035dc <__ssputs_r+0x84>
 800356a:	898a      	ldrh	r2, [r1, #12]
 800356c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003570:	d032      	beq.n	80035d8 <__ssputs_r+0x80>
 8003572:	6825      	ldr	r5, [r4, #0]
 8003574:	6909      	ldr	r1, [r1, #16]
 8003576:	eba5 0901 	sub.w	r9, r5, r1
 800357a:	6965      	ldr	r5, [r4, #20]
 800357c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003580:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003584:	3301      	adds	r3, #1
 8003586:	444b      	add	r3, r9
 8003588:	106d      	asrs	r5, r5, #1
 800358a:	429d      	cmp	r5, r3
 800358c:	bf38      	it	cc
 800358e:	461d      	movcc	r5, r3
 8003590:	0553      	lsls	r3, r2, #21
 8003592:	d531      	bpl.n	80035f8 <__ssputs_r+0xa0>
 8003594:	4629      	mov	r1, r5
 8003596:	f000 fb63 	bl	8003c60 <_malloc_r>
 800359a:	4606      	mov	r6, r0
 800359c:	b950      	cbnz	r0, 80035b4 <__ssputs_r+0x5c>
 800359e:	230c      	movs	r3, #12
 80035a0:	f8ca 3000 	str.w	r3, [sl]
 80035a4:	89a3      	ldrh	r3, [r4, #12]
 80035a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b4:	6921      	ldr	r1, [r4, #16]
 80035b6:	464a      	mov	r2, r9
 80035b8:	f000 fabe 	bl	8003b38 <memcpy>
 80035bc:	89a3      	ldrh	r3, [r4, #12]
 80035be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c6:	81a3      	strh	r3, [r4, #12]
 80035c8:	6126      	str	r6, [r4, #16]
 80035ca:	6165      	str	r5, [r4, #20]
 80035cc:	444e      	add	r6, r9
 80035ce:	eba5 0509 	sub.w	r5, r5, r9
 80035d2:	6026      	str	r6, [r4, #0]
 80035d4:	60a5      	str	r5, [r4, #8]
 80035d6:	463e      	mov	r6, r7
 80035d8:	42be      	cmp	r6, r7
 80035da:	d900      	bls.n	80035de <__ssputs_r+0x86>
 80035dc:	463e      	mov	r6, r7
 80035de:	6820      	ldr	r0, [r4, #0]
 80035e0:	4632      	mov	r2, r6
 80035e2:	4641      	mov	r1, r8
 80035e4:	f000 fab6 	bl	8003b54 <memmove>
 80035e8:	68a3      	ldr	r3, [r4, #8]
 80035ea:	1b9b      	subs	r3, r3, r6
 80035ec:	60a3      	str	r3, [r4, #8]
 80035ee:	6823      	ldr	r3, [r4, #0]
 80035f0:	4433      	add	r3, r6
 80035f2:	6023      	str	r3, [r4, #0]
 80035f4:	2000      	movs	r0, #0
 80035f6:	e7db      	b.n	80035b0 <__ssputs_r+0x58>
 80035f8:	462a      	mov	r2, r5
 80035fa:	f000 fba5 	bl	8003d48 <_realloc_r>
 80035fe:	4606      	mov	r6, r0
 8003600:	2800      	cmp	r0, #0
 8003602:	d1e1      	bne.n	80035c8 <__ssputs_r+0x70>
 8003604:	6921      	ldr	r1, [r4, #16]
 8003606:	4650      	mov	r0, sl
 8003608:	f000 fabe 	bl	8003b88 <_free_r>
 800360c:	e7c7      	b.n	800359e <__ssputs_r+0x46>
	...

08003610 <_svfiprintf_r>:
 8003610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003614:	4698      	mov	r8, r3
 8003616:	898b      	ldrh	r3, [r1, #12]
 8003618:	061b      	lsls	r3, r3, #24
 800361a:	b09d      	sub	sp, #116	; 0x74
 800361c:	4607      	mov	r7, r0
 800361e:	460d      	mov	r5, r1
 8003620:	4614      	mov	r4, r2
 8003622:	d50e      	bpl.n	8003642 <_svfiprintf_r+0x32>
 8003624:	690b      	ldr	r3, [r1, #16]
 8003626:	b963      	cbnz	r3, 8003642 <_svfiprintf_r+0x32>
 8003628:	2140      	movs	r1, #64	; 0x40
 800362a:	f000 fb19 	bl	8003c60 <_malloc_r>
 800362e:	6028      	str	r0, [r5, #0]
 8003630:	6128      	str	r0, [r5, #16]
 8003632:	b920      	cbnz	r0, 800363e <_svfiprintf_r+0x2e>
 8003634:	230c      	movs	r3, #12
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800363c:	e0d1      	b.n	80037e2 <_svfiprintf_r+0x1d2>
 800363e:	2340      	movs	r3, #64	; 0x40
 8003640:	616b      	str	r3, [r5, #20]
 8003642:	2300      	movs	r3, #0
 8003644:	9309      	str	r3, [sp, #36]	; 0x24
 8003646:	2320      	movs	r3, #32
 8003648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800364c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003650:	2330      	movs	r3, #48	; 0x30
 8003652:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80037fc <_svfiprintf_r+0x1ec>
 8003656:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800365a:	f04f 0901 	mov.w	r9, #1
 800365e:	4623      	mov	r3, r4
 8003660:	469a      	mov	sl, r3
 8003662:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003666:	b10a      	cbz	r2, 800366c <_svfiprintf_r+0x5c>
 8003668:	2a25      	cmp	r2, #37	; 0x25
 800366a:	d1f9      	bne.n	8003660 <_svfiprintf_r+0x50>
 800366c:	ebba 0b04 	subs.w	fp, sl, r4
 8003670:	d00b      	beq.n	800368a <_svfiprintf_r+0x7a>
 8003672:	465b      	mov	r3, fp
 8003674:	4622      	mov	r2, r4
 8003676:	4629      	mov	r1, r5
 8003678:	4638      	mov	r0, r7
 800367a:	f7ff ff6d 	bl	8003558 <__ssputs_r>
 800367e:	3001      	adds	r0, #1
 8003680:	f000 80aa 	beq.w	80037d8 <_svfiprintf_r+0x1c8>
 8003684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003686:	445a      	add	r2, fp
 8003688:	9209      	str	r2, [sp, #36]	; 0x24
 800368a:	f89a 3000 	ldrb.w	r3, [sl]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80a2 	beq.w	80037d8 <_svfiprintf_r+0x1c8>
 8003694:	2300      	movs	r3, #0
 8003696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800369a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800369e:	f10a 0a01 	add.w	sl, sl, #1
 80036a2:	9304      	str	r3, [sp, #16]
 80036a4:	9307      	str	r3, [sp, #28]
 80036a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036aa:	931a      	str	r3, [sp, #104]	; 0x68
 80036ac:	4654      	mov	r4, sl
 80036ae:	2205      	movs	r2, #5
 80036b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b4:	4851      	ldr	r0, [pc, #324]	; (80037fc <_svfiprintf_r+0x1ec>)
 80036b6:	f7fc fdab 	bl	8000210 <memchr>
 80036ba:	9a04      	ldr	r2, [sp, #16]
 80036bc:	b9d8      	cbnz	r0, 80036f6 <_svfiprintf_r+0xe6>
 80036be:	06d0      	lsls	r0, r2, #27
 80036c0:	bf44      	itt	mi
 80036c2:	2320      	movmi	r3, #32
 80036c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036c8:	0711      	lsls	r1, r2, #28
 80036ca:	bf44      	itt	mi
 80036cc:	232b      	movmi	r3, #43	; 0x2b
 80036ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80036d2:	f89a 3000 	ldrb.w	r3, [sl]
 80036d6:	2b2a      	cmp	r3, #42	; 0x2a
 80036d8:	d015      	beq.n	8003706 <_svfiprintf_r+0xf6>
 80036da:	9a07      	ldr	r2, [sp, #28]
 80036dc:	4654      	mov	r4, sl
 80036de:	2000      	movs	r0, #0
 80036e0:	f04f 0c0a 	mov.w	ip, #10
 80036e4:	4621      	mov	r1, r4
 80036e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036ea:	3b30      	subs	r3, #48	; 0x30
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	d94e      	bls.n	800378e <_svfiprintf_r+0x17e>
 80036f0:	b1b0      	cbz	r0, 8003720 <_svfiprintf_r+0x110>
 80036f2:	9207      	str	r2, [sp, #28]
 80036f4:	e014      	b.n	8003720 <_svfiprintf_r+0x110>
 80036f6:	eba0 0308 	sub.w	r3, r0, r8
 80036fa:	fa09 f303 	lsl.w	r3, r9, r3
 80036fe:	4313      	orrs	r3, r2
 8003700:	9304      	str	r3, [sp, #16]
 8003702:	46a2      	mov	sl, r4
 8003704:	e7d2      	b.n	80036ac <_svfiprintf_r+0x9c>
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	1d19      	adds	r1, r3, #4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	9103      	str	r1, [sp, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	bfbb      	ittet	lt
 8003712:	425b      	neglt	r3, r3
 8003714:	f042 0202 	orrlt.w	r2, r2, #2
 8003718:	9307      	strge	r3, [sp, #28]
 800371a:	9307      	strlt	r3, [sp, #28]
 800371c:	bfb8      	it	lt
 800371e:	9204      	strlt	r2, [sp, #16]
 8003720:	7823      	ldrb	r3, [r4, #0]
 8003722:	2b2e      	cmp	r3, #46	; 0x2e
 8003724:	d10c      	bne.n	8003740 <_svfiprintf_r+0x130>
 8003726:	7863      	ldrb	r3, [r4, #1]
 8003728:	2b2a      	cmp	r3, #42	; 0x2a
 800372a:	d135      	bne.n	8003798 <_svfiprintf_r+0x188>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	9203      	str	r2, [sp, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	bfb8      	it	lt
 8003738:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800373c:	3402      	adds	r4, #2
 800373e:	9305      	str	r3, [sp, #20]
 8003740:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800380c <_svfiprintf_r+0x1fc>
 8003744:	7821      	ldrb	r1, [r4, #0]
 8003746:	2203      	movs	r2, #3
 8003748:	4650      	mov	r0, sl
 800374a:	f7fc fd61 	bl	8000210 <memchr>
 800374e:	b140      	cbz	r0, 8003762 <_svfiprintf_r+0x152>
 8003750:	2340      	movs	r3, #64	; 0x40
 8003752:	eba0 000a 	sub.w	r0, r0, sl
 8003756:	fa03 f000 	lsl.w	r0, r3, r0
 800375a:	9b04      	ldr	r3, [sp, #16]
 800375c:	4303      	orrs	r3, r0
 800375e:	3401      	adds	r4, #1
 8003760:	9304      	str	r3, [sp, #16]
 8003762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003766:	4826      	ldr	r0, [pc, #152]	; (8003800 <_svfiprintf_r+0x1f0>)
 8003768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800376c:	2206      	movs	r2, #6
 800376e:	f7fc fd4f 	bl	8000210 <memchr>
 8003772:	2800      	cmp	r0, #0
 8003774:	d038      	beq.n	80037e8 <_svfiprintf_r+0x1d8>
 8003776:	4b23      	ldr	r3, [pc, #140]	; (8003804 <_svfiprintf_r+0x1f4>)
 8003778:	bb1b      	cbnz	r3, 80037c2 <_svfiprintf_r+0x1b2>
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	3307      	adds	r3, #7
 800377e:	f023 0307 	bic.w	r3, r3, #7
 8003782:	3308      	adds	r3, #8
 8003784:	9303      	str	r3, [sp, #12]
 8003786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003788:	4433      	add	r3, r6
 800378a:	9309      	str	r3, [sp, #36]	; 0x24
 800378c:	e767      	b.n	800365e <_svfiprintf_r+0x4e>
 800378e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003792:	460c      	mov	r4, r1
 8003794:	2001      	movs	r0, #1
 8003796:	e7a5      	b.n	80036e4 <_svfiprintf_r+0xd4>
 8003798:	2300      	movs	r3, #0
 800379a:	3401      	adds	r4, #1
 800379c:	9305      	str	r3, [sp, #20]
 800379e:	4619      	mov	r1, r3
 80037a0:	f04f 0c0a 	mov.w	ip, #10
 80037a4:	4620      	mov	r0, r4
 80037a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037aa:	3a30      	subs	r2, #48	; 0x30
 80037ac:	2a09      	cmp	r2, #9
 80037ae:	d903      	bls.n	80037b8 <_svfiprintf_r+0x1a8>
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0c5      	beq.n	8003740 <_svfiprintf_r+0x130>
 80037b4:	9105      	str	r1, [sp, #20]
 80037b6:	e7c3      	b.n	8003740 <_svfiprintf_r+0x130>
 80037b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80037bc:	4604      	mov	r4, r0
 80037be:	2301      	movs	r3, #1
 80037c0:	e7f0      	b.n	80037a4 <_svfiprintf_r+0x194>
 80037c2:	ab03      	add	r3, sp, #12
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	462a      	mov	r2, r5
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <_svfiprintf_r+0x1f8>)
 80037ca:	a904      	add	r1, sp, #16
 80037cc:	4638      	mov	r0, r7
 80037ce:	f3af 8000 	nop.w
 80037d2:	1c42      	adds	r2, r0, #1
 80037d4:	4606      	mov	r6, r0
 80037d6:	d1d6      	bne.n	8003786 <_svfiprintf_r+0x176>
 80037d8:	89ab      	ldrh	r3, [r5, #12]
 80037da:	065b      	lsls	r3, r3, #25
 80037dc:	f53f af2c 	bmi.w	8003638 <_svfiprintf_r+0x28>
 80037e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037e2:	b01d      	add	sp, #116	; 0x74
 80037e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e8:	ab03      	add	r3, sp, #12
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	462a      	mov	r2, r5
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <_svfiprintf_r+0x1f8>)
 80037f0:	a904      	add	r1, sp, #16
 80037f2:	4638      	mov	r0, r7
 80037f4:	f000 f87a 	bl	80038ec <_printf_i>
 80037f8:	e7eb      	b.n	80037d2 <_svfiprintf_r+0x1c2>
 80037fa:	bf00      	nop
 80037fc:	08003e3c 	.word	0x08003e3c
 8003800:	08003e46 	.word	0x08003e46
 8003804:	00000000 	.word	0x00000000
 8003808:	08003559 	.word	0x08003559
 800380c:	08003e42 	.word	0x08003e42

08003810 <_printf_common>:
 8003810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003814:	4616      	mov	r6, r2
 8003816:	4699      	mov	r9, r3
 8003818:	688a      	ldr	r2, [r1, #8]
 800381a:	690b      	ldr	r3, [r1, #16]
 800381c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003820:	4293      	cmp	r3, r2
 8003822:	bfb8      	it	lt
 8003824:	4613      	movlt	r3, r2
 8003826:	6033      	str	r3, [r6, #0]
 8003828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800382c:	4607      	mov	r7, r0
 800382e:	460c      	mov	r4, r1
 8003830:	b10a      	cbz	r2, 8003836 <_printf_common+0x26>
 8003832:	3301      	adds	r3, #1
 8003834:	6033      	str	r3, [r6, #0]
 8003836:	6823      	ldr	r3, [r4, #0]
 8003838:	0699      	lsls	r1, r3, #26
 800383a:	bf42      	ittt	mi
 800383c:	6833      	ldrmi	r3, [r6, #0]
 800383e:	3302      	addmi	r3, #2
 8003840:	6033      	strmi	r3, [r6, #0]
 8003842:	6825      	ldr	r5, [r4, #0]
 8003844:	f015 0506 	ands.w	r5, r5, #6
 8003848:	d106      	bne.n	8003858 <_printf_common+0x48>
 800384a:	f104 0a19 	add.w	sl, r4, #25
 800384e:	68e3      	ldr	r3, [r4, #12]
 8003850:	6832      	ldr	r2, [r6, #0]
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	42ab      	cmp	r3, r5
 8003856:	dc26      	bgt.n	80038a6 <_printf_common+0x96>
 8003858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800385c:	1e13      	subs	r3, r2, #0
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	bf18      	it	ne
 8003862:	2301      	movne	r3, #1
 8003864:	0692      	lsls	r2, r2, #26
 8003866:	d42b      	bmi.n	80038c0 <_printf_common+0xb0>
 8003868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800386c:	4649      	mov	r1, r9
 800386e:	4638      	mov	r0, r7
 8003870:	47c0      	blx	r8
 8003872:	3001      	adds	r0, #1
 8003874:	d01e      	beq.n	80038b4 <_printf_common+0xa4>
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	68e5      	ldr	r5, [r4, #12]
 800387a:	6832      	ldr	r2, [r6, #0]
 800387c:	f003 0306 	and.w	r3, r3, #6
 8003880:	2b04      	cmp	r3, #4
 8003882:	bf08      	it	eq
 8003884:	1aad      	subeq	r5, r5, r2
 8003886:	68a3      	ldr	r3, [r4, #8]
 8003888:	6922      	ldr	r2, [r4, #16]
 800388a:	bf0c      	ite	eq
 800388c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003890:	2500      	movne	r5, #0
 8003892:	4293      	cmp	r3, r2
 8003894:	bfc4      	itt	gt
 8003896:	1a9b      	subgt	r3, r3, r2
 8003898:	18ed      	addgt	r5, r5, r3
 800389a:	2600      	movs	r6, #0
 800389c:	341a      	adds	r4, #26
 800389e:	42b5      	cmp	r5, r6
 80038a0:	d11a      	bne.n	80038d8 <_printf_common+0xc8>
 80038a2:	2000      	movs	r0, #0
 80038a4:	e008      	b.n	80038b8 <_printf_common+0xa8>
 80038a6:	2301      	movs	r3, #1
 80038a8:	4652      	mov	r2, sl
 80038aa:	4649      	mov	r1, r9
 80038ac:	4638      	mov	r0, r7
 80038ae:	47c0      	blx	r8
 80038b0:	3001      	adds	r0, #1
 80038b2:	d103      	bne.n	80038bc <_printf_common+0xac>
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038bc:	3501      	adds	r5, #1
 80038be:	e7c6      	b.n	800384e <_printf_common+0x3e>
 80038c0:	18e1      	adds	r1, r4, r3
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	2030      	movs	r0, #48	; 0x30
 80038c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038ca:	4422      	add	r2, r4
 80038cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038d4:	3302      	adds	r3, #2
 80038d6:	e7c7      	b.n	8003868 <_printf_common+0x58>
 80038d8:	2301      	movs	r3, #1
 80038da:	4622      	mov	r2, r4
 80038dc:	4649      	mov	r1, r9
 80038de:	4638      	mov	r0, r7
 80038e0:	47c0      	blx	r8
 80038e2:	3001      	adds	r0, #1
 80038e4:	d0e6      	beq.n	80038b4 <_printf_common+0xa4>
 80038e6:	3601      	adds	r6, #1
 80038e8:	e7d9      	b.n	800389e <_printf_common+0x8e>
	...

080038ec <_printf_i>:
 80038ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	7e0f      	ldrb	r7, [r1, #24]
 80038f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80038f4:	2f78      	cmp	r7, #120	; 0x78
 80038f6:	4691      	mov	r9, r2
 80038f8:	4680      	mov	r8, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	469a      	mov	sl, r3
 80038fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003902:	d807      	bhi.n	8003914 <_printf_i+0x28>
 8003904:	2f62      	cmp	r7, #98	; 0x62
 8003906:	d80a      	bhi.n	800391e <_printf_i+0x32>
 8003908:	2f00      	cmp	r7, #0
 800390a:	f000 80d8 	beq.w	8003abe <_printf_i+0x1d2>
 800390e:	2f58      	cmp	r7, #88	; 0x58
 8003910:	f000 80a3 	beq.w	8003a5a <_printf_i+0x16e>
 8003914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800391c:	e03a      	b.n	8003994 <_printf_i+0xa8>
 800391e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003922:	2b15      	cmp	r3, #21
 8003924:	d8f6      	bhi.n	8003914 <_printf_i+0x28>
 8003926:	a101      	add	r1, pc, #4	; (adr r1, 800392c <_printf_i+0x40>)
 8003928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800392c:	08003985 	.word	0x08003985
 8003930:	08003999 	.word	0x08003999
 8003934:	08003915 	.word	0x08003915
 8003938:	08003915 	.word	0x08003915
 800393c:	08003915 	.word	0x08003915
 8003940:	08003915 	.word	0x08003915
 8003944:	08003999 	.word	0x08003999
 8003948:	08003915 	.word	0x08003915
 800394c:	08003915 	.word	0x08003915
 8003950:	08003915 	.word	0x08003915
 8003954:	08003915 	.word	0x08003915
 8003958:	08003aa5 	.word	0x08003aa5
 800395c:	080039c9 	.word	0x080039c9
 8003960:	08003a87 	.word	0x08003a87
 8003964:	08003915 	.word	0x08003915
 8003968:	08003915 	.word	0x08003915
 800396c:	08003ac7 	.word	0x08003ac7
 8003970:	08003915 	.word	0x08003915
 8003974:	080039c9 	.word	0x080039c9
 8003978:	08003915 	.word	0x08003915
 800397c:	08003915 	.word	0x08003915
 8003980:	08003a8f 	.word	0x08003a8f
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	1d1a      	adds	r2, r3, #4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	602a      	str	r2, [r5, #0]
 800398c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003994:	2301      	movs	r3, #1
 8003996:	e0a3      	b.n	8003ae0 <_printf_i+0x1f4>
 8003998:	6820      	ldr	r0, [r4, #0]
 800399a:	6829      	ldr	r1, [r5, #0]
 800399c:	0606      	lsls	r6, r0, #24
 800399e:	f101 0304 	add.w	r3, r1, #4
 80039a2:	d50a      	bpl.n	80039ba <_printf_i+0xce>
 80039a4:	680e      	ldr	r6, [r1, #0]
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	2e00      	cmp	r6, #0
 80039aa:	da03      	bge.n	80039b4 <_printf_i+0xc8>
 80039ac:	232d      	movs	r3, #45	; 0x2d
 80039ae:	4276      	negs	r6, r6
 80039b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b4:	485e      	ldr	r0, [pc, #376]	; (8003b30 <_printf_i+0x244>)
 80039b6:	230a      	movs	r3, #10
 80039b8:	e019      	b.n	80039ee <_printf_i+0x102>
 80039ba:	680e      	ldr	r6, [r1, #0]
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039c2:	bf18      	it	ne
 80039c4:	b236      	sxthne	r6, r6
 80039c6:	e7ef      	b.n	80039a8 <_printf_i+0xbc>
 80039c8:	682b      	ldr	r3, [r5, #0]
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	1d19      	adds	r1, r3, #4
 80039ce:	6029      	str	r1, [r5, #0]
 80039d0:	0601      	lsls	r1, r0, #24
 80039d2:	d501      	bpl.n	80039d8 <_printf_i+0xec>
 80039d4:	681e      	ldr	r6, [r3, #0]
 80039d6:	e002      	b.n	80039de <_printf_i+0xf2>
 80039d8:	0646      	lsls	r6, r0, #25
 80039da:	d5fb      	bpl.n	80039d4 <_printf_i+0xe8>
 80039dc:	881e      	ldrh	r6, [r3, #0]
 80039de:	4854      	ldr	r0, [pc, #336]	; (8003b30 <_printf_i+0x244>)
 80039e0:	2f6f      	cmp	r7, #111	; 0x6f
 80039e2:	bf0c      	ite	eq
 80039e4:	2308      	moveq	r3, #8
 80039e6:	230a      	movne	r3, #10
 80039e8:	2100      	movs	r1, #0
 80039ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80039ee:	6865      	ldr	r5, [r4, #4]
 80039f0:	60a5      	str	r5, [r4, #8]
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	bfa2      	ittt	ge
 80039f6:	6821      	ldrge	r1, [r4, #0]
 80039f8:	f021 0104 	bicge.w	r1, r1, #4
 80039fc:	6021      	strge	r1, [r4, #0]
 80039fe:	b90e      	cbnz	r6, 8003a04 <_printf_i+0x118>
 8003a00:	2d00      	cmp	r5, #0
 8003a02:	d04d      	beq.n	8003aa0 <_printf_i+0x1b4>
 8003a04:	4615      	mov	r5, r2
 8003a06:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a0a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a0e:	5dc7      	ldrb	r7, [r0, r7]
 8003a10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a14:	4637      	mov	r7, r6
 8003a16:	42bb      	cmp	r3, r7
 8003a18:	460e      	mov	r6, r1
 8003a1a:	d9f4      	bls.n	8003a06 <_printf_i+0x11a>
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d10b      	bne.n	8003a38 <_printf_i+0x14c>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	07de      	lsls	r6, r3, #31
 8003a24:	d508      	bpl.n	8003a38 <_printf_i+0x14c>
 8003a26:	6923      	ldr	r3, [r4, #16]
 8003a28:	6861      	ldr	r1, [r4, #4]
 8003a2a:	4299      	cmp	r1, r3
 8003a2c:	bfde      	ittt	le
 8003a2e:	2330      	movle	r3, #48	; 0x30
 8003a30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a38:	1b52      	subs	r2, r2, r5
 8003a3a:	6122      	str	r2, [r4, #16]
 8003a3c:	f8cd a000 	str.w	sl, [sp]
 8003a40:	464b      	mov	r3, r9
 8003a42:	aa03      	add	r2, sp, #12
 8003a44:	4621      	mov	r1, r4
 8003a46:	4640      	mov	r0, r8
 8003a48:	f7ff fee2 	bl	8003810 <_printf_common>
 8003a4c:	3001      	adds	r0, #1
 8003a4e:	d14c      	bne.n	8003aea <_printf_i+0x1fe>
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a54:	b004      	add	sp, #16
 8003a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5a:	4835      	ldr	r0, [pc, #212]	; (8003b30 <_printf_i+0x244>)
 8003a5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003a60:	6829      	ldr	r1, [r5, #0]
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8003a68:	6029      	str	r1, [r5, #0]
 8003a6a:	061d      	lsls	r5, r3, #24
 8003a6c:	d514      	bpl.n	8003a98 <_printf_i+0x1ac>
 8003a6e:	07df      	lsls	r7, r3, #31
 8003a70:	bf44      	itt	mi
 8003a72:	f043 0320 	orrmi.w	r3, r3, #32
 8003a76:	6023      	strmi	r3, [r4, #0]
 8003a78:	b91e      	cbnz	r6, 8003a82 <_printf_i+0x196>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	f023 0320 	bic.w	r3, r3, #32
 8003a80:	6023      	str	r3, [r4, #0]
 8003a82:	2310      	movs	r3, #16
 8003a84:	e7b0      	b.n	80039e8 <_printf_i+0xfc>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	f043 0320 	orr.w	r3, r3, #32
 8003a8c:	6023      	str	r3, [r4, #0]
 8003a8e:	2378      	movs	r3, #120	; 0x78
 8003a90:	4828      	ldr	r0, [pc, #160]	; (8003b34 <_printf_i+0x248>)
 8003a92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a96:	e7e3      	b.n	8003a60 <_printf_i+0x174>
 8003a98:	0659      	lsls	r1, r3, #25
 8003a9a:	bf48      	it	mi
 8003a9c:	b2b6      	uxthmi	r6, r6
 8003a9e:	e7e6      	b.n	8003a6e <_printf_i+0x182>
 8003aa0:	4615      	mov	r5, r2
 8003aa2:	e7bb      	b.n	8003a1c <_printf_i+0x130>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	6826      	ldr	r6, [r4, #0]
 8003aa8:	6961      	ldr	r1, [r4, #20]
 8003aaa:	1d18      	adds	r0, r3, #4
 8003aac:	6028      	str	r0, [r5, #0]
 8003aae:	0635      	lsls	r5, r6, #24
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	d501      	bpl.n	8003ab8 <_printf_i+0x1cc>
 8003ab4:	6019      	str	r1, [r3, #0]
 8003ab6:	e002      	b.n	8003abe <_printf_i+0x1d2>
 8003ab8:	0670      	lsls	r0, r6, #25
 8003aba:	d5fb      	bpl.n	8003ab4 <_printf_i+0x1c8>
 8003abc:	8019      	strh	r1, [r3, #0]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6123      	str	r3, [r4, #16]
 8003ac2:	4615      	mov	r5, r2
 8003ac4:	e7ba      	b.n	8003a3c <_printf_i+0x150>
 8003ac6:	682b      	ldr	r3, [r5, #0]
 8003ac8:	1d1a      	adds	r2, r3, #4
 8003aca:	602a      	str	r2, [r5, #0]
 8003acc:	681d      	ldr	r5, [r3, #0]
 8003ace:	6862      	ldr	r2, [r4, #4]
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f7fc fb9c 	bl	8000210 <memchr>
 8003ad8:	b108      	cbz	r0, 8003ade <_printf_i+0x1f2>
 8003ada:	1b40      	subs	r0, r0, r5
 8003adc:	6060      	str	r0, [r4, #4]
 8003ade:	6863      	ldr	r3, [r4, #4]
 8003ae0:	6123      	str	r3, [r4, #16]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ae8:	e7a8      	b.n	8003a3c <_printf_i+0x150>
 8003aea:	6923      	ldr	r3, [r4, #16]
 8003aec:	462a      	mov	r2, r5
 8003aee:	4649      	mov	r1, r9
 8003af0:	4640      	mov	r0, r8
 8003af2:	47d0      	blx	sl
 8003af4:	3001      	adds	r0, #1
 8003af6:	d0ab      	beq.n	8003a50 <_printf_i+0x164>
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	079b      	lsls	r3, r3, #30
 8003afc:	d413      	bmi.n	8003b26 <_printf_i+0x23a>
 8003afe:	68e0      	ldr	r0, [r4, #12]
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	4298      	cmp	r0, r3
 8003b04:	bfb8      	it	lt
 8003b06:	4618      	movlt	r0, r3
 8003b08:	e7a4      	b.n	8003a54 <_printf_i+0x168>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	4632      	mov	r2, r6
 8003b0e:	4649      	mov	r1, r9
 8003b10:	4640      	mov	r0, r8
 8003b12:	47d0      	blx	sl
 8003b14:	3001      	adds	r0, #1
 8003b16:	d09b      	beq.n	8003a50 <_printf_i+0x164>
 8003b18:	3501      	adds	r5, #1
 8003b1a:	68e3      	ldr	r3, [r4, #12]
 8003b1c:	9903      	ldr	r1, [sp, #12]
 8003b1e:	1a5b      	subs	r3, r3, r1
 8003b20:	42ab      	cmp	r3, r5
 8003b22:	dcf2      	bgt.n	8003b0a <_printf_i+0x21e>
 8003b24:	e7eb      	b.n	8003afe <_printf_i+0x212>
 8003b26:	2500      	movs	r5, #0
 8003b28:	f104 0619 	add.w	r6, r4, #25
 8003b2c:	e7f5      	b.n	8003b1a <_printf_i+0x22e>
 8003b2e:	bf00      	nop
 8003b30:	08003e4d 	.word	0x08003e4d
 8003b34:	08003e5e 	.word	0x08003e5e

08003b38 <memcpy>:
 8003b38:	440a      	add	r2, r1
 8003b3a:	4291      	cmp	r1, r2
 8003b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003b40:	d100      	bne.n	8003b44 <memcpy+0xc>
 8003b42:	4770      	bx	lr
 8003b44:	b510      	push	{r4, lr}
 8003b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b4e:	4291      	cmp	r1, r2
 8003b50:	d1f9      	bne.n	8003b46 <memcpy+0xe>
 8003b52:	bd10      	pop	{r4, pc}

08003b54 <memmove>:
 8003b54:	4288      	cmp	r0, r1
 8003b56:	b510      	push	{r4, lr}
 8003b58:	eb01 0402 	add.w	r4, r1, r2
 8003b5c:	d902      	bls.n	8003b64 <memmove+0x10>
 8003b5e:	4284      	cmp	r4, r0
 8003b60:	4623      	mov	r3, r4
 8003b62:	d807      	bhi.n	8003b74 <memmove+0x20>
 8003b64:	1e43      	subs	r3, r0, #1
 8003b66:	42a1      	cmp	r1, r4
 8003b68:	d008      	beq.n	8003b7c <memmove+0x28>
 8003b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b72:	e7f8      	b.n	8003b66 <memmove+0x12>
 8003b74:	4402      	add	r2, r0
 8003b76:	4601      	mov	r1, r0
 8003b78:	428a      	cmp	r2, r1
 8003b7a:	d100      	bne.n	8003b7e <memmove+0x2a>
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b86:	e7f7      	b.n	8003b78 <memmove+0x24>

08003b88 <_free_r>:
 8003b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b8a:	2900      	cmp	r1, #0
 8003b8c:	d044      	beq.n	8003c18 <_free_r+0x90>
 8003b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b92:	9001      	str	r0, [sp, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f1a1 0404 	sub.w	r4, r1, #4
 8003b9a:	bfb8      	it	lt
 8003b9c:	18e4      	addlt	r4, r4, r3
 8003b9e:	f000 f913 	bl	8003dc8 <__malloc_lock>
 8003ba2:	4a1e      	ldr	r2, [pc, #120]	; (8003c1c <_free_r+0x94>)
 8003ba4:	9801      	ldr	r0, [sp, #4]
 8003ba6:	6813      	ldr	r3, [r2, #0]
 8003ba8:	b933      	cbnz	r3, 8003bb8 <_free_r+0x30>
 8003baa:	6063      	str	r3, [r4, #4]
 8003bac:	6014      	str	r4, [r2, #0]
 8003bae:	b003      	add	sp, #12
 8003bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003bb4:	f000 b90e 	b.w	8003dd4 <__malloc_unlock>
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	d908      	bls.n	8003bce <_free_r+0x46>
 8003bbc:	6825      	ldr	r5, [r4, #0]
 8003bbe:	1961      	adds	r1, r4, r5
 8003bc0:	428b      	cmp	r3, r1
 8003bc2:	bf01      	itttt	eq
 8003bc4:	6819      	ldreq	r1, [r3, #0]
 8003bc6:	685b      	ldreq	r3, [r3, #4]
 8003bc8:	1949      	addeq	r1, r1, r5
 8003bca:	6021      	streq	r1, [r4, #0]
 8003bcc:	e7ed      	b.n	8003baa <_free_r+0x22>
 8003bce:	461a      	mov	r2, r3
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	b10b      	cbz	r3, 8003bd8 <_free_r+0x50>
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d9fa      	bls.n	8003bce <_free_r+0x46>
 8003bd8:	6811      	ldr	r1, [r2, #0]
 8003bda:	1855      	adds	r5, r2, r1
 8003bdc:	42a5      	cmp	r5, r4
 8003bde:	d10b      	bne.n	8003bf8 <_free_r+0x70>
 8003be0:	6824      	ldr	r4, [r4, #0]
 8003be2:	4421      	add	r1, r4
 8003be4:	1854      	adds	r4, r2, r1
 8003be6:	42a3      	cmp	r3, r4
 8003be8:	6011      	str	r1, [r2, #0]
 8003bea:	d1e0      	bne.n	8003bae <_free_r+0x26>
 8003bec:	681c      	ldr	r4, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	6053      	str	r3, [r2, #4]
 8003bf2:	4421      	add	r1, r4
 8003bf4:	6011      	str	r1, [r2, #0]
 8003bf6:	e7da      	b.n	8003bae <_free_r+0x26>
 8003bf8:	d902      	bls.n	8003c00 <_free_r+0x78>
 8003bfa:	230c      	movs	r3, #12
 8003bfc:	6003      	str	r3, [r0, #0]
 8003bfe:	e7d6      	b.n	8003bae <_free_r+0x26>
 8003c00:	6825      	ldr	r5, [r4, #0]
 8003c02:	1961      	adds	r1, r4, r5
 8003c04:	428b      	cmp	r3, r1
 8003c06:	bf04      	itt	eq
 8003c08:	6819      	ldreq	r1, [r3, #0]
 8003c0a:	685b      	ldreq	r3, [r3, #4]
 8003c0c:	6063      	str	r3, [r4, #4]
 8003c0e:	bf04      	itt	eq
 8003c10:	1949      	addeq	r1, r1, r5
 8003c12:	6021      	streq	r1, [r4, #0]
 8003c14:	6054      	str	r4, [r2, #4]
 8003c16:	e7ca      	b.n	8003bae <_free_r+0x26>
 8003c18:	b003      	add	sp, #12
 8003c1a:	bd30      	pop	{r4, r5, pc}
 8003c1c:	2000084c 	.word	0x2000084c

08003c20 <sbrk_aligned>:
 8003c20:	b570      	push	{r4, r5, r6, lr}
 8003c22:	4e0e      	ldr	r6, [pc, #56]	; (8003c5c <sbrk_aligned+0x3c>)
 8003c24:	460c      	mov	r4, r1
 8003c26:	6831      	ldr	r1, [r6, #0]
 8003c28:	4605      	mov	r5, r0
 8003c2a:	b911      	cbnz	r1, 8003c32 <sbrk_aligned+0x12>
 8003c2c:	f000 f8bc 	bl	8003da8 <_sbrk_r>
 8003c30:	6030      	str	r0, [r6, #0]
 8003c32:	4621      	mov	r1, r4
 8003c34:	4628      	mov	r0, r5
 8003c36:	f000 f8b7 	bl	8003da8 <_sbrk_r>
 8003c3a:	1c43      	adds	r3, r0, #1
 8003c3c:	d00a      	beq.n	8003c54 <sbrk_aligned+0x34>
 8003c3e:	1cc4      	adds	r4, r0, #3
 8003c40:	f024 0403 	bic.w	r4, r4, #3
 8003c44:	42a0      	cmp	r0, r4
 8003c46:	d007      	beq.n	8003c58 <sbrk_aligned+0x38>
 8003c48:	1a21      	subs	r1, r4, r0
 8003c4a:	4628      	mov	r0, r5
 8003c4c:	f000 f8ac 	bl	8003da8 <_sbrk_r>
 8003c50:	3001      	adds	r0, #1
 8003c52:	d101      	bne.n	8003c58 <sbrk_aligned+0x38>
 8003c54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003c58:	4620      	mov	r0, r4
 8003c5a:	bd70      	pop	{r4, r5, r6, pc}
 8003c5c:	20000850 	.word	0x20000850

08003c60 <_malloc_r>:
 8003c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c64:	1ccd      	adds	r5, r1, #3
 8003c66:	f025 0503 	bic.w	r5, r5, #3
 8003c6a:	3508      	adds	r5, #8
 8003c6c:	2d0c      	cmp	r5, #12
 8003c6e:	bf38      	it	cc
 8003c70:	250c      	movcc	r5, #12
 8003c72:	2d00      	cmp	r5, #0
 8003c74:	4607      	mov	r7, r0
 8003c76:	db01      	blt.n	8003c7c <_malloc_r+0x1c>
 8003c78:	42a9      	cmp	r1, r5
 8003c7a:	d905      	bls.n	8003c88 <_malloc_r+0x28>
 8003c7c:	230c      	movs	r3, #12
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	2600      	movs	r6, #0
 8003c82:	4630      	mov	r0, r6
 8003c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c88:	4e2e      	ldr	r6, [pc, #184]	; (8003d44 <_malloc_r+0xe4>)
 8003c8a:	f000 f89d 	bl	8003dc8 <__malloc_lock>
 8003c8e:	6833      	ldr	r3, [r6, #0]
 8003c90:	461c      	mov	r4, r3
 8003c92:	bb34      	cbnz	r4, 8003ce2 <_malloc_r+0x82>
 8003c94:	4629      	mov	r1, r5
 8003c96:	4638      	mov	r0, r7
 8003c98:	f7ff ffc2 	bl	8003c20 <sbrk_aligned>
 8003c9c:	1c43      	adds	r3, r0, #1
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	d14d      	bne.n	8003d3e <_malloc_r+0xde>
 8003ca2:	6834      	ldr	r4, [r6, #0]
 8003ca4:	4626      	mov	r6, r4
 8003ca6:	2e00      	cmp	r6, #0
 8003ca8:	d140      	bne.n	8003d2c <_malloc_r+0xcc>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	4631      	mov	r1, r6
 8003cae:	4638      	mov	r0, r7
 8003cb0:	eb04 0803 	add.w	r8, r4, r3
 8003cb4:	f000 f878 	bl	8003da8 <_sbrk_r>
 8003cb8:	4580      	cmp	r8, r0
 8003cba:	d13a      	bne.n	8003d32 <_malloc_r+0xd2>
 8003cbc:	6821      	ldr	r1, [r4, #0]
 8003cbe:	3503      	adds	r5, #3
 8003cc0:	1a6d      	subs	r5, r5, r1
 8003cc2:	f025 0503 	bic.w	r5, r5, #3
 8003cc6:	3508      	adds	r5, #8
 8003cc8:	2d0c      	cmp	r5, #12
 8003cca:	bf38      	it	cc
 8003ccc:	250c      	movcc	r5, #12
 8003cce:	4629      	mov	r1, r5
 8003cd0:	4638      	mov	r0, r7
 8003cd2:	f7ff ffa5 	bl	8003c20 <sbrk_aligned>
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d02b      	beq.n	8003d32 <_malloc_r+0xd2>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	442b      	add	r3, r5
 8003cde:	6023      	str	r3, [r4, #0]
 8003ce0:	e00e      	b.n	8003d00 <_malloc_r+0xa0>
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	1b52      	subs	r2, r2, r5
 8003ce6:	d41e      	bmi.n	8003d26 <_malloc_r+0xc6>
 8003ce8:	2a0b      	cmp	r2, #11
 8003cea:	d916      	bls.n	8003d1a <_malloc_r+0xba>
 8003cec:	1961      	adds	r1, r4, r5
 8003cee:	42a3      	cmp	r3, r4
 8003cf0:	6025      	str	r5, [r4, #0]
 8003cf2:	bf18      	it	ne
 8003cf4:	6059      	strne	r1, [r3, #4]
 8003cf6:	6863      	ldr	r3, [r4, #4]
 8003cf8:	bf08      	it	eq
 8003cfa:	6031      	streq	r1, [r6, #0]
 8003cfc:	5162      	str	r2, [r4, r5]
 8003cfe:	604b      	str	r3, [r1, #4]
 8003d00:	4638      	mov	r0, r7
 8003d02:	f104 060b 	add.w	r6, r4, #11
 8003d06:	f000 f865 	bl	8003dd4 <__malloc_unlock>
 8003d0a:	f026 0607 	bic.w	r6, r6, #7
 8003d0e:	1d23      	adds	r3, r4, #4
 8003d10:	1af2      	subs	r2, r6, r3
 8003d12:	d0b6      	beq.n	8003c82 <_malloc_r+0x22>
 8003d14:	1b9b      	subs	r3, r3, r6
 8003d16:	50a3      	str	r3, [r4, r2]
 8003d18:	e7b3      	b.n	8003c82 <_malloc_r+0x22>
 8003d1a:	6862      	ldr	r2, [r4, #4]
 8003d1c:	42a3      	cmp	r3, r4
 8003d1e:	bf0c      	ite	eq
 8003d20:	6032      	streq	r2, [r6, #0]
 8003d22:	605a      	strne	r2, [r3, #4]
 8003d24:	e7ec      	b.n	8003d00 <_malloc_r+0xa0>
 8003d26:	4623      	mov	r3, r4
 8003d28:	6864      	ldr	r4, [r4, #4]
 8003d2a:	e7b2      	b.n	8003c92 <_malloc_r+0x32>
 8003d2c:	4634      	mov	r4, r6
 8003d2e:	6876      	ldr	r6, [r6, #4]
 8003d30:	e7b9      	b.n	8003ca6 <_malloc_r+0x46>
 8003d32:	230c      	movs	r3, #12
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4638      	mov	r0, r7
 8003d38:	f000 f84c 	bl	8003dd4 <__malloc_unlock>
 8003d3c:	e7a1      	b.n	8003c82 <_malloc_r+0x22>
 8003d3e:	6025      	str	r5, [r4, #0]
 8003d40:	e7de      	b.n	8003d00 <_malloc_r+0xa0>
 8003d42:	bf00      	nop
 8003d44:	2000084c 	.word	0x2000084c

08003d48 <_realloc_r>:
 8003d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	4614      	mov	r4, r2
 8003d50:	460e      	mov	r6, r1
 8003d52:	b921      	cbnz	r1, 8003d5e <_realloc_r+0x16>
 8003d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d58:	4611      	mov	r1, r2
 8003d5a:	f7ff bf81 	b.w	8003c60 <_malloc_r>
 8003d5e:	b92a      	cbnz	r2, 8003d6c <_realloc_r+0x24>
 8003d60:	f7ff ff12 	bl	8003b88 <_free_r>
 8003d64:	4625      	mov	r5, r4
 8003d66:	4628      	mov	r0, r5
 8003d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d6c:	f000 f838 	bl	8003de0 <_malloc_usable_size_r>
 8003d70:	4284      	cmp	r4, r0
 8003d72:	4607      	mov	r7, r0
 8003d74:	d802      	bhi.n	8003d7c <_realloc_r+0x34>
 8003d76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d7a:	d812      	bhi.n	8003da2 <_realloc_r+0x5a>
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	4640      	mov	r0, r8
 8003d80:	f7ff ff6e 	bl	8003c60 <_malloc_r>
 8003d84:	4605      	mov	r5, r0
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d0ed      	beq.n	8003d66 <_realloc_r+0x1e>
 8003d8a:	42bc      	cmp	r4, r7
 8003d8c:	4622      	mov	r2, r4
 8003d8e:	4631      	mov	r1, r6
 8003d90:	bf28      	it	cs
 8003d92:	463a      	movcs	r2, r7
 8003d94:	f7ff fed0 	bl	8003b38 <memcpy>
 8003d98:	4631      	mov	r1, r6
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	f7ff fef4 	bl	8003b88 <_free_r>
 8003da0:	e7e1      	b.n	8003d66 <_realloc_r+0x1e>
 8003da2:	4635      	mov	r5, r6
 8003da4:	e7df      	b.n	8003d66 <_realloc_r+0x1e>
	...

08003da8 <_sbrk_r>:
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4d06      	ldr	r5, [pc, #24]	; (8003dc4 <_sbrk_r+0x1c>)
 8003dac:	2300      	movs	r3, #0
 8003dae:	4604      	mov	r4, r0
 8003db0:	4608      	mov	r0, r1
 8003db2:	602b      	str	r3, [r5, #0]
 8003db4:	f7fd f83c 	bl	8000e30 <_sbrk>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d102      	bne.n	8003dc2 <_sbrk_r+0x1a>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	b103      	cbz	r3, 8003dc2 <_sbrk_r+0x1a>
 8003dc0:	6023      	str	r3, [r4, #0]
 8003dc2:	bd38      	pop	{r3, r4, r5, pc}
 8003dc4:	20000854 	.word	0x20000854

08003dc8 <__malloc_lock>:
 8003dc8:	4801      	ldr	r0, [pc, #4]	; (8003dd0 <__malloc_lock+0x8>)
 8003dca:	f000 b811 	b.w	8003df0 <__retarget_lock_acquire_recursive>
 8003dce:	bf00      	nop
 8003dd0:	20000858 	.word	0x20000858

08003dd4 <__malloc_unlock>:
 8003dd4:	4801      	ldr	r0, [pc, #4]	; (8003ddc <__malloc_unlock+0x8>)
 8003dd6:	f000 b80c 	b.w	8003df2 <__retarget_lock_release_recursive>
 8003dda:	bf00      	nop
 8003ddc:	20000858 	.word	0x20000858

08003de0 <_malloc_usable_size_r>:
 8003de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003de4:	1f18      	subs	r0, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bfbc      	itt	lt
 8003dea:	580b      	ldrlt	r3, [r1, r0]
 8003dec:	18c0      	addlt	r0, r0, r3
 8003dee:	4770      	bx	lr

08003df0 <__retarget_lock_acquire_recursive>:
 8003df0:	4770      	bx	lr

08003df2 <__retarget_lock_release_recursive>:
 8003df2:	4770      	bx	lr

08003df4 <_init>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	bf00      	nop
 8003df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	469e      	mov	lr, r3
 8003dfe:	4770      	bx	lr

08003e00 <_fini>:
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e02:	bf00      	nop
 8003e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e06:	bc08      	pop	{r3}
 8003e08:	469e      	mov	lr, r3
 8003e0a:	4770      	bx	lr
