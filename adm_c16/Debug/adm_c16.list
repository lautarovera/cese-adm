
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed8  08003ed8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000007ec  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000085c  2000085c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000ccdf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000ee0d  00000000  00000000  0002cd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d78  00000000  00000000  0003bb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b88  00000000  00000000  0003d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dafa6  00000000  00000000  0003e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ab0  00000000  00000000  00119438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00024609  00000000  00000000  00119ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e4f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033cc  00000000  00000000  0013e544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003e54 	.word	0x08003e54

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08003e54 	.word	0x08003e54

080001f0 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001f0:	df00      	svc	0
        bx lr
 80001f2:	4770      	bx	lr

080001f4 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f4:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f6:	4770      	bx	lr

080001f8 <strlen>:
 80001f8:	4603      	mov	r3, r0
 80001fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fe:	2a00      	cmp	r2, #0
 8000200:	d1fb      	bne.n	80001fa <strlen+0x2>
 8000202:	1a18      	subs	r0, r3, r0
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <zeros>:


/* Functions definitions -----------------------------------------------------*/

void zeros(uint32_t *vector, uint32_t longitud)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
	for (;vector < (&vector[0u] + longitud); vector++) {
 80005be:	e005      	b.n	80005cc <zeros+0x18>
		*vector = 0u;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
	for (;vector < (&vector[0u] + longitud); vector++) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3304      	adds	r3, #4
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	dcf5      	bgt.n	80005c0 <zeros+0xc>
	}
}
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar)
{
 80005e2:	b480      	push	{r7}
 80005e4:	b087      	sub	sp, #28
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	60f8      	str	r0, [r7, #12]
 80005ea:	60b9      	str	r1, [r7, #8]
 80005ec:	607a      	str	r2, [r7, #4]
 80005ee:	603b      	str	r3, [r7, #0]
	uint32_t tmp = 0u;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]

	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 80005f4:	e00d      	b.n	8000612 <productoEscalar32+0x30>
		tmp = *vectorIn * escalar;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
		*vectorOut++ = tmp;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	1d1a      	adds	r2, r3, #4
 8000606:	60ba      	str	r2, [r7, #8]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	601a      	str	r2, [r3, #0]
	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	3304      	adds	r3, #4
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	2b00      	cmp	r3, #0
 8000618:	dced      	bgt.n	80005f6 <productoEscalar32+0x14>
	}
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	371c      	adds	r7, #28
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint16_t longitud, uint16_t escalar)
{
 8000628:	b480      	push	{r7}
 800062a:	b087      	sub	sp, #28
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	460b      	mov	r3, r1
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	4613      	mov	r3, r2
 800063c:	80bb      	strh	r3, [r7, #4]
	uint16_t tmp = 0u;
 800063e:	2300      	movs	r3, #0
 8000640:	82fb      	strh	r3, [r7, #22]

	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 8000642:	e00d      	b.n	8000660 <productoEscalar16+0x38>
		tmp = *vectorIn * escalar;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	88ba      	ldrh	r2, [r7, #4]
 800064a:	fb12 f303 	smulbb	r3, r2, r3
 800064e:	82fb      	strh	r3, [r7, #22]
		*vectorOut++ = tmp;
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c9a      	adds	r2, r3, #2
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	8afa      	ldrh	r2, [r7, #22]
 8000658:	801a      	strh	r2, [r3, #0]
	for (;vectorIn < (&vectorIn[0u] + longitud); vectorIn++) {
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3302      	adds	r3, #2
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	88fb      	ldrh	r3, [r7, #6]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2b00      	cmp	r3, #0
 8000666:	dced      	bgt.n	8000644 <productoEscalar16+0x1c>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b088      	sub	sp, #32
 800067a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800067c:	f3ef 8314 	mrs	r3, CONTROL
 8000680:	607b      	str	r3, [r7, #4]
  return(result);
 8000682:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 8000684:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	61fb      	str	r3, [r7, #28]
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	f383 8814 	msr	CONTROL, r3
}
 8000698:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800069a:	f3ef 8314 	mrs	r3, CONTROL
 800069e:	60fb      	str	r3, [r7, #12]
  return(result);
 80006a0:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80006a2:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	f023 0301 	bic.w	r3, r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	f383 8814 	msr	CONTROL, r3
}
 80006b6:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006b8:	f3ef 8314 	mrs	r3, CONTROL
 80006bc:	617b      	str	r3, [r7, #20]
  return(result);
 80006be:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80006c0:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80006c2:	f7ff fd95 	bl	80001f0 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006c6:	f3ef 8314 	mrs	r3, CONTROL
 80006ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80006cc:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80006ce:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f000 fc4b 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f857 	bl	8000794 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 80006e6:	4827      	ldr	r0, [pc, #156]	; (8000784 <main+0xac>)
 80006e8:	f7ff fd86 	bl	80001f8 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	230a      	movs	r3, #10
 80006f2:	4924      	ldr	r1, [pc, #144]	; (8000784 <main+0xac>)
 80006f4:	4824      	ldr	r0, [pc, #144]	; (8000788 <main+0xb0>)
 80006f6:	f002 f896 	bl	8002826 <HAL_UART_Transmit>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 f95b 	bl	80009b4 <MX_GPIO_Init>
  MX_ETH_Init();
 80006fe:	f000 f8b3 	bl	8000868 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000702:	f000 f8ff 	bl	8000904 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000706:	f000 f927 	bl	8000958 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 800070a:	f7ff ffb4 	bl	8000676 <PrivilegiosSVC>

  const uint32_t Resultado = asm_sum (5, 3);
 800070e:	2103      	movs	r1, #3
 8000710:	2005      	movs	r0, #5
 8000712:	f7ff fd6f 	bl	80001f4 <asm_sum>
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE END 2 */

  sprintf( buffer, "asm_sum(5,3) = %lu\r\n", (uint32_t)Resultado );
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	491c      	ldr	r1, [pc, #112]	; (800078c <main+0xb4>)
 800071c:	4819      	ldr	r0, [pc, #100]	; (8000784 <main+0xac>)
 800071e:	f002 ff2b 	bl	8003578 <siprintf>
  HAL_UART_Transmit( &huart3, (uint8_t *)buffer, (uint16_t) strlen((char *)buffer), 10u );
 8000722:	4818      	ldr	r0, [pc, #96]	; (8000784 <main+0xac>)
 8000724:	f7ff fd68 	bl	80001f8 <strlen>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	230a      	movs	r3, #10
 800072e:	4915      	ldr	r1, [pc, #84]	; (8000784 <main+0xac>)
 8000730:	4815      	ldr	r0, [pc, #84]	; (8000788 <main+0xb0>)
 8000732:	f002 f878 	bl	8002826 <HAL_UART_Transmit>

  zeros((uint32_t *)buffer, (uint32_t) strlen((char *)buffer));
 8000736:	4813      	ldr	r0, [pc, #76]	; (8000784 <main+0xac>)
 8000738:	f7ff fd5e 	bl	80001f8 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	4619      	mov	r1, r3
 8000740:	4810      	ldr	r0, [pc, #64]	; (8000784 <main+0xac>)
 8000742:	f7ff ff37 	bl	80005b4 <zeros>

  memset(buffer, 5u, 25u);
 8000746:	2219      	movs	r2, #25
 8000748:	2105      	movs	r1, #5
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <main+0xac>)
 800074c:	f002 ff0c 	bl	8003568 <memset>

  memset(buffer_out, 0u, 25u);
 8000750:	2219      	movs	r2, #25
 8000752:	2100      	movs	r1, #0
 8000754:	480e      	ldr	r0, [pc, #56]	; (8000790 <main+0xb8>)
 8000756:	f002 ff07 	bl	8003568 <memset>

  productoEscalar32((uint32_t *)buffer, (uint32_t *)buffer_out, strlen((char *)buffer), 5u);
 800075a:	480a      	ldr	r0, [pc, #40]	; (8000784 <main+0xac>)
 800075c:	f7ff fd4c 	bl	80001f8 <strlen>
 8000760:	4602      	mov	r2, r0
 8000762:	2305      	movs	r3, #5
 8000764:	490a      	ldr	r1, [pc, #40]	; (8000790 <main+0xb8>)
 8000766:	4807      	ldr	r0, [pc, #28]	; (8000784 <main+0xac>)
 8000768:	f7ff ff3b 	bl	80005e2 <productoEscalar32>

  productoEscalar16((uint16_t *)buffer, (uint16_t *)buffer_out, strlen((char *)buffer), 2u);
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <main+0xac>)
 800076e:	f7ff fd43 	bl	80001f8 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	2302      	movs	r3, #2
 8000778:	4905      	ldr	r1, [pc, #20]	; (8000790 <main+0xb8>)
 800077a:	4802      	ldr	r0, [pc, #8]	; (8000784 <main+0xac>)
 800077c:	f7ff ff54 	bl	8000628 <productoEscalar16>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000780:	e7fe      	b.n	8000780 <main+0xa8>
 8000782:	bf00      	nop
 8000784:	20000804 	.word	0x20000804
 8000788:	200002b4 	.word	0x200002b4
 800078c:	08003e6c 	.word	0x08003e6c
 8000790:	20000820 	.word	0x20000820

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	; 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0320 	add.w	r3, r7, #32
 800079e:	2230      	movs	r2, #48	; 0x30
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fee0 	bl	8003568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b8:	2300      	movs	r3, #0
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	4b28      	ldr	r3, [pc, #160]	; (8000860 <SystemClock_Config+0xcc>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	4a27      	ldr	r2, [pc, #156]	; (8000860 <SystemClock_Config+0xcc>)
 80007c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c6:	6413      	str	r3, [r2, #64]	; 0x40
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemClock_Config+0xcc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <SystemClock_Config+0xd0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xd0>)
 80007de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xd0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000804:	2304      	movs	r3, #4
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000808:	23a8      	movs	r3, #168	; 0xa8
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000810:	2307      	movs	r3, #7
 8000812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fb1f 	bl	8001e5c <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000824:	f000 f974 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000828:	230f      	movs	r3, #15
 800082a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082c:	2302      	movs	r3, #2
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000834:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000838:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800083a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2105      	movs	r1, #5
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fd80 	bl	800234c <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000852:	f000 f95d 	bl	8000b10 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_ETH_Init+0x84>)
 800086e:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <MX_ETH_Init+0x88>)
 8000870:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000872:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <MX_ETH_Init+0x8c>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_ETH_Init+0x8c>)
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_ETH_Init+0x8c>)
 8000880:	22e1      	movs	r2, #225	; 0xe1
 8000882:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_ETH_Init+0x8c>)
 8000886:	2200      	movs	r2, #0
 8000888:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ETH_Init+0x8c>)
 800088c:	2200      	movs	r2, #0
 800088e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_ETH_Init+0x8c>)
 8000892:	2200      	movs	r2, #0
 8000894:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <MX_ETH_Init+0x84>)
 8000898:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <MX_ETH_Init+0x8c>)
 800089a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_ETH_Init+0x84>)
 800089e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_ETH_Init+0x84>)
 80008a6:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <MX_ETH_Init+0x90>)
 80008a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_ETH_Init+0x84>)
 80008ac:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_ETH_Init+0x94>)
 80008ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_ETH_Init+0x84>)
 80008b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008b8:	480c      	ldr	r0, [pc, #48]	; (80008ec <MX_ETH_Init+0x84>)
 80008ba:	f000 fcd9 	bl	8001270 <HAL_ETH_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008c4:	f000 f924 	bl	8000b10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008c8:	2238      	movs	r2, #56	; 0x38
 80008ca:	2100      	movs	r1, #0
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <MX_ETH_Init+0x98>)
 80008ce:	f002 fe4b 	bl	8003568 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_ETH_Init+0x98>)
 80008d4:	2221      	movs	r2, #33	; 0x21
 80008d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_ETH_Init+0x98>)
 80008da:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80008de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_ETH_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000204 	.word	0x20000204
 80008f0:	40028000 	.word	0x40028000
 80008f4:	2000083c 	.word	0x2000083c
 80008f8:	20000164 	.word	0x20000164
 80008fc:	200000c4 	.word	0x200000c4
 8000900:	2000008c 	.word	0x2000008c

08000904 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <MX_USART3_UART_Init+0x50>)
 800090c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000914:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 800092a:	220c      	movs	r2, #12
 800092c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART3_UART_Init+0x4c>)
 800093c:	f001 ff26 	bl	800278c <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000946:	f000 f8e3 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200002b4 	.word	0x200002b4
 8000954:	40004800 	.word	0x40004800

08000958 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000962:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2204      	movs	r2, #4
 8000968:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	2202      	movs	r2, #2
 800096e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000978:	2202      	movs	r2, #2
 800097a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097e:	2201      	movs	r2, #1
 8000980:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000988:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000990:	2201      	movs	r2, #1
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	f001 f941 	bl	8001c22 <HAL_PCD_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009a6:	f000 f8b3 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200002f8 	.word	0x200002f8

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08c      	sub	sp, #48	; 0x30
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
 80009ce:	4b4c      	ldr	r3, [pc, #304]	; (8000b00 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a4b      	ldr	r2, [pc, #300]	; (8000b00 <MX_GPIO_Init+0x14c>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b49      	ldr	r3, [pc, #292]	; (8000b00 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0304 	and.w	r3, r3, #4
 80009e2:	61bb      	str	r3, [r7, #24]
 80009e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	4b45      	ldr	r3, [pc, #276]	; (8000b00 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a44      	ldr	r2, [pc, #272]	; (8000b00 <MX_GPIO_Init+0x14c>)
 80009f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b42      	ldr	r3, [pc, #264]	; (8000b00 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b3e      	ldr	r3, [pc, #248]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a3d      	ldr	r2, [pc, #244]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b3b      	ldr	r3, [pc, #236]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a36      	ldr	r2, [pc, #216]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	4b30      	ldr	r3, [pc, #192]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a2f      	ldr	r2, [pc, #188]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a44:	f043 0308 	orr.w	r3, r3, #8
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a28      	ldr	r2, [pc, #160]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_GPIO_Init+0x14c>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a78:	4822      	ldr	r0, [pc, #136]	; (8000b04 <MX_GPIO_Init+0x150>)
 8000a7a:	f001 f8b9 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2140      	movs	r1, #64	; 0x40
 8000a82:	4821      	ldr	r0, [pc, #132]	; (8000b08 <MX_GPIO_Init+0x154>)
 8000a84:	f001 f8b4 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481b      	ldr	r0, [pc, #108]	; (8000b0c <MX_GPIO_Init+0x158>)
 8000aa0:	f000 fefa 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000aa4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4811      	ldr	r0, [pc, #68]	; (8000b04 <MX_GPIO_Init+0x150>)
 8000abe:	f000 feeb 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_GPIO_Init+0x154>)
 8000ada:	f000 fedd 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_GPIO_Init+0x154>)
 8000af2:	f000 fed1 	bl	8001898 <HAL_GPIO_Init>

}
 8000af6:	bf00      	nop
 8000af8:	3730      	adds	r7, #48	; 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020400 	.word	0x40020400
 8000b08:	40021800 	.word	0x40021800
 8000b0c:	40020800 	.word	0x40020800

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <Error_Handler+0x8>
	...

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	6453      	str	r3, [r2, #68]	; 0x44
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a55      	ldr	r2, [pc, #340]	; (8000ce0 <HAL_ETH_MspInit+0x174>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	f040 80a4 	bne.w	8000cd8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a52      	ldr	r2, [pc, #328]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000b9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b50      	ldr	r3, [pc, #320]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ba8:	623b      	str	r3, [r7, #32]
 8000baa:	6a3b      	ldr	r3, [r7, #32]
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
 8000bb0:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a4b      	ldr	r2, [pc, #300]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bc4:	61fb      	str	r3, [r7, #28]
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	4a44      	ldr	r2, [pc, #272]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd8:	4b42      	ldr	r3, [pc, #264]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	4b3e      	ldr	r3, [pc, #248]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a3d      	ldr	r2, [pc, #244]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0304 	and.w	r3, r3, #4
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c10:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0301 	and.w	r3, r3, #1
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4b30      	ldr	r3, [pc, #192]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	4b29      	ldr	r3, [pc, #164]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	4a28      	ldr	r2, [pc, #160]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c46:	6313      	str	r3, [r2, #48]	; 0x30
 8000c48:	4b26      	ldr	r3, [pc, #152]	; (8000ce4 <HAL_ETH_MspInit+0x178>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c54:	2332      	movs	r3, #50	; 0x32
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	2303      	movs	r3, #3
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c64:	230b      	movs	r3, #11
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481e      	ldr	r0, [pc, #120]	; (8000ce8 <HAL_ETH_MspInit+0x17c>)
 8000c70:	f000 fe12 	bl	8001898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c74:	2386      	movs	r3, #134	; 0x86
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c84:	230b      	movs	r3, #11
 8000c86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4817      	ldr	r0, [pc, #92]	; (8000cec <HAL_ETH_MspInit+0x180>)
 8000c90:	f000 fe02 	bl	8001898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca6:	230b      	movs	r3, #11
 8000ca8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <HAL_ETH_MspInit+0x184>)
 8000cb2:	f000 fdf1 	bl	8001898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <HAL_ETH_MspInit+0x188>)
 8000cd4:	f000 fde0 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40028000 	.word	0x40028000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400
 8000cf4:	40021800 	.word	0x40021800

08000cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a19      	ldr	r2, [pc, #100]	; (8000d7c <HAL_UART_MspInit+0x84>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d12c      	bne.n	8000d74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a17      	ldr	r2, [pc, #92]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_UART_MspInit+0x88>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d64:	2307      	movs	r3, #7
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_UART_MspInit+0x8c>)
 8000d70:	f000 fd92 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40004800 	.word	0x40004800
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020c00 	.word	0x40020c00

08000d88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08a      	sub	sp, #40	; 0x28
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
 8000d9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000da8:	d13f      	bne.n	8000e2a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <HAL_PCD_MspInit+0xac>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a20      	ldr	r2, [pc, #128]	; (8000e34 <HAL_PCD_MspInit+0xac>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <HAL_PCD_MspInit+0xac>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dc6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000dd8:	230a      	movs	r3, #10
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4815      	ldr	r0, [pc, #84]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000de4:	f000 fd58 	bl	8001898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480e      	ldr	r0, [pc, #56]	; (8000e38 <HAL_PCD_MspInit+0xb0>)
 8000dfe:	f000 fd4b 	bl	8001898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_PCD_MspInit+0xac>)
 8000e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e06:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_PCD_MspInit+0xac>)
 8000e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_PCD_MspInit+0xac>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_PCD_MspInit+0xac>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_PCD_MspInit+0xac>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <NMI_Handler+0x4>

08000e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <MemManage_Handler+0x4>

08000e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <BusFault_Handler+0x4>

08000e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <UsageFault_Handler+0x4>

08000e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f8c8 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e98:	4a14      	ldr	r2, [pc, #80]	; (8000eec <_sbrk+0x5c>)
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <_sbrk+0x60>)
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <_sbrk+0x64>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <_sbrk+0x64>)
 8000eae:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <_sbrk+0x68>)
 8000eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d207      	bcs.n	8000ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec0:	f002 fb28 	bl	8003514 <__errno>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ece:	e009      	b.n	8000ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed0:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	4a05      	ldr	r2, [pc, #20]	; (8000ef4 <_sbrk+0x64>)
 8000ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20030000 	.word	0x20030000
 8000ef0:	00000400 	.word	0x00000400
 8000ef4:	20000844 	.word	0x20000844
 8000ef8:	20000860 	.word	0x20000860

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  nop
 8000f20:	bf00      	nop
  nop
 8000f22:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4e:	f7ff ffd5 	bl	8000efc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f002 fae5 	bl	8003520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fbbf 	bl	80006d8 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f68:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 8000f6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f70:	2000085c 	.word	0x2000085c

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f931 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fdb6 	bl	8000b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 f93b 	bl	8001256 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff8:	f000 f911 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	20000848 	.word	0x20000848

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000848 	.word	0x20000848

0800105c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001064:	f7ff ffee 	bl	8001044 <HAL_GetTick>
 8001068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001074:	d005      	beq.n	8001082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <HAL_Delay+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001082:	bf00      	nop
 8001084:	f7ff ffde 	bl	8001044 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	429a      	cmp	r2, r3
 8001092:	d8f7      	bhi.n	8001084 <HAL_Delay+0x28>
  {
  }
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000008 	.word	0x20000008

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff47 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff5c 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffb0 	bl	80011c4 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e06c      	b.n	800135c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001288:	2b00      	cmp	r3, #0
 800128a:	d106      	bne.n	800129a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2223      	movs	r2, #35	; 0x23
 8001290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff fc69 	bl	8000b6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	4b31      	ldr	r3, [pc, #196]	; (8001364 <HAL_ETH_Init+0xf4>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a30      	ldr	r2, [pc, #192]	; (8001364 <HAL_ETH_Init+0xf4>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <HAL_ETH_Init+0xf4>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <HAL_ETH_Init+0xf8>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <HAL_ETH_Init+0xf8>)
 80012bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_ETH_Init+0xf8>)
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	4927      	ldr	r1, [pc, #156]	; (8001368 <HAL_ETH_Init+0xf8>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <HAL_ETH_Init+0xf8>)
 80012d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012ec:	f7ff feaa 	bl	8001044 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012f2:	e011      	b.n	8001318 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012f4:	f7ff fea6 	bl	8001044 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001302:	d909      	bls.n	8001318 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2204      	movs	r2, #4
 8001308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	22e0      	movs	r2, #224	; 0xe0
 8001310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e021      	b.n	800135c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1e4      	bne.n	80012f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 f944 	bl	80015b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f9eb 	bl	800170c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 fa41 	bl	80017be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	461a      	mov	r2, r3
 8001342:	2100      	movs	r1, #0
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f9a9 	bl	800169c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2210      	movs	r2, #16
 8001356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800

0800136c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <ETH_SetMACConfig+0x134>)
 8001382:	4013      	ands	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	7c1b      	ldrb	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <ETH_SetMACConfig+0x28>
 800138e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001392:	e000      	b.n	8001396 <ETH_SetMACConfig+0x2a>
 8001394:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	7c5b      	ldrb	r3, [r3, #17]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <ETH_SetMACConfig+0x38>
 800139e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013a2:	e000      	b.n	80013a6 <ETH_SetMACConfig+0x3a>
 80013a4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	7fdb      	ldrb	r3, [r3, #31]
 80013b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	7f92      	ldrb	r2, [r2, #30]
 80013c0:	2a00      	cmp	r2, #0
 80013c2:	d102      	bne.n	80013ca <ETH_SetMACConfig+0x5e>
 80013c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013c8:	e000      	b.n	80013cc <ETH_SetMACConfig+0x60>
 80013ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80013cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	7f1b      	ldrb	r3, [r3, #28]
 80013d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	791b      	ldrb	r3, [r3, #4]
 80013e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	d102      	bne.n	80013f4 <ETH_SetMACConfig+0x88>
 80013ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f2:	e000      	b.n	80013f6 <ETH_SetMACConfig+0x8a>
 80013f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	7bdb      	ldrb	r3, [r3, #15]
 80013fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001404:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800140c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800140e:	4313      	orrs	r3, r2
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff fe18 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001442:	4013      	ands	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001452:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001458:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001460:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001468:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001470:	4313      	orrs	r3, r2
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001488:	2001      	movs	r0, #1
 800148a:	f7ff fde7 	bl	800105c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	ff20810f 	.word	0xff20810f

080014a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <ETH_SetDMAConfig+0x110>)
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	7b1b      	ldrb	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <ETH_SetDMAConfig+0x2c>
 80014ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014ce:	e000      	b.n	80014d2 <ETH_SetDMAConfig+0x2e>
 80014d0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	7b5b      	ldrb	r3, [r3, #13]
 80014d6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014d8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	7f52      	ldrb	r2, [r2, #29]
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d102      	bne.n	80014e8 <ETH_SetDMAConfig+0x44>
 80014e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014e6:	e000      	b.n	80014ea <ETH_SetDMAConfig+0x46>
 80014e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	7b9b      	ldrb	r3, [r3, #14]
 80014f0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014f2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	7f1b      	ldrb	r3, [r3, #28]
 80014fe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001500:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	7f9b      	ldrb	r3, [r3, #30]
 8001506:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001508:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800150e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001516:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001518:	4313      	orrs	r3, r2
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4313      	orrs	r3, r2
 800151e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	461a      	mov	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff fd8e 	bl	800105c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001548:	461a      	mov	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	791b      	ldrb	r3, [r3, #4]
 8001552:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001558:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800155e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001564:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800156c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800156e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001576:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800157c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001586:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800158a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001598:	2001      	movs	r0, #1
 800159a:	f7ff fd5f 	bl	800105c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6013      	str	r3, [r2, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	f8de3f23 	.word	0xf8de3f23

080015b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0a6      	sub	sp, #152	; 0x98
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015cc:	2300      	movs	r3, #0
 80015ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015f4:	2300      	movs	r3, #0
 80015f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015fe:	2300      	movs	r3, #0
 8001600:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800161a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001620:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001624:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800162c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001630:	4619      	mov	r1, r3
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff fe9a 	bl	800136c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001638:	2301      	movs	r3, #1
 800163a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800163c:	2301      	movs	r3, #1
 800163e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001640:	2301      	movs	r3, #1
 8001642:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001646:	2301      	movs	r3, #1
 8001648:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001664:	2301      	movs	r3, #1
 8001666:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800166e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001672:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001674:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001678:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4619      	mov	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff08 	bl	80014a4 <ETH_SetDMAConfig>
}
 8001694:	bf00      	nop
 8001696:	3798      	adds	r7, #152	; 0x98
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3305      	adds	r3, #5
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	3204      	adds	r2, #4
 80016b4:	7812      	ldrb	r2, [r2, #0]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <ETH_MACAddressConfig+0x68>)
 80016be:	4413      	add	r3, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3303      	adds	r3, #3
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	061a      	lsls	r2, r3, #24
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3302      	adds	r3, #2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	041b      	lsls	r3, r3, #16
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	4313      	orrs	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	7812      	ldrb	r2, [r2, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <ETH_MACAddressConfig+0x6c>)
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	6013      	str	r3, [r2, #0]
}
 80016f6:	bf00      	nop
 80016f8:	371c      	adds	r7, #28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40028040 	.word	0x40028040
 8001708:	40028044 	.word	0x40028044

0800170c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e03e      	b.n	8001798 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68d9      	ldr	r1, [r3, #12]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	3206      	adds	r2, #6
 800174c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d80c      	bhi.n	800177c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68d9      	ldr	r1, [r3, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	461a      	mov	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	e004      	b.n	8001786 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	3301      	adds	r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d9bd      	bls.n	800171a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b0:	611a      	str	r2, [r3, #16]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e046      	b.n	800185a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6919      	ldr	r1, [r3, #16]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001808:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001810:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800181e:	68b9      	ldr	r1, [r7, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	3212      	adds	r2, #18
 8001826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d80c      	bhi.n	800184a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6919      	ldr	r1, [r3, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	440b      	add	r3, r1
 8001842:	461a      	mov	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	e004      	b.n	8001854 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3301      	adds	r3, #1
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d9b5      	bls.n	80017cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188a:	60da      	str	r2, [r3, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	e177      	b.n	8001ba4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018b4:	2201      	movs	r2, #1
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	f040 8166 	bne.w	8001b9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d005      	beq.n	80018ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	2b03      	cmp	r3, #3
 8001956:	d017      	beq.n	8001988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	2203      	movs	r2, #3
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d123      	bne.n	80019dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	08da      	lsrs	r2, r3, #3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3208      	adds	r2, #8
 800199c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	220f      	movs	r2, #15
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	69b9      	ldr	r1, [r7, #24]
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0203 	and.w	r2, r3, #3
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80c0 	beq.w	8001b9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	4a65      	ldr	r2, [pc, #404]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_GPIO_Init+0x324>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3a:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	089b      	lsrs	r3, r3, #2
 8001a40:	3302      	adds	r3, #2
 8001a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	220f      	movs	r2, #15
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_GPIO_Init+0x32c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d037      	beq.n	8001ad6 <HAL_GPIO_Init+0x23e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a57      	ldr	r2, [pc, #348]	; (8001bc8 <HAL_GPIO_Init+0x330>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d031      	beq.n	8001ad2 <HAL_GPIO_Init+0x23a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <HAL_GPIO_Init+0x334>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d02b      	beq.n	8001ace <HAL_GPIO_Init+0x236>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a55      	ldr	r2, [pc, #340]	; (8001bd0 <HAL_GPIO_Init+0x338>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d025      	beq.n	8001aca <HAL_GPIO_Init+0x232>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_GPIO_Init+0x33c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d01f      	beq.n	8001ac6 <HAL_GPIO_Init+0x22e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_GPIO_Init+0x340>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d019      	beq.n	8001ac2 <HAL_GPIO_Init+0x22a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_GPIO_Init+0x344>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_GPIO_Init+0x226>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a51      	ldr	r2, [pc, #324]	; (8001be0 <HAL_GPIO_Init+0x348>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00d      	beq.n	8001aba <HAL_GPIO_Init+0x222>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <HAL_GPIO_Init+0x34c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d007      	beq.n	8001ab6 <HAL_GPIO_Init+0x21e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4f      	ldr	r2, [pc, #316]	; (8001be8 <HAL_GPIO_Init+0x350>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d101      	bne.n	8001ab2 <HAL_GPIO_Init+0x21a>
 8001aae:	2309      	movs	r3, #9
 8001ab0:	e012      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ab2:	230a      	movs	r3, #10
 8001ab4:	e010      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e00e      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001aba:	2307      	movs	r3, #7
 8001abc:	e00c      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001abe:	2306      	movs	r3, #6
 8001ac0:	e00a      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ac2:	2305      	movs	r3, #5
 8001ac4:	e008      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001aca:	2303      	movs	r3, #3
 8001acc:	e004      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e002      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_GPIO_Init+0x240>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	f002 0203 	and.w	r2, r2, #3
 8001ade:	0092      	lsls	r2, r2, #2
 8001ae0:	4093      	lsls	r3, r2
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae8:	4935      	ldr	r1, [pc, #212]	; (8001bc0 <HAL_GPIO_Init+0x328>)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b1a:	4a34      	ldr	r2, [pc, #208]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b44:	4a29      	ldr	r2, [pc, #164]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6e:	4a1f      	ldr	r2, [pc, #124]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_GPIO_Init+0x354>)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	f67f ae84 	bls.w	80018b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	3724      	adds	r7, #36	; 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40013800 	.word	0x40013800
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020400 	.word	0x40020400
 8001bcc:	40020800 	.word	0x40020800
 8001bd0:	40020c00 	.word	0x40020c00
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40021400 	.word	0x40021400
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40022000 	.word	0x40022000
 8001be8:	40022400 	.word	0x40022400
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c24:	b08f      	sub	sp, #60	; 0x3c
 8001c26:	af0a      	add	r7, sp, #40	; 0x28
 8001c28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e10f      	b.n	8001e54 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff f89a 	bl	8000d88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2203      	movs	r2, #3
 8001c58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f001 f9ad 	bl	8002fd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	687e      	ldr	r6, [r7, #4]
 8001c80:	466d      	mov	r5, sp
 8001c82:	f106 0410 	add.w	r4, r6, #16
 8001c86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c92:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c96:	1d33      	adds	r3, r6, #4
 8001c98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9a:	6838      	ldr	r0, [r7, #0]
 8001c9c:	f001 f938 	bl	8002f10 <USB_CoreInit>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0d0      	b.n	8001e54 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 f99b 	bl	8002ff4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	e04a      	b.n	8001d5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	4413      	add	r3, r2
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	333d      	adds	r3, #61	; 0x3d
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	333c      	adds	r3, #60	; 0x3c
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	b298      	uxth	r0, r3
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	3344      	adds	r3, #68	; 0x44
 8001d00:	4602      	mov	r2, r0
 8001d02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3340      	adds	r3, #64	; 0x40
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	3348      	adds	r3, #72	; 0x48
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	334c      	adds	r3, #76	; 0x4c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3354      	adds	r3, #84	; 0x54
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	3301      	adds	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d3af      	bcc.n	8001cc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e044      	b.n	8001df4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	6879      	ldr	r1, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	440b      	add	r3, r1
 8001d78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4413      	add	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	440b      	add	r3, r1
 8001da4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc2:	7bfa      	ldrb	r2, [r7, #15]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4413      	add	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	3301      	adds	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d3b5      	bcc.n	8001d6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	687e      	ldr	r6, [r7, #4]
 8001e06:	466d      	mov	r5, sp
 8001e08:	f106 0410 	add.w	r4, r6, #16
 8001e0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e18:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1c:	1d33      	adds	r3, r6, #4
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	6838      	ldr	r0, [r7, #0]
 8001e22:	f001 f933 	bl	800308c <USB_DevInit>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00d      	b.n	8001e54 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f001 fafe 	bl	800344e <USB_DevDisconnect>

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e267      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d075      	beq.n	8001f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7a:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b04      	cmp	r3, #4
 8001e84:	d00c      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e86:	4b85      	ldr	r3, [pc, #532]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d112      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e92:	4b82      	ldr	r3, [pc, #520]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e9e:	d10b      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea0:	4b7e      	ldr	r3, [pc, #504]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d05b      	beq.n	8001f64 <HAL_RCC_OscConfig+0x108>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d157      	bne.n	8001f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e242      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	d106      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x74>
 8001ec2:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a75      	ldr	r2, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e01d      	b.n	8001f0c <HAL_RCC_OscConfig+0xb0>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x98>
 8001eda:	4b70      	ldr	r3, [pc, #448]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6f      	ldr	r2, [pc, #444]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6c      	ldr	r2, [pc, #432]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e00b      	b.n	8001f0c <HAL_RCC_OscConfig+0xb0>
 8001ef4:	4b69      	ldr	r3, [pc, #420]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a68      	ldr	r2, [pc, #416]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a65      	ldr	r2, [pc, #404]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d013      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff f896 	bl	8001044 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff f892 	bl	8001044 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e207      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b5b      	ldr	r3, [pc, #364]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0xc0>
 8001f3a:	e014      	b.n	8001f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff f882 	bl	8001044 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff f87e 	bl	8001044 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1f3      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	4b51      	ldr	r3, [pc, #324]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0xe8>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d063      	beq.n	800203a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f72:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d11c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8a:	4b44      	ldr	r3, [pc, #272]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d116      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x152>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d001      	beq.n	8001fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1c7      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fae:	4b3b      	ldr	r3, [pc, #236]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	4937      	ldr	r1, [pc, #220]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc2:	e03a      	b.n	800203a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fcc:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_OscConfig+0x244>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f837 	bl	8001044 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff f833 	bl	8001044 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1a8      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4925      	ldr	r1, [pc, #148]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8002008:	4313      	orrs	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_OscConfig+0x244>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002014:	f7ff f816 	bl	8001044 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201c:	f7ff f812 	bl	8001044 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e187      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d036      	beq.n	80020b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d016      	beq.n	800207c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_RCC_OscConfig+0x248>)
 8002050:	2201      	movs	r2, #1
 8002052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002054:	f7fe fff6 	bl	8001044 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205c:	f7fe fff2 	bl	8001044 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e167      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_OscConfig+0x240>)
 8002070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0x200>
 800207a:	e01b      	b.n	80020b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_OscConfig+0x248>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002082:	f7fe ffdf 	bl	8001044 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	e00e      	b.n	80020a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208a:	f7fe ffdb 	bl	8001044 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d907      	bls.n	80020a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e150      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
 800209c:	40023800 	.word	0x40023800
 80020a0:	42470000 	.word	0x42470000
 80020a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	4b88      	ldr	r3, [pc, #544]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80020aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ea      	bne.n	800208a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8097 	beq.w	80021f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c6:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	4b7d      	ldr	r3, [pc, #500]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a7c      	ldr	r2, [pc, #496]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ee:	2301      	movs	r3, #1
 80020f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b77      	ldr	r3, [pc, #476]	; (80022d0 <HAL_RCC_OscConfig+0x474>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fe:	4b74      	ldr	r3, [pc, #464]	; (80022d0 <HAL_RCC_OscConfig+0x474>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a73      	ldr	r2, [pc, #460]	; (80022d0 <HAL_RCC_OscConfig+0x474>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe ff9b 	bl	8001044 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe ff97 	bl	8001044 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e10c      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <HAL_RCC_OscConfig+0x474>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x2ea>
 8002138:	4b64      	ldr	r3, [pc, #400]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4a63      	ldr	r2, [pc, #396]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
 8002144:	e01c      	b.n	8002180 <HAL_RCC_OscConfig+0x324>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b05      	cmp	r3, #5
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x30c>
 800214e:	4b5f      	ldr	r3, [pc, #380]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a5e      	ldr	r2, [pc, #376]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6713      	str	r3, [r2, #112]	; 0x70
 800215a:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a5b      	ldr	r2, [pc, #364]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0x324>
 8002168:	4b58      	ldr	r3, [pc, #352]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a57      	ldr	r2, [pc, #348]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	4b55      	ldr	r3, [pc, #340]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a54      	ldr	r2, [pc, #336]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d015      	beq.n	80021b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe ff5c 	bl	8001044 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe ff58 	bl	8001044 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e0cb      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0ee      	beq.n	8002190 <HAL_RCC_OscConfig+0x334>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7fe ff46 	bl	8001044 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe ff42 	bl	8001044 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0b5      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ee      	bne.n	80021bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a38      	ldr	r2, [pc, #224]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80021ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a1 	beq.w	800233c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b08      	cmp	r3, #8
 8002204:	d05c      	beq.n	80022c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d141      	bne.n	8002292 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe ff16 	bl	8001044 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221c:	f7fe ff12 	bl	8001044 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e087      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69da      	ldr	r2, [r3, #28]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	019b      	lsls	r3, r3, #6
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	3b01      	subs	r3, #1
 8002254:	041b      	lsls	r3, r3, #16
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	061b      	lsls	r3, r3, #24
 800225e:	491b      	ldr	r1, [pc, #108]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226a:	f7fe feeb 	bl	8001044 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe fee7 	bl	8001044 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e05c      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002284:	4b11      	ldr	r3, [pc, #68]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x416>
 8002290:	e054      	b.n	800233c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <HAL_RCC_OscConfig+0x478>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7fe fed4 	bl	8001044 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe fed0 	bl	8001044 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e045      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_OscConfig+0x470>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x444>
 80022be:	e03d      	b.n	800233c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e038      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x4ec>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d028      	beq.n	8002338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d121      	bne.n	8002338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d11a      	bne.n	8002338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800230e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002310:	4293      	cmp	r3, r2
 8002312:	d111      	bne.n	8002338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	3b01      	subs	r3, #1
 8002322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d107      	bne.n	8002338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0cc      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002360:	4b68      	ldr	r3, [pc, #416]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 030f 	and.w	r3, r3, #15
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d90c      	bls.n	8002388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236e:	4b65      	ldr	r3, [pc, #404]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0b8      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b59      	ldr	r3, [pc, #356]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a52      	ldr	r2, [pc, #328]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	494d      	ldr	r1, [pc, #308]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d044      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d119      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d003      	beq.n	800240a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	2b03      	cmp	r3, #3
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d109      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e06f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e067      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f023 0203 	bic.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4934      	ldr	r1, [pc, #208]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7fe fe02 	bl	8001044 <HAL_GetTick>
 8002440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002442:	e00a      	b.n	800245a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002444:	f7fe fdfe 	bl	8001044 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e04f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 020c 	and.w	r2, r3, #12
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1eb      	bne.n	8002444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d20c      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_RCC_ClockConfig+0x1b8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e032      	b.n	80024fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4916      	ldr	r1, [pc, #88]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	490e      	ldr	r1, [pc, #56]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024d2:	f000 f821 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	490a      	ldr	r1, [pc, #40]	; (800250c <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fd62 	bl	8000fbc <HAL_InitTick>

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023c00 	.word	0x40023c00
 8002508:	40023800 	.word	0x40023800
 800250c:	08003e84 	.word	0x08003e84
 8002510:	20000000 	.word	0x20000000
 8002514:	20000004 	.word	0x20000004

08002518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800251c:	b094      	sub	sp, #80	; 0x50
 800251e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	647b      	str	r3, [r7, #68]	; 0x44
 8002524:	2300      	movs	r3, #0
 8002526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002528:	2300      	movs	r3, #0
 800252a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002530:	4b79      	ldr	r3, [pc, #484]	; (8002718 <HAL_RCC_GetSysClockFreq+0x200>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f003 030c 	and.w	r3, r3, #12
 8002538:	2b08      	cmp	r3, #8
 800253a:	d00d      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x40>
 800253c:	2b08      	cmp	r3, #8
 800253e:	f200 80e1 	bhi.w	8002704 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x34>
 8002546:	2b04      	cmp	r3, #4
 8002548:	d003      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x3a>
 800254a:	e0db      	b.n	8002704 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800254c:	4b73      	ldr	r3, [pc, #460]	; (800271c <HAL_RCC_GetSysClockFreq+0x204>)
 800254e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002550:	e0db      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002552:	4b73      	ldr	r3, [pc, #460]	; (8002720 <HAL_RCC_GetSysClockFreq+0x208>)
 8002554:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002556:	e0d8      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002558:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_GetSysClockFreq+0x200>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002560:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002562:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <HAL_RCC_GetSysClockFreq+0x200>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d063      	beq.n	8002636 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800256e:	4b6a      	ldr	r3, [pc, #424]	; (8002718 <HAL_RCC_GetSysClockFreq+0x200>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	099b      	lsrs	r3, r3, #6
 8002574:	2200      	movs	r2, #0
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38
 8002578:	63fa      	str	r2, [r7, #60]	; 0x3c
 800257a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
 8002582:	2300      	movs	r3, #0
 8002584:	637b      	str	r3, [r7, #52]	; 0x34
 8002586:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800258a:	4622      	mov	r2, r4
 800258c:	462b      	mov	r3, r5
 800258e:	f04f 0000 	mov.w	r0, #0
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	0159      	lsls	r1, r3, #5
 8002598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800259c:	0150      	lsls	r0, r2, #5
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4621      	mov	r1, r4
 80025a4:	1a51      	subs	r1, r2, r1
 80025a6:	6139      	str	r1, [r7, #16]
 80025a8:	4629      	mov	r1, r5
 80025aa:	eb63 0301 	sbc.w	r3, r3, r1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025bc:	4659      	mov	r1, fp
 80025be:	018b      	lsls	r3, r1, #6
 80025c0:	4651      	mov	r1, sl
 80025c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025c6:	4651      	mov	r1, sl
 80025c8:	018a      	lsls	r2, r1, #6
 80025ca:	4651      	mov	r1, sl
 80025cc:	ebb2 0801 	subs.w	r8, r2, r1
 80025d0:	4659      	mov	r1, fp
 80025d2:	eb63 0901 	sbc.w	r9, r3, r1
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ea:	4690      	mov	r8, r2
 80025ec:	4699      	mov	r9, r3
 80025ee:	4623      	mov	r3, r4
 80025f0:	eb18 0303 	adds.w	r3, r8, r3
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	462b      	mov	r3, r5
 80025f8:	eb49 0303 	adc.w	r3, r9, r3
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800260a:	4629      	mov	r1, r5
 800260c:	024b      	lsls	r3, r1, #9
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002614:	4621      	mov	r1, r4
 8002616:	024a      	lsls	r2, r1, #9
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261e:	2200      	movs	r2, #0
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
 8002622:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002624:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002628:	f7fd fe42 	bl	80002b0 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4613      	mov	r3, r2
 8002632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002634:	e058      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002636:	4b38      	ldr	r3, [pc, #224]	; (8002718 <HAL_RCC_GetSysClockFreq+0x200>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	099b      	lsrs	r3, r3, #6
 800263c:	2200      	movs	r2, #0
 800263e:	4618      	mov	r0, r3
 8002640:	4611      	mov	r1, r2
 8002642:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002646:	623b      	str	r3, [r7, #32]
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
 800264c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002650:	4642      	mov	r2, r8
 8002652:	464b      	mov	r3, r9
 8002654:	f04f 0000 	mov.w	r0, #0
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	0159      	lsls	r1, r3, #5
 800265e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002662:	0150      	lsls	r0, r2, #5
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4641      	mov	r1, r8
 800266a:	ebb2 0a01 	subs.w	sl, r2, r1
 800266e:	4649      	mov	r1, r9
 8002670:	eb63 0b01 	sbc.w	fp, r3, r1
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002680:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002684:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002688:	ebb2 040a 	subs.w	r4, r2, sl
 800268c:	eb63 050b 	sbc.w	r5, r3, fp
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	00eb      	lsls	r3, r5, #3
 800269a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800269e:	00e2      	lsls	r2, r4, #3
 80026a0:	4614      	mov	r4, r2
 80026a2:	461d      	mov	r5, r3
 80026a4:	4643      	mov	r3, r8
 80026a6:	18e3      	adds	r3, r4, r3
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	464b      	mov	r3, r9
 80026ac:	eb45 0303 	adc.w	r3, r5, r3
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026be:	4629      	mov	r1, r5
 80026c0:	028b      	lsls	r3, r1, #10
 80026c2:	4621      	mov	r1, r4
 80026c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c8:	4621      	mov	r1, r4
 80026ca:	028a      	lsls	r2, r1, #10
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	2200      	movs	r2, #0
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	61fa      	str	r2, [r7, #28]
 80026d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026dc:	f7fd fde8 	bl	80002b0 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4613      	mov	r3, r2
 80026e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	f003 0303 	and.w	r3, r3, #3
 80026f2:	3301      	adds	r3, #1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002702:	e002      	b.n	800270a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetSysClockFreq+0x204>)
 8002706:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800270c:	4618      	mov	r0, r3
 800270e:	3750      	adds	r7, #80	; 0x50
 8002710:	46bd      	mov	sp, r7
 8002712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	00f42400 	.word	0x00f42400
 8002720:	007a1200 	.word	0x007a1200

08002724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_RCC_GetHCLKFreq+0x14>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	4618      	mov	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff0 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	0a9b      	lsrs	r3, r3, #10
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	08003e94 	.word	0x08003e94

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffdc 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0b5b      	lsrs	r3, r3, #13
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	08003e94 	.word	0x08003e94

0800278c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e03f      	b.n	800281e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe faa0 	bl	8000cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2224      	movs	r2, #36	; 0x24
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f929 	bl	8002a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b08a      	sub	sp, #40	; 0x28
 800282a:	af02      	add	r7, sp, #8
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4613      	mov	r3, r2
 8002834:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b20      	cmp	r3, #32
 8002844:	d17c      	bne.n	8002940 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_UART_Transmit+0x2c>
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e075      	b.n	8002942 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_UART_Transmit+0x3e>
 8002860:	2302      	movs	r3, #2
 8002862:	e06e      	b.n	8002942 <HAL_UART_Transmit+0x11c>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2221      	movs	r2, #33	; 0x21
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800287a:	f7fe fbe3 	bl	8001044 <HAL_GetTick>
 800287e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	88fa      	ldrh	r2, [r7, #6]
 800288a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002894:	d108      	bne.n	80028a8 <HAL_UART_Transmit+0x82>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e003      	b.n	80028b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80028b8:	e02a      	b.n	8002910 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2200      	movs	r2, #0
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f840 	bl	800294a <UART_WaitOnFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e036      	b.n	8002942 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10b      	bne.n	80028f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	3302      	adds	r3, #2
 80028ee:	61bb      	str	r3, [r7, #24]
 80028f0:	e007      	b.n	8002902 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	3301      	adds	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002906:	b29b      	uxth	r3, r3
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1cf      	bne.n	80028ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	2200      	movs	r2, #0
 8002922:	2140      	movs	r1, #64	; 0x40
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f810 	bl	800294a <UART_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e006      	b.n	8002942 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b090      	sub	sp, #64	; 0x40
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4613      	mov	r3, r2
 8002958:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800295a:	e050      	b.n	80029fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002962:	d04c      	beq.n	80029fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <UART_WaitOnFlagUntilTimeout+0x30>
 800296a:	f7fe fb6b 	bl	8001044 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002976:	429a      	cmp	r2, r3
 8002978:	d241      	bcs.n	80029fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	330c      	adds	r3, #12
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	e853 3f00 	ldrex	r3, [r3]
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800299a:	637a      	str	r2, [r7, #52]	; 0x34
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a2:	e841 2300 	strex	r3, r2, [r1]
 80029a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1e5      	bne.n	800297a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	3314      	adds	r3, #20
 80029b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	e853 3f00 	ldrex	r3, [r3]
 80029bc:	613b      	str	r3, [r7, #16]
   return(result);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	f023 0301 	bic.w	r3, r3, #1
 80029c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3314      	adds	r3, #20
 80029cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ce:	623a      	str	r2, [r7, #32]
 80029d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d2:	69f9      	ldr	r1, [r7, #28]
 80029d4:	6a3a      	ldr	r2, [r7, #32]
 80029d6:	e841 2300 	strex	r3, r2, [r1]
 80029da:	61bb      	str	r3, [r7, #24]
   return(result);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1e5      	bne.n	80029ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e00f      	b.n	8002a1e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d09f      	beq.n	800295c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3740      	adds	r7, #64	; 0x40
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a2c:	b0c0      	sub	sp, #256	; 0x100
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	68d9      	ldr	r1, [r3, #12]
 8002a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	ea40 0301 	orr.w	r3, r0, r1
 8002a50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	431a      	orrs	r2, r3
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002a80:	f021 010c 	bic.w	r1, r1, #12
 8002a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa2:	6999      	ldr	r1, [r3, #24]
 8002aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	ea40 0301 	orr.w	r3, r0, r1
 8002aae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b8f      	ldr	r3, [pc, #572]	; (8002cf4 <UART_SetConfig+0x2cc>)
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d005      	beq.n	8002ac8 <UART_SetConfig+0xa0>
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <UART_SetConfig+0x2d0>)
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d104      	bne.n	8002ad2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ac8:	f7ff fe4c 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8002acc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ad0:	e003      	b.n	8002ada <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ad2:	f7ff fe33 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 8002ad6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ae4:	f040 810c 	bne.w	8002d00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ae8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002af2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002af6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002afa:	4622      	mov	r2, r4
 8002afc:	462b      	mov	r3, r5
 8002afe:	1891      	adds	r1, r2, r2
 8002b00:	65b9      	str	r1, [r7, #88]	; 0x58
 8002b02:	415b      	adcs	r3, r3
 8002b04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	eb12 0801 	adds.w	r8, r2, r1
 8002b10:	4629      	mov	r1, r5
 8002b12:	eb43 0901 	adc.w	r9, r3, r1
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b2a:	4690      	mov	r8, r2
 8002b2c:	4699      	mov	r9, r3
 8002b2e:	4623      	mov	r3, r4
 8002b30:	eb18 0303 	adds.w	r3, r8, r3
 8002b34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b38:	462b      	mov	r3, r5
 8002b3a:	eb49 0303 	adc.w	r3, r9, r3
 8002b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b4e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002b52:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b56:	460b      	mov	r3, r1
 8002b58:	18db      	adds	r3, r3, r3
 8002b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	eb42 0303 	adc.w	r3, r2, r3
 8002b62:	657b      	str	r3, [r7, #84]	; 0x54
 8002b64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002b68:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002b6c:	f7fd fba0 	bl	80002b0 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002b76:	fba3 2302 	umull	r2, r3, r3, r2
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	011c      	lsls	r4, r3, #4
 8002b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b82:	2200      	movs	r2, #0
 8002b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b88:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002b8c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002b90:	4642      	mov	r2, r8
 8002b92:	464b      	mov	r3, r9
 8002b94:	1891      	adds	r1, r2, r2
 8002b96:	64b9      	str	r1, [r7, #72]	; 0x48
 8002b98:	415b      	adcs	r3, r3
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ba0:	4641      	mov	r1, r8
 8002ba2:	eb12 0a01 	adds.w	sl, r2, r1
 8002ba6:	4649      	mov	r1, r9
 8002ba8:	eb43 0b01 	adc.w	fp, r3, r1
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bb8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc0:	4692      	mov	sl, r2
 8002bc2:	469b      	mov	fp, r3
 8002bc4:	4643      	mov	r3, r8
 8002bc6:	eb1a 0303 	adds.w	r3, sl, r3
 8002bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bce:	464b      	mov	r3, r9
 8002bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8002bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002be4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002be8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002bec:	460b      	mov	r3, r1
 8002bee:	18db      	adds	r3, r3, r3
 8002bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	eb42 0303 	adc.w	r3, r2, r3
 8002bf8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bfa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bfe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002c02:	f7fd fb55 	bl	80002b0 <__aeabi_uldivmod>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002c0e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2264      	movs	r2, #100	; 0x64
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	1acb      	subs	r3, r1, r3
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002c22:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002c24:	fba3 2302 	umull	r2, r3, r3, r2
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c30:	441c      	add	r4, r3
 8002c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c36:	2200      	movs	r2, #0
 8002c38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c3c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002c44:	4642      	mov	r2, r8
 8002c46:	464b      	mov	r3, r9
 8002c48:	1891      	adds	r1, r2, r2
 8002c4a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c4c:	415b      	adcs	r3, r3
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c54:	4641      	mov	r1, r8
 8002c56:	1851      	adds	r1, r2, r1
 8002c58:	6339      	str	r1, [r7, #48]	; 0x30
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	414b      	adcs	r3, r1
 8002c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002c6c:	4659      	mov	r1, fp
 8002c6e:	00cb      	lsls	r3, r1, #3
 8002c70:	4651      	mov	r1, sl
 8002c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c76:	4651      	mov	r1, sl
 8002c78:	00ca      	lsls	r2, r1, #3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4642      	mov	r2, r8
 8002c82:	189b      	adds	r3, r3, r2
 8002c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c88:	464b      	mov	r3, r9
 8002c8a:	460a      	mov	r2, r1
 8002c8c:	eb42 0303 	adc.w	r3, r2, r3
 8002c90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ca0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ca8:	460b      	mov	r3, r1
 8002caa:	18db      	adds	r3, r3, r3
 8002cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cae:	4613      	mov	r3, r2
 8002cb0:	eb42 0303 	adc.w	r3, r2, r3
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002cbe:	f7fd faf7 	bl	80002b0 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002cc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	2164      	movs	r1, #100	; 0x64
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	3332      	adds	r3, #50	; 0x32
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <UART_SetConfig+0x2d4>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	f003 0207 	and.w	r2, r3, #7
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4422      	add	r2, r4
 8002cee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002cf0:	e105      	b.n	8002efe <UART_SetConfig+0x4d6>
 8002cf2:	bf00      	nop
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d04:	2200      	movs	r2, #0
 8002d06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002d0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002d12:	4642      	mov	r2, r8
 8002d14:	464b      	mov	r3, r9
 8002d16:	1891      	adds	r1, r2, r2
 8002d18:	6239      	str	r1, [r7, #32]
 8002d1a:	415b      	adcs	r3, r3
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d22:	4641      	mov	r1, r8
 8002d24:	1854      	adds	r4, r2, r1
 8002d26:	4649      	mov	r1, r9
 8002d28:	eb43 0501 	adc.w	r5, r3, r1
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	00eb      	lsls	r3, r5, #3
 8002d36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d3a:	00e2      	lsls	r2, r4, #3
 8002d3c:	4614      	mov	r4, r2
 8002d3e:	461d      	mov	r5, r3
 8002d40:	4643      	mov	r3, r8
 8002d42:	18e3      	adds	r3, r4, r3
 8002d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d48:	464b      	mov	r3, r9
 8002d4a:	eb45 0303 	adc.w	r3, r5, r3
 8002d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d6e:	4629      	mov	r1, r5
 8002d70:	008b      	lsls	r3, r1, #2
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d78:	4621      	mov	r1, r4
 8002d7a:	008a      	lsls	r2, r1, #2
 8002d7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002d80:	f7fd fa96 	bl	80002b0 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4b60      	ldr	r3, [pc, #384]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	011c      	lsls	r4, r3, #4
 8002d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d96:	2200      	movs	r2, #0
 8002d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002da0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002da4:	4642      	mov	r2, r8
 8002da6:	464b      	mov	r3, r9
 8002da8:	1891      	adds	r1, r2, r2
 8002daa:	61b9      	str	r1, [r7, #24]
 8002dac:	415b      	adcs	r3, r3
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002db4:	4641      	mov	r1, r8
 8002db6:	1851      	adds	r1, r2, r1
 8002db8:	6139      	str	r1, [r7, #16]
 8002dba:	4649      	mov	r1, r9
 8002dbc:	414b      	adcs	r3, r1
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dcc:	4659      	mov	r1, fp
 8002dce:	00cb      	lsls	r3, r1, #3
 8002dd0:	4651      	mov	r1, sl
 8002dd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dd6:	4651      	mov	r1, sl
 8002dd8:	00ca      	lsls	r2, r1, #3
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	4642      	mov	r2, r8
 8002de2:	189b      	adds	r3, r3, r2
 8002de4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002de8:	464b      	mov	r3, r9
 8002dea:	460a      	mov	r2, r1
 8002dec:	eb42 0303 	adc.w	r3, r2, r3
 8002df0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dfe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	008b      	lsls	r3, r1, #2
 8002e10:	4641      	mov	r1, r8
 8002e12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e16:	4641      	mov	r1, r8
 8002e18:	008a      	lsls	r2, r1, #2
 8002e1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002e1e:	f7fd fa47 	bl	80002b0 <__aeabi_uldivmod>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4b39      	ldr	r3, [pc, #228]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002e28:	fba3 1302 	umull	r1, r3, r3, r2
 8002e2c:	095b      	lsrs	r3, r3, #5
 8002e2e:	2164      	movs	r1, #100	; 0x64
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	3332      	adds	r3, #50	; 0x32
 8002e3a:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	095b      	lsrs	r3, r3, #5
 8002e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e46:	441c      	add	r4, r3
 8002e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e50:	677a      	str	r2, [r7, #116]	; 0x74
 8002e52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002e56:	4642      	mov	r2, r8
 8002e58:	464b      	mov	r3, r9
 8002e5a:	1891      	adds	r1, r2, r2
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	415b      	adcs	r3, r3
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e66:	4641      	mov	r1, r8
 8002e68:	1851      	adds	r1, r2, r1
 8002e6a:	6039      	str	r1, [r7, #0]
 8002e6c:	4649      	mov	r1, r9
 8002e6e:	414b      	adcs	r3, r1
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e7e:	4659      	mov	r1, fp
 8002e80:	00cb      	lsls	r3, r1, #3
 8002e82:	4651      	mov	r1, sl
 8002e84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e88:	4651      	mov	r1, sl
 8002e8a:	00ca      	lsls	r2, r1, #3
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4603      	mov	r3, r0
 8002e92:	4642      	mov	r2, r8
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e98:	464b      	mov	r3, r9
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	663b      	str	r3, [r7, #96]	; 0x60
 8002eac:	667a      	str	r2, [r7, #100]	; 0x64
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	f04f 0300 	mov.w	r3, #0
 8002eb6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002eba:	4649      	mov	r1, r9
 8002ebc:	008b      	lsls	r3, r1, #2
 8002ebe:	4641      	mov	r1, r8
 8002ec0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ec4:	4641      	mov	r1, r8
 8002ec6:	008a      	lsls	r2, r1, #2
 8002ec8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002ecc:	f7fd f9f0 	bl	80002b0 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002ed6:	fba3 1302 	umull	r1, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2164      	movs	r1, #100	; 0x64
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	3332      	adds	r3, #50	; 0x32
 8002ee8:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <UART_SetConfig+0x4e4>)
 8002eea:	fba2 2303 	umull	r2, r3, r2, r3
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	f003 020f 	and.w	r2, r3, #15
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4422      	add	r2, r4
 8002efc:	609a      	str	r2, [r3, #8]
}
 8002efe:	bf00      	nop
 8002f00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002f04:	46bd      	mov	sp, r7
 8002f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f0a:	bf00      	nop
 8002f0c:	51eb851f 	.word	0x51eb851f

08002f10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f10:	b084      	sub	sp, #16
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b084      	sub	sp, #16
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	f107 001c 	add.w	r0, r7, #28
 8002f1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d122      	bne.n	8002f6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 faa2 	bl	80034ac <USB_CoreReset>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e01a      	b.n	8002fa4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa96 	bl	80034ac <USB_CoreReset>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	639a      	str	r2, [r3, #56]	; 0x38
 8002f96:	e005      	b.n	8002fa4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d10b      	bne.n	8002fc2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f043 0206 	orr.w	r2, r3, #6
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f043 0220 	orr.w	r2, r3, #32
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fce:	b004      	add	sp, #16
 8002fd0:	4770      	bx	lr

08002fd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f023 0201 	bic.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d115      	bne.n	8003042 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003022:	2001      	movs	r0, #1
 8003024:	f7fe f81a 	bl	800105c <HAL_Delay>
      ms++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3301      	adds	r3, #1
 800302c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa2e 	bl	8003490 <USB_GetMode>
 8003034:	4603      	mov	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	d01e      	beq.n	8003078 <USB_SetCurrentMode+0x84>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2b31      	cmp	r3, #49	; 0x31
 800303e:	d9f0      	bls.n	8003022 <USB_SetCurrentMode+0x2e>
 8003040:	e01a      	b.n	8003078 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d115      	bne.n	8003074 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003054:	2001      	movs	r0, #1
 8003056:	f7fe f801 	bl	800105c <HAL_Delay>
      ms++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3301      	adds	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fa15 	bl	8003490 <USB_GetMode>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <USB_SetCurrentMode+0x84>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b31      	cmp	r3, #49	; 0x31
 8003070:	d9f0      	bls.n	8003054 <USB_SetCurrentMode+0x60>
 8003072:	e001      	b.n	8003078 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e005      	b.n	8003084 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b32      	cmp	r3, #50	; 0x32
 800307c:	d101      	bne.n	8003082 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800308c:	b084      	sub	sp, #16
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800309a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
 80030aa:	e009      	b.n	80030c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	3340      	adds	r3, #64	; 0x40
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	3301      	adds	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b0e      	cmp	r3, #14
 80030c4:	d9f2      	bls.n	80030ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80030c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d11c      	bne.n	8003106 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030da:	f043 0302 	orr.w	r3, r3, #2
 80030de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
 8003104:	e00b      	b.n	800311e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003124:	461a      	mov	r2, r3
 8003126:	2300      	movs	r3, #0
 8003128:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003130:	4619      	mov	r1, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003138:	461a      	mov	r2, r3
 800313a:	680b      	ldr	r3, [r1, #0]
 800313c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800313e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003140:	2b01      	cmp	r3, #1
 8003142:	d10c      	bne.n	800315e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003146:	2b00      	cmp	r3, #0
 8003148:	d104      	bne.n	8003154 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800314a:	2100      	movs	r1, #0
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f965 	bl	800341c <USB_SetDevSpeed>
 8003152:	e008      	b.n	8003166 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003154:	2101      	movs	r1, #1
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f960 	bl	800341c <USB_SetDevSpeed>
 800315c:	e003      	b.n	8003166 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800315e:	2103      	movs	r1, #3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f95b 	bl	800341c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003166:	2110      	movs	r1, #16
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f8f3 	bl	8003354 <USB_FlushTxFifo>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f91f 	bl	80033bc <USB_FlushRxFifo>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318e:	461a      	mov	r2, r3
 8003190:	2300      	movs	r3, #0
 8003192:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319a:	461a      	mov	r2, r3
 800319c:	2300      	movs	r3, #0
 800319e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	461a      	mov	r2, r3
 80031a8:	2300      	movs	r3, #0
 80031aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	e043      	b.n	800323a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031c8:	d118      	bne.n	80031fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031dc:	461a      	mov	r2, r3
 80031de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e013      	b.n	800320e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f2:	461a      	mov	r2, r3
 80031f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e008      	b.n	800320e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003208:	461a      	mov	r2, r3
 800320a:	2300      	movs	r3, #0
 800320c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321a:	461a      	mov	r2, r3
 800321c:	2300      	movs	r3, #0
 800321e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322c:	461a      	mov	r2, r3
 800322e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003232:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	3301      	adds	r3, #1
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	429a      	cmp	r2, r3
 8003240:	d3b7      	bcc.n	80031b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e043      	b.n	80032d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800325a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800325e:	d118      	bne.n	8003292 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10a      	bne.n	800327c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003272:	461a      	mov	r2, r3
 8003274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003278:	6013      	str	r3, [r2, #0]
 800327a:	e013      	b.n	80032a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e008      	b.n	80032a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329e:	461a      	mov	r2, r3
 80032a0:	2300      	movs	r3, #0
 80032a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b0:	461a      	mov	r2, r3
 80032b2:	2300      	movs	r3, #0
 80032b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c2:	461a      	mov	r2, r3
 80032c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	3301      	adds	r3, #1
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d3b7      	bcc.n	8003248 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f043 0210 	orr.w	r2, r3, #16
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <USB_DevInit+0x2c4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f043 0208 	orr.w	r2, r3, #8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800332a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003340:	7dfb      	ldrb	r3, [r7, #23]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800334c:	b004      	add	sp, #16
 800334e:	4770      	bx	lr
 8003350:	803c3800 	.word	0x803c3800

08003354 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3301      	adds	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a13      	ldr	r2, [pc, #76]	; (80033b8 <USB_FlushTxFifo+0x64>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e01b      	b.n	80033ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	daf2      	bge.n	8003362 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	019b      	lsls	r3, r3, #6
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3301      	adds	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <USB_FlushTxFifo+0x64>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e006      	b.n	80033ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	d0f0      	beq.n	800338c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	00030d40 	.word	0x00030d40

080033bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3301      	adds	r3, #1
 80033cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4a11      	ldr	r2, [pc, #68]	; (8003418 <USB_FlushRxFifo+0x5c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e018      	b.n	800340c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	daf2      	bge.n	80033c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2210      	movs	r2, #16
 80033ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	3301      	adds	r3, #1
 80033f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a08      	ldr	r2, [pc, #32]	; (8003418 <USB_FlushRxFifo+0x5c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d901      	bls.n	80033fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e006      	b.n	800340c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b10      	cmp	r3, #16
 8003408:	d0f0      	beq.n	80033ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3714      	adds	r7, #20
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	00030d40 	.word	0x00030d40

0800341c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3714      	adds	r7, #20
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003468:	f023 0303 	bic.w	r3, r3, #3
 800346c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800347c:	f043 0302 	orr.w	r3, r3, #2
 8003480:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0301 	and.w	r3, r3, #1
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	3301      	adds	r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a13      	ldr	r2, [pc, #76]	; (8003510 <USB_CoreReset+0x64>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d901      	bls.n	80034ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e01b      	b.n	8003502 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	daf2      	bge.n	80034b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	3301      	adds	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <USB_CoreReset+0x64>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d901      	bls.n	80034f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e006      	b.n	8003502 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d0f0      	beq.n	80034e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	00030d40 	.word	0x00030d40

08003514 <__errno>:
 8003514:	4b01      	ldr	r3, [pc, #4]	; (800351c <__errno+0x8>)
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	2000000c 	.word	0x2000000c

08003520 <__libc_init_array>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	4d0d      	ldr	r5, [pc, #52]	; (8003558 <__libc_init_array+0x38>)
 8003524:	4c0d      	ldr	r4, [pc, #52]	; (800355c <__libc_init_array+0x3c>)
 8003526:	1b64      	subs	r4, r4, r5
 8003528:	10a4      	asrs	r4, r4, #2
 800352a:	2600      	movs	r6, #0
 800352c:	42a6      	cmp	r6, r4
 800352e:	d109      	bne.n	8003544 <__libc_init_array+0x24>
 8003530:	4d0b      	ldr	r5, [pc, #44]	; (8003560 <__libc_init_array+0x40>)
 8003532:	4c0c      	ldr	r4, [pc, #48]	; (8003564 <__libc_init_array+0x44>)
 8003534:	f000 fc8e 	bl	8003e54 <_init>
 8003538:	1b64      	subs	r4, r4, r5
 800353a:	10a4      	asrs	r4, r4, #2
 800353c:	2600      	movs	r6, #0
 800353e:	42a6      	cmp	r6, r4
 8003540:	d105      	bne.n	800354e <__libc_init_array+0x2e>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	f855 3b04 	ldr.w	r3, [r5], #4
 8003548:	4798      	blx	r3
 800354a:	3601      	adds	r6, #1
 800354c:	e7ee      	b.n	800352c <__libc_init_array+0xc>
 800354e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003552:	4798      	blx	r3
 8003554:	3601      	adds	r6, #1
 8003556:	e7f2      	b.n	800353e <__libc_init_array+0x1e>
 8003558:	08003ed8 	.word	0x08003ed8
 800355c:	08003ed8 	.word	0x08003ed8
 8003560:	08003ed8 	.word	0x08003ed8
 8003564:	08003edc 	.word	0x08003edc

08003568 <memset>:
 8003568:	4402      	add	r2, r0
 800356a:	4603      	mov	r3, r0
 800356c:	4293      	cmp	r3, r2
 800356e:	d100      	bne.n	8003572 <memset+0xa>
 8003570:	4770      	bx	lr
 8003572:	f803 1b01 	strb.w	r1, [r3], #1
 8003576:	e7f9      	b.n	800356c <memset+0x4>

08003578 <siprintf>:
 8003578:	b40e      	push	{r1, r2, r3}
 800357a:	b500      	push	{lr}
 800357c:	b09c      	sub	sp, #112	; 0x70
 800357e:	ab1d      	add	r3, sp, #116	; 0x74
 8003580:	9002      	str	r0, [sp, #8]
 8003582:	9006      	str	r0, [sp, #24]
 8003584:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003588:	4809      	ldr	r0, [pc, #36]	; (80035b0 <siprintf+0x38>)
 800358a:	9107      	str	r1, [sp, #28]
 800358c:	9104      	str	r1, [sp, #16]
 800358e:	4909      	ldr	r1, [pc, #36]	; (80035b4 <siprintf+0x3c>)
 8003590:	f853 2b04 	ldr.w	r2, [r3], #4
 8003594:	9105      	str	r1, [sp, #20]
 8003596:	6800      	ldr	r0, [r0, #0]
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	a902      	add	r1, sp, #8
 800359c:	f000 f868 	bl	8003670 <_svfiprintf_r>
 80035a0:	9b02      	ldr	r3, [sp, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	b01c      	add	sp, #112	; 0x70
 80035a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035ac:	b003      	add	sp, #12
 80035ae:	4770      	bx	lr
 80035b0:	2000000c 	.word	0x2000000c
 80035b4:	ffff0208 	.word	0xffff0208

080035b8 <__ssputs_r>:
 80035b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035bc:	688e      	ldr	r6, [r1, #8]
 80035be:	429e      	cmp	r6, r3
 80035c0:	4682      	mov	sl, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	4690      	mov	r8, r2
 80035c6:	461f      	mov	r7, r3
 80035c8:	d838      	bhi.n	800363c <__ssputs_r+0x84>
 80035ca:	898a      	ldrh	r2, [r1, #12]
 80035cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035d0:	d032      	beq.n	8003638 <__ssputs_r+0x80>
 80035d2:	6825      	ldr	r5, [r4, #0]
 80035d4:	6909      	ldr	r1, [r1, #16]
 80035d6:	eba5 0901 	sub.w	r9, r5, r1
 80035da:	6965      	ldr	r5, [r4, #20]
 80035dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035e4:	3301      	adds	r3, #1
 80035e6:	444b      	add	r3, r9
 80035e8:	106d      	asrs	r5, r5, #1
 80035ea:	429d      	cmp	r5, r3
 80035ec:	bf38      	it	cc
 80035ee:	461d      	movcc	r5, r3
 80035f0:	0553      	lsls	r3, r2, #21
 80035f2:	d531      	bpl.n	8003658 <__ssputs_r+0xa0>
 80035f4:	4629      	mov	r1, r5
 80035f6:	f000 fb63 	bl	8003cc0 <_malloc_r>
 80035fa:	4606      	mov	r6, r0
 80035fc:	b950      	cbnz	r0, 8003614 <__ssputs_r+0x5c>
 80035fe:	230c      	movs	r3, #12
 8003600:	f8ca 3000 	str.w	r3, [sl]
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800360a:	81a3      	strh	r3, [r4, #12]
 800360c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003614:	6921      	ldr	r1, [r4, #16]
 8003616:	464a      	mov	r2, r9
 8003618:	f000 fabe 	bl	8003b98 <memcpy>
 800361c:	89a3      	ldrh	r3, [r4, #12]
 800361e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003622:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003626:	81a3      	strh	r3, [r4, #12]
 8003628:	6126      	str	r6, [r4, #16]
 800362a:	6165      	str	r5, [r4, #20]
 800362c:	444e      	add	r6, r9
 800362e:	eba5 0509 	sub.w	r5, r5, r9
 8003632:	6026      	str	r6, [r4, #0]
 8003634:	60a5      	str	r5, [r4, #8]
 8003636:	463e      	mov	r6, r7
 8003638:	42be      	cmp	r6, r7
 800363a:	d900      	bls.n	800363e <__ssputs_r+0x86>
 800363c:	463e      	mov	r6, r7
 800363e:	6820      	ldr	r0, [r4, #0]
 8003640:	4632      	mov	r2, r6
 8003642:	4641      	mov	r1, r8
 8003644:	f000 fab6 	bl	8003bb4 <memmove>
 8003648:	68a3      	ldr	r3, [r4, #8]
 800364a:	1b9b      	subs	r3, r3, r6
 800364c:	60a3      	str	r3, [r4, #8]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	4433      	add	r3, r6
 8003652:	6023      	str	r3, [r4, #0]
 8003654:	2000      	movs	r0, #0
 8003656:	e7db      	b.n	8003610 <__ssputs_r+0x58>
 8003658:	462a      	mov	r2, r5
 800365a:	f000 fba5 	bl	8003da8 <_realloc_r>
 800365e:	4606      	mov	r6, r0
 8003660:	2800      	cmp	r0, #0
 8003662:	d1e1      	bne.n	8003628 <__ssputs_r+0x70>
 8003664:	6921      	ldr	r1, [r4, #16]
 8003666:	4650      	mov	r0, sl
 8003668:	f000 fabe 	bl	8003be8 <_free_r>
 800366c:	e7c7      	b.n	80035fe <__ssputs_r+0x46>
	...

08003670 <_svfiprintf_r>:
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	4698      	mov	r8, r3
 8003676:	898b      	ldrh	r3, [r1, #12]
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	b09d      	sub	sp, #116	; 0x74
 800367c:	4607      	mov	r7, r0
 800367e:	460d      	mov	r5, r1
 8003680:	4614      	mov	r4, r2
 8003682:	d50e      	bpl.n	80036a2 <_svfiprintf_r+0x32>
 8003684:	690b      	ldr	r3, [r1, #16]
 8003686:	b963      	cbnz	r3, 80036a2 <_svfiprintf_r+0x32>
 8003688:	2140      	movs	r1, #64	; 0x40
 800368a:	f000 fb19 	bl	8003cc0 <_malloc_r>
 800368e:	6028      	str	r0, [r5, #0]
 8003690:	6128      	str	r0, [r5, #16]
 8003692:	b920      	cbnz	r0, 800369e <_svfiprintf_r+0x2e>
 8003694:	230c      	movs	r3, #12
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800369c:	e0d1      	b.n	8003842 <_svfiprintf_r+0x1d2>
 800369e:	2340      	movs	r3, #64	; 0x40
 80036a0:	616b      	str	r3, [r5, #20]
 80036a2:	2300      	movs	r3, #0
 80036a4:	9309      	str	r3, [sp, #36]	; 0x24
 80036a6:	2320      	movs	r3, #32
 80036a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80036b0:	2330      	movs	r3, #48	; 0x30
 80036b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800385c <_svfiprintf_r+0x1ec>
 80036b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036ba:	f04f 0901 	mov.w	r9, #1
 80036be:	4623      	mov	r3, r4
 80036c0:	469a      	mov	sl, r3
 80036c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036c6:	b10a      	cbz	r2, 80036cc <_svfiprintf_r+0x5c>
 80036c8:	2a25      	cmp	r2, #37	; 0x25
 80036ca:	d1f9      	bne.n	80036c0 <_svfiprintf_r+0x50>
 80036cc:	ebba 0b04 	subs.w	fp, sl, r4
 80036d0:	d00b      	beq.n	80036ea <_svfiprintf_r+0x7a>
 80036d2:	465b      	mov	r3, fp
 80036d4:	4622      	mov	r2, r4
 80036d6:	4629      	mov	r1, r5
 80036d8:	4638      	mov	r0, r7
 80036da:	f7ff ff6d 	bl	80035b8 <__ssputs_r>
 80036de:	3001      	adds	r0, #1
 80036e0:	f000 80aa 	beq.w	8003838 <_svfiprintf_r+0x1c8>
 80036e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036e6:	445a      	add	r2, fp
 80036e8:	9209      	str	r2, [sp, #36]	; 0x24
 80036ea:	f89a 3000 	ldrb.w	r3, [sl]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80a2 	beq.w	8003838 <_svfiprintf_r+0x1c8>
 80036f4:	2300      	movs	r3, #0
 80036f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036fe:	f10a 0a01 	add.w	sl, sl, #1
 8003702:	9304      	str	r3, [sp, #16]
 8003704:	9307      	str	r3, [sp, #28]
 8003706:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800370a:	931a      	str	r3, [sp, #104]	; 0x68
 800370c:	4654      	mov	r4, sl
 800370e:	2205      	movs	r2, #5
 8003710:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003714:	4851      	ldr	r0, [pc, #324]	; (800385c <_svfiprintf_r+0x1ec>)
 8003716:	f7fc fd7b 	bl	8000210 <memchr>
 800371a:	9a04      	ldr	r2, [sp, #16]
 800371c:	b9d8      	cbnz	r0, 8003756 <_svfiprintf_r+0xe6>
 800371e:	06d0      	lsls	r0, r2, #27
 8003720:	bf44      	itt	mi
 8003722:	2320      	movmi	r3, #32
 8003724:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003728:	0711      	lsls	r1, r2, #28
 800372a:	bf44      	itt	mi
 800372c:	232b      	movmi	r3, #43	; 0x2b
 800372e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003732:	f89a 3000 	ldrb.w	r3, [sl]
 8003736:	2b2a      	cmp	r3, #42	; 0x2a
 8003738:	d015      	beq.n	8003766 <_svfiprintf_r+0xf6>
 800373a:	9a07      	ldr	r2, [sp, #28]
 800373c:	4654      	mov	r4, sl
 800373e:	2000      	movs	r0, #0
 8003740:	f04f 0c0a 	mov.w	ip, #10
 8003744:	4621      	mov	r1, r4
 8003746:	f811 3b01 	ldrb.w	r3, [r1], #1
 800374a:	3b30      	subs	r3, #48	; 0x30
 800374c:	2b09      	cmp	r3, #9
 800374e:	d94e      	bls.n	80037ee <_svfiprintf_r+0x17e>
 8003750:	b1b0      	cbz	r0, 8003780 <_svfiprintf_r+0x110>
 8003752:	9207      	str	r2, [sp, #28]
 8003754:	e014      	b.n	8003780 <_svfiprintf_r+0x110>
 8003756:	eba0 0308 	sub.w	r3, r0, r8
 800375a:	fa09 f303 	lsl.w	r3, r9, r3
 800375e:	4313      	orrs	r3, r2
 8003760:	9304      	str	r3, [sp, #16]
 8003762:	46a2      	mov	sl, r4
 8003764:	e7d2      	b.n	800370c <_svfiprintf_r+0x9c>
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	1d19      	adds	r1, r3, #4
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	9103      	str	r1, [sp, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	bfbb      	ittet	lt
 8003772:	425b      	neglt	r3, r3
 8003774:	f042 0202 	orrlt.w	r2, r2, #2
 8003778:	9307      	strge	r3, [sp, #28]
 800377a:	9307      	strlt	r3, [sp, #28]
 800377c:	bfb8      	it	lt
 800377e:	9204      	strlt	r2, [sp, #16]
 8003780:	7823      	ldrb	r3, [r4, #0]
 8003782:	2b2e      	cmp	r3, #46	; 0x2e
 8003784:	d10c      	bne.n	80037a0 <_svfiprintf_r+0x130>
 8003786:	7863      	ldrb	r3, [r4, #1]
 8003788:	2b2a      	cmp	r3, #42	; 0x2a
 800378a:	d135      	bne.n	80037f8 <_svfiprintf_r+0x188>
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	1d1a      	adds	r2, r3, #4
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	9203      	str	r2, [sp, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	bfb8      	it	lt
 8003798:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800379c:	3402      	adds	r4, #2
 800379e:	9305      	str	r3, [sp, #20]
 80037a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800386c <_svfiprintf_r+0x1fc>
 80037a4:	7821      	ldrb	r1, [r4, #0]
 80037a6:	2203      	movs	r2, #3
 80037a8:	4650      	mov	r0, sl
 80037aa:	f7fc fd31 	bl	8000210 <memchr>
 80037ae:	b140      	cbz	r0, 80037c2 <_svfiprintf_r+0x152>
 80037b0:	2340      	movs	r3, #64	; 0x40
 80037b2:	eba0 000a 	sub.w	r0, r0, sl
 80037b6:	fa03 f000 	lsl.w	r0, r3, r0
 80037ba:	9b04      	ldr	r3, [sp, #16]
 80037bc:	4303      	orrs	r3, r0
 80037be:	3401      	adds	r4, #1
 80037c0:	9304      	str	r3, [sp, #16]
 80037c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c6:	4826      	ldr	r0, [pc, #152]	; (8003860 <_svfiprintf_r+0x1f0>)
 80037c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037cc:	2206      	movs	r2, #6
 80037ce:	f7fc fd1f 	bl	8000210 <memchr>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d038      	beq.n	8003848 <_svfiprintf_r+0x1d8>
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <_svfiprintf_r+0x1f4>)
 80037d8:	bb1b      	cbnz	r3, 8003822 <_svfiprintf_r+0x1b2>
 80037da:	9b03      	ldr	r3, [sp, #12]
 80037dc:	3307      	adds	r3, #7
 80037de:	f023 0307 	bic.w	r3, r3, #7
 80037e2:	3308      	adds	r3, #8
 80037e4:	9303      	str	r3, [sp, #12]
 80037e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037e8:	4433      	add	r3, r6
 80037ea:	9309      	str	r3, [sp, #36]	; 0x24
 80037ec:	e767      	b.n	80036be <_svfiprintf_r+0x4e>
 80037ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80037f2:	460c      	mov	r4, r1
 80037f4:	2001      	movs	r0, #1
 80037f6:	e7a5      	b.n	8003744 <_svfiprintf_r+0xd4>
 80037f8:	2300      	movs	r3, #0
 80037fa:	3401      	adds	r4, #1
 80037fc:	9305      	str	r3, [sp, #20]
 80037fe:	4619      	mov	r1, r3
 8003800:	f04f 0c0a 	mov.w	ip, #10
 8003804:	4620      	mov	r0, r4
 8003806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800380a:	3a30      	subs	r2, #48	; 0x30
 800380c:	2a09      	cmp	r2, #9
 800380e:	d903      	bls.n	8003818 <_svfiprintf_r+0x1a8>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0c5      	beq.n	80037a0 <_svfiprintf_r+0x130>
 8003814:	9105      	str	r1, [sp, #20]
 8003816:	e7c3      	b.n	80037a0 <_svfiprintf_r+0x130>
 8003818:	fb0c 2101 	mla	r1, ip, r1, r2
 800381c:	4604      	mov	r4, r0
 800381e:	2301      	movs	r3, #1
 8003820:	e7f0      	b.n	8003804 <_svfiprintf_r+0x194>
 8003822:	ab03      	add	r3, sp, #12
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	462a      	mov	r2, r5
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <_svfiprintf_r+0x1f8>)
 800382a:	a904      	add	r1, sp, #16
 800382c:	4638      	mov	r0, r7
 800382e:	f3af 8000 	nop.w
 8003832:	1c42      	adds	r2, r0, #1
 8003834:	4606      	mov	r6, r0
 8003836:	d1d6      	bne.n	80037e6 <_svfiprintf_r+0x176>
 8003838:	89ab      	ldrh	r3, [r5, #12]
 800383a:	065b      	lsls	r3, r3, #25
 800383c:	f53f af2c 	bmi.w	8003698 <_svfiprintf_r+0x28>
 8003840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003842:	b01d      	add	sp, #116	; 0x74
 8003844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003848:	ab03      	add	r3, sp, #12
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	462a      	mov	r2, r5
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <_svfiprintf_r+0x1f8>)
 8003850:	a904      	add	r1, sp, #16
 8003852:	4638      	mov	r0, r7
 8003854:	f000 f87a 	bl	800394c <_printf_i>
 8003858:	e7eb      	b.n	8003832 <_svfiprintf_r+0x1c2>
 800385a:	bf00      	nop
 800385c:	08003e9c 	.word	0x08003e9c
 8003860:	08003ea6 	.word	0x08003ea6
 8003864:	00000000 	.word	0x00000000
 8003868:	080035b9 	.word	0x080035b9
 800386c:	08003ea2 	.word	0x08003ea2

08003870 <_printf_common>:
 8003870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003874:	4616      	mov	r6, r2
 8003876:	4699      	mov	r9, r3
 8003878:	688a      	ldr	r2, [r1, #8]
 800387a:	690b      	ldr	r3, [r1, #16]
 800387c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003880:	4293      	cmp	r3, r2
 8003882:	bfb8      	it	lt
 8003884:	4613      	movlt	r3, r2
 8003886:	6033      	str	r3, [r6, #0]
 8003888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800388c:	4607      	mov	r7, r0
 800388e:	460c      	mov	r4, r1
 8003890:	b10a      	cbz	r2, 8003896 <_printf_common+0x26>
 8003892:	3301      	adds	r3, #1
 8003894:	6033      	str	r3, [r6, #0]
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	0699      	lsls	r1, r3, #26
 800389a:	bf42      	ittt	mi
 800389c:	6833      	ldrmi	r3, [r6, #0]
 800389e:	3302      	addmi	r3, #2
 80038a0:	6033      	strmi	r3, [r6, #0]
 80038a2:	6825      	ldr	r5, [r4, #0]
 80038a4:	f015 0506 	ands.w	r5, r5, #6
 80038a8:	d106      	bne.n	80038b8 <_printf_common+0x48>
 80038aa:	f104 0a19 	add.w	sl, r4, #25
 80038ae:	68e3      	ldr	r3, [r4, #12]
 80038b0:	6832      	ldr	r2, [r6, #0]
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	42ab      	cmp	r3, r5
 80038b6:	dc26      	bgt.n	8003906 <_printf_common+0x96>
 80038b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038bc:	1e13      	subs	r3, r2, #0
 80038be:	6822      	ldr	r2, [r4, #0]
 80038c0:	bf18      	it	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	0692      	lsls	r2, r2, #26
 80038c6:	d42b      	bmi.n	8003920 <_printf_common+0xb0>
 80038c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038cc:	4649      	mov	r1, r9
 80038ce:	4638      	mov	r0, r7
 80038d0:	47c0      	blx	r8
 80038d2:	3001      	adds	r0, #1
 80038d4:	d01e      	beq.n	8003914 <_printf_common+0xa4>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	68e5      	ldr	r5, [r4, #12]
 80038da:	6832      	ldr	r2, [r6, #0]
 80038dc:	f003 0306 	and.w	r3, r3, #6
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	bf08      	it	eq
 80038e4:	1aad      	subeq	r5, r5, r2
 80038e6:	68a3      	ldr	r3, [r4, #8]
 80038e8:	6922      	ldr	r2, [r4, #16]
 80038ea:	bf0c      	ite	eq
 80038ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038f0:	2500      	movne	r5, #0
 80038f2:	4293      	cmp	r3, r2
 80038f4:	bfc4      	itt	gt
 80038f6:	1a9b      	subgt	r3, r3, r2
 80038f8:	18ed      	addgt	r5, r5, r3
 80038fa:	2600      	movs	r6, #0
 80038fc:	341a      	adds	r4, #26
 80038fe:	42b5      	cmp	r5, r6
 8003900:	d11a      	bne.n	8003938 <_printf_common+0xc8>
 8003902:	2000      	movs	r0, #0
 8003904:	e008      	b.n	8003918 <_printf_common+0xa8>
 8003906:	2301      	movs	r3, #1
 8003908:	4652      	mov	r2, sl
 800390a:	4649      	mov	r1, r9
 800390c:	4638      	mov	r0, r7
 800390e:	47c0      	blx	r8
 8003910:	3001      	adds	r0, #1
 8003912:	d103      	bne.n	800391c <_printf_common+0xac>
 8003914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800391c:	3501      	adds	r5, #1
 800391e:	e7c6      	b.n	80038ae <_printf_common+0x3e>
 8003920:	18e1      	adds	r1, r4, r3
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	2030      	movs	r0, #48	; 0x30
 8003926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800392a:	4422      	add	r2, r4
 800392c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003934:	3302      	adds	r3, #2
 8003936:	e7c7      	b.n	80038c8 <_printf_common+0x58>
 8003938:	2301      	movs	r3, #1
 800393a:	4622      	mov	r2, r4
 800393c:	4649      	mov	r1, r9
 800393e:	4638      	mov	r0, r7
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d0e6      	beq.n	8003914 <_printf_common+0xa4>
 8003946:	3601      	adds	r6, #1
 8003948:	e7d9      	b.n	80038fe <_printf_common+0x8e>
	...

0800394c <_printf_i>:
 800394c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003950:	7e0f      	ldrb	r7, [r1, #24]
 8003952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003954:	2f78      	cmp	r7, #120	; 0x78
 8003956:	4691      	mov	r9, r2
 8003958:	4680      	mov	r8, r0
 800395a:	460c      	mov	r4, r1
 800395c:	469a      	mov	sl, r3
 800395e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003962:	d807      	bhi.n	8003974 <_printf_i+0x28>
 8003964:	2f62      	cmp	r7, #98	; 0x62
 8003966:	d80a      	bhi.n	800397e <_printf_i+0x32>
 8003968:	2f00      	cmp	r7, #0
 800396a:	f000 80d8 	beq.w	8003b1e <_printf_i+0x1d2>
 800396e:	2f58      	cmp	r7, #88	; 0x58
 8003970:	f000 80a3 	beq.w	8003aba <_printf_i+0x16e>
 8003974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800397c:	e03a      	b.n	80039f4 <_printf_i+0xa8>
 800397e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003982:	2b15      	cmp	r3, #21
 8003984:	d8f6      	bhi.n	8003974 <_printf_i+0x28>
 8003986:	a101      	add	r1, pc, #4	; (adr r1, 800398c <_printf_i+0x40>)
 8003988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800398c:	080039e5 	.word	0x080039e5
 8003990:	080039f9 	.word	0x080039f9
 8003994:	08003975 	.word	0x08003975
 8003998:	08003975 	.word	0x08003975
 800399c:	08003975 	.word	0x08003975
 80039a0:	08003975 	.word	0x08003975
 80039a4:	080039f9 	.word	0x080039f9
 80039a8:	08003975 	.word	0x08003975
 80039ac:	08003975 	.word	0x08003975
 80039b0:	08003975 	.word	0x08003975
 80039b4:	08003975 	.word	0x08003975
 80039b8:	08003b05 	.word	0x08003b05
 80039bc:	08003a29 	.word	0x08003a29
 80039c0:	08003ae7 	.word	0x08003ae7
 80039c4:	08003975 	.word	0x08003975
 80039c8:	08003975 	.word	0x08003975
 80039cc:	08003b27 	.word	0x08003b27
 80039d0:	08003975 	.word	0x08003975
 80039d4:	08003a29 	.word	0x08003a29
 80039d8:	08003975 	.word	0x08003975
 80039dc:	08003975 	.word	0x08003975
 80039e0:	08003aef 	.word	0x08003aef
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	1d1a      	adds	r2, r3, #4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	602a      	str	r2, [r5, #0]
 80039ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0a3      	b.n	8003b40 <_printf_i+0x1f4>
 80039f8:	6820      	ldr	r0, [r4, #0]
 80039fa:	6829      	ldr	r1, [r5, #0]
 80039fc:	0606      	lsls	r6, r0, #24
 80039fe:	f101 0304 	add.w	r3, r1, #4
 8003a02:	d50a      	bpl.n	8003a1a <_printf_i+0xce>
 8003a04:	680e      	ldr	r6, [r1, #0]
 8003a06:	602b      	str	r3, [r5, #0]
 8003a08:	2e00      	cmp	r6, #0
 8003a0a:	da03      	bge.n	8003a14 <_printf_i+0xc8>
 8003a0c:	232d      	movs	r3, #45	; 0x2d
 8003a0e:	4276      	negs	r6, r6
 8003a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a14:	485e      	ldr	r0, [pc, #376]	; (8003b90 <_printf_i+0x244>)
 8003a16:	230a      	movs	r3, #10
 8003a18:	e019      	b.n	8003a4e <_printf_i+0x102>
 8003a1a:	680e      	ldr	r6, [r1, #0]
 8003a1c:	602b      	str	r3, [r5, #0]
 8003a1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a22:	bf18      	it	ne
 8003a24:	b236      	sxthne	r6, r6
 8003a26:	e7ef      	b.n	8003a08 <_printf_i+0xbc>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	1d19      	adds	r1, r3, #4
 8003a2e:	6029      	str	r1, [r5, #0]
 8003a30:	0601      	lsls	r1, r0, #24
 8003a32:	d501      	bpl.n	8003a38 <_printf_i+0xec>
 8003a34:	681e      	ldr	r6, [r3, #0]
 8003a36:	e002      	b.n	8003a3e <_printf_i+0xf2>
 8003a38:	0646      	lsls	r6, r0, #25
 8003a3a:	d5fb      	bpl.n	8003a34 <_printf_i+0xe8>
 8003a3c:	881e      	ldrh	r6, [r3, #0]
 8003a3e:	4854      	ldr	r0, [pc, #336]	; (8003b90 <_printf_i+0x244>)
 8003a40:	2f6f      	cmp	r7, #111	; 0x6f
 8003a42:	bf0c      	ite	eq
 8003a44:	2308      	moveq	r3, #8
 8003a46:	230a      	movne	r3, #10
 8003a48:	2100      	movs	r1, #0
 8003a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a4e:	6865      	ldr	r5, [r4, #4]
 8003a50:	60a5      	str	r5, [r4, #8]
 8003a52:	2d00      	cmp	r5, #0
 8003a54:	bfa2      	ittt	ge
 8003a56:	6821      	ldrge	r1, [r4, #0]
 8003a58:	f021 0104 	bicge.w	r1, r1, #4
 8003a5c:	6021      	strge	r1, [r4, #0]
 8003a5e:	b90e      	cbnz	r6, 8003a64 <_printf_i+0x118>
 8003a60:	2d00      	cmp	r5, #0
 8003a62:	d04d      	beq.n	8003b00 <_printf_i+0x1b4>
 8003a64:	4615      	mov	r5, r2
 8003a66:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a6a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a6e:	5dc7      	ldrb	r7, [r0, r7]
 8003a70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a74:	4637      	mov	r7, r6
 8003a76:	42bb      	cmp	r3, r7
 8003a78:	460e      	mov	r6, r1
 8003a7a:	d9f4      	bls.n	8003a66 <_printf_i+0x11a>
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d10b      	bne.n	8003a98 <_printf_i+0x14c>
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	07de      	lsls	r6, r3, #31
 8003a84:	d508      	bpl.n	8003a98 <_printf_i+0x14c>
 8003a86:	6923      	ldr	r3, [r4, #16]
 8003a88:	6861      	ldr	r1, [r4, #4]
 8003a8a:	4299      	cmp	r1, r3
 8003a8c:	bfde      	ittt	le
 8003a8e:	2330      	movle	r3, #48	; 0x30
 8003a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a98:	1b52      	subs	r2, r2, r5
 8003a9a:	6122      	str	r2, [r4, #16]
 8003a9c:	f8cd a000 	str.w	sl, [sp]
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	aa03      	add	r2, sp, #12
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4640      	mov	r0, r8
 8003aa8:	f7ff fee2 	bl	8003870 <_printf_common>
 8003aac:	3001      	adds	r0, #1
 8003aae:	d14c      	bne.n	8003b4a <_printf_i+0x1fe>
 8003ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ab4:	b004      	add	sp, #16
 8003ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aba:	4835      	ldr	r0, [pc, #212]	; (8003b90 <_printf_i+0x244>)
 8003abc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ac0:	6829      	ldr	r1, [r5, #0]
 8003ac2:	6823      	ldr	r3, [r4, #0]
 8003ac4:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ac8:	6029      	str	r1, [r5, #0]
 8003aca:	061d      	lsls	r5, r3, #24
 8003acc:	d514      	bpl.n	8003af8 <_printf_i+0x1ac>
 8003ace:	07df      	lsls	r7, r3, #31
 8003ad0:	bf44      	itt	mi
 8003ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ad6:	6023      	strmi	r3, [r4, #0]
 8003ad8:	b91e      	cbnz	r6, 8003ae2 <_printf_i+0x196>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	f023 0320 	bic.w	r3, r3, #32
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	2310      	movs	r3, #16
 8003ae4:	e7b0      	b.n	8003a48 <_printf_i+0xfc>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	f043 0320 	orr.w	r3, r3, #32
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	2378      	movs	r3, #120	; 0x78
 8003af0:	4828      	ldr	r0, [pc, #160]	; (8003b94 <_printf_i+0x248>)
 8003af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003af6:	e7e3      	b.n	8003ac0 <_printf_i+0x174>
 8003af8:	0659      	lsls	r1, r3, #25
 8003afa:	bf48      	it	mi
 8003afc:	b2b6      	uxthmi	r6, r6
 8003afe:	e7e6      	b.n	8003ace <_printf_i+0x182>
 8003b00:	4615      	mov	r5, r2
 8003b02:	e7bb      	b.n	8003a7c <_printf_i+0x130>
 8003b04:	682b      	ldr	r3, [r5, #0]
 8003b06:	6826      	ldr	r6, [r4, #0]
 8003b08:	6961      	ldr	r1, [r4, #20]
 8003b0a:	1d18      	adds	r0, r3, #4
 8003b0c:	6028      	str	r0, [r5, #0]
 8003b0e:	0635      	lsls	r5, r6, #24
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	d501      	bpl.n	8003b18 <_printf_i+0x1cc>
 8003b14:	6019      	str	r1, [r3, #0]
 8003b16:	e002      	b.n	8003b1e <_printf_i+0x1d2>
 8003b18:	0670      	lsls	r0, r6, #25
 8003b1a:	d5fb      	bpl.n	8003b14 <_printf_i+0x1c8>
 8003b1c:	8019      	strh	r1, [r3, #0]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	6123      	str	r3, [r4, #16]
 8003b22:	4615      	mov	r5, r2
 8003b24:	e7ba      	b.n	8003a9c <_printf_i+0x150>
 8003b26:	682b      	ldr	r3, [r5, #0]
 8003b28:	1d1a      	adds	r2, r3, #4
 8003b2a:	602a      	str	r2, [r5, #0]
 8003b2c:	681d      	ldr	r5, [r3, #0]
 8003b2e:	6862      	ldr	r2, [r4, #4]
 8003b30:	2100      	movs	r1, #0
 8003b32:	4628      	mov	r0, r5
 8003b34:	f7fc fb6c 	bl	8000210 <memchr>
 8003b38:	b108      	cbz	r0, 8003b3e <_printf_i+0x1f2>
 8003b3a:	1b40      	subs	r0, r0, r5
 8003b3c:	6060      	str	r0, [r4, #4]
 8003b3e:	6863      	ldr	r3, [r4, #4]
 8003b40:	6123      	str	r3, [r4, #16]
 8003b42:	2300      	movs	r3, #0
 8003b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b48:	e7a8      	b.n	8003a9c <_printf_i+0x150>
 8003b4a:	6923      	ldr	r3, [r4, #16]
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4640      	mov	r0, r8
 8003b52:	47d0      	blx	sl
 8003b54:	3001      	adds	r0, #1
 8003b56:	d0ab      	beq.n	8003ab0 <_printf_i+0x164>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	079b      	lsls	r3, r3, #30
 8003b5c:	d413      	bmi.n	8003b86 <_printf_i+0x23a>
 8003b5e:	68e0      	ldr	r0, [r4, #12]
 8003b60:	9b03      	ldr	r3, [sp, #12]
 8003b62:	4298      	cmp	r0, r3
 8003b64:	bfb8      	it	lt
 8003b66:	4618      	movlt	r0, r3
 8003b68:	e7a4      	b.n	8003ab4 <_printf_i+0x168>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	4632      	mov	r2, r6
 8003b6e:	4649      	mov	r1, r9
 8003b70:	4640      	mov	r0, r8
 8003b72:	47d0      	blx	sl
 8003b74:	3001      	adds	r0, #1
 8003b76:	d09b      	beq.n	8003ab0 <_printf_i+0x164>
 8003b78:	3501      	adds	r5, #1
 8003b7a:	68e3      	ldr	r3, [r4, #12]
 8003b7c:	9903      	ldr	r1, [sp, #12]
 8003b7e:	1a5b      	subs	r3, r3, r1
 8003b80:	42ab      	cmp	r3, r5
 8003b82:	dcf2      	bgt.n	8003b6a <_printf_i+0x21e>
 8003b84:	e7eb      	b.n	8003b5e <_printf_i+0x212>
 8003b86:	2500      	movs	r5, #0
 8003b88:	f104 0619 	add.w	r6, r4, #25
 8003b8c:	e7f5      	b.n	8003b7a <_printf_i+0x22e>
 8003b8e:	bf00      	nop
 8003b90:	08003ead 	.word	0x08003ead
 8003b94:	08003ebe 	.word	0x08003ebe

08003b98 <memcpy>:
 8003b98:	440a      	add	r2, r1
 8003b9a:	4291      	cmp	r1, r2
 8003b9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003ba0:	d100      	bne.n	8003ba4 <memcpy+0xc>
 8003ba2:	4770      	bx	lr
 8003ba4:	b510      	push	{r4, lr}
 8003ba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003baa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bae:	4291      	cmp	r1, r2
 8003bb0:	d1f9      	bne.n	8003ba6 <memcpy+0xe>
 8003bb2:	bd10      	pop	{r4, pc}

08003bb4 <memmove>:
 8003bb4:	4288      	cmp	r0, r1
 8003bb6:	b510      	push	{r4, lr}
 8003bb8:	eb01 0402 	add.w	r4, r1, r2
 8003bbc:	d902      	bls.n	8003bc4 <memmove+0x10>
 8003bbe:	4284      	cmp	r4, r0
 8003bc0:	4623      	mov	r3, r4
 8003bc2:	d807      	bhi.n	8003bd4 <memmove+0x20>
 8003bc4:	1e43      	subs	r3, r0, #1
 8003bc6:	42a1      	cmp	r1, r4
 8003bc8:	d008      	beq.n	8003bdc <memmove+0x28>
 8003bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bd2:	e7f8      	b.n	8003bc6 <memmove+0x12>
 8003bd4:	4402      	add	r2, r0
 8003bd6:	4601      	mov	r1, r0
 8003bd8:	428a      	cmp	r2, r1
 8003bda:	d100      	bne.n	8003bde <memmove+0x2a>
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003be6:	e7f7      	b.n	8003bd8 <memmove+0x24>

08003be8 <_free_r>:
 8003be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003bea:	2900      	cmp	r1, #0
 8003bec:	d044      	beq.n	8003c78 <_free_r+0x90>
 8003bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bf2:	9001      	str	r0, [sp, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f1a1 0404 	sub.w	r4, r1, #4
 8003bfa:	bfb8      	it	lt
 8003bfc:	18e4      	addlt	r4, r4, r3
 8003bfe:	f000 f913 	bl	8003e28 <__malloc_lock>
 8003c02:	4a1e      	ldr	r2, [pc, #120]	; (8003c7c <_free_r+0x94>)
 8003c04:	9801      	ldr	r0, [sp, #4]
 8003c06:	6813      	ldr	r3, [r2, #0]
 8003c08:	b933      	cbnz	r3, 8003c18 <_free_r+0x30>
 8003c0a:	6063      	str	r3, [r4, #4]
 8003c0c:	6014      	str	r4, [r2, #0]
 8003c0e:	b003      	add	sp, #12
 8003c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c14:	f000 b90e 	b.w	8003e34 <__malloc_unlock>
 8003c18:	42a3      	cmp	r3, r4
 8003c1a:	d908      	bls.n	8003c2e <_free_r+0x46>
 8003c1c:	6825      	ldr	r5, [r4, #0]
 8003c1e:	1961      	adds	r1, r4, r5
 8003c20:	428b      	cmp	r3, r1
 8003c22:	bf01      	itttt	eq
 8003c24:	6819      	ldreq	r1, [r3, #0]
 8003c26:	685b      	ldreq	r3, [r3, #4]
 8003c28:	1949      	addeq	r1, r1, r5
 8003c2a:	6021      	streq	r1, [r4, #0]
 8003c2c:	e7ed      	b.n	8003c0a <_free_r+0x22>
 8003c2e:	461a      	mov	r2, r3
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	b10b      	cbz	r3, 8003c38 <_free_r+0x50>
 8003c34:	42a3      	cmp	r3, r4
 8003c36:	d9fa      	bls.n	8003c2e <_free_r+0x46>
 8003c38:	6811      	ldr	r1, [r2, #0]
 8003c3a:	1855      	adds	r5, r2, r1
 8003c3c:	42a5      	cmp	r5, r4
 8003c3e:	d10b      	bne.n	8003c58 <_free_r+0x70>
 8003c40:	6824      	ldr	r4, [r4, #0]
 8003c42:	4421      	add	r1, r4
 8003c44:	1854      	adds	r4, r2, r1
 8003c46:	42a3      	cmp	r3, r4
 8003c48:	6011      	str	r1, [r2, #0]
 8003c4a:	d1e0      	bne.n	8003c0e <_free_r+0x26>
 8003c4c:	681c      	ldr	r4, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	6053      	str	r3, [r2, #4]
 8003c52:	4421      	add	r1, r4
 8003c54:	6011      	str	r1, [r2, #0]
 8003c56:	e7da      	b.n	8003c0e <_free_r+0x26>
 8003c58:	d902      	bls.n	8003c60 <_free_r+0x78>
 8003c5a:	230c      	movs	r3, #12
 8003c5c:	6003      	str	r3, [r0, #0]
 8003c5e:	e7d6      	b.n	8003c0e <_free_r+0x26>
 8003c60:	6825      	ldr	r5, [r4, #0]
 8003c62:	1961      	adds	r1, r4, r5
 8003c64:	428b      	cmp	r3, r1
 8003c66:	bf04      	itt	eq
 8003c68:	6819      	ldreq	r1, [r3, #0]
 8003c6a:	685b      	ldreq	r3, [r3, #4]
 8003c6c:	6063      	str	r3, [r4, #4]
 8003c6e:	bf04      	itt	eq
 8003c70:	1949      	addeq	r1, r1, r5
 8003c72:	6021      	streq	r1, [r4, #0]
 8003c74:	6054      	str	r4, [r2, #4]
 8003c76:	e7ca      	b.n	8003c0e <_free_r+0x26>
 8003c78:	b003      	add	sp, #12
 8003c7a:	bd30      	pop	{r4, r5, pc}
 8003c7c:	2000084c 	.word	0x2000084c

08003c80 <sbrk_aligned>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4e0e      	ldr	r6, [pc, #56]	; (8003cbc <sbrk_aligned+0x3c>)
 8003c84:	460c      	mov	r4, r1
 8003c86:	6831      	ldr	r1, [r6, #0]
 8003c88:	4605      	mov	r5, r0
 8003c8a:	b911      	cbnz	r1, 8003c92 <sbrk_aligned+0x12>
 8003c8c:	f000 f8bc 	bl	8003e08 <_sbrk_r>
 8003c90:	6030      	str	r0, [r6, #0]
 8003c92:	4621      	mov	r1, r4
 8003c94:	4628      	mov	r0, r5
 8003c96:	f000 f8b7 	bl	8003e08 <_sbrk_r>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	d00a      	beq.n	8003cb4 <sbrk_aligned+0x34>
 8003c9e:	1cc4      	adds	r4, r0, #3
 8003ca0:	f024 0403 	bic.w	r4, r4, #3
 8003ca4:	42a0      	cmp	r0, r4
 8003ca6:	d007      	beq.n	8003cb8 <sbrk_aligned+0x38>
 8003ca8:	1a21      	subs	r1, r4, r0
 8003caa:	4628      	mov	r0, r5
 8003cac:	f000 f8ac 	bl	8003e08 <_sbrk_r>
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d101      	bne.n	8003cb8 <sbrk_aligned+0x38>
 8003cb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cb8:	4620      	mov	r0, r4
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	20000850 	.word	0x20000850

08003cc0 <_malloc_r>:
 8003cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc4:	1ccd      	adds	r5, r1, #3
 8003cc6:	f025 0503 	bic.w	r5, r5, #3
 8003cca:	3508      	adds	r5, #8
 8003ccc:	2d0c      	cmp	r5, #12
 8003cce:	bf38      	it	cc
 8003cd0:	250c      	movcc	r5, #12
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	4607      	mov	r7, r0
 8003cd6:	db01      	blt.n	8003cdc <_malloc_r+0x1c>
 8003cd8:	42a9      	cmp	r1, r5
 8003cda:	d905      	bls.n	8003ce8 <_malloc_r+0x28>
 8003cdc:	230c      	movs	r3, #12
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	2600      	movs	r6, #0
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce8:	4e2e      	ldr	r6, [pc, #184]	; (8003da4 <_malloc_r+0xe4>)
 8003cea:	f000 f89d 	bl	8003e28 <__malloc_lock>
 8003cee:	6833      	ldr	r3, [r6, #0]
 8003cf0:	461c      	mov	r4, r3
 8003cf2:	bb34      	cbnz	r4, 8003d42 <_malloc_r+0x82>
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f7ff ffc2 	bl	8003c80 <sbrk_aligned>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	4604      	mov	r4, r0
 8003d00:	d14d      	bne.n	8003d9e <_malloc_r+0xde>
 8003d02:	6834      	ldr	r4, [r6, #0]
 8003d04:	4626      	mov	r6, r4
 8003d06:	2e00      	cmp	r6, #0
 8003d08:	d140      	bne.n	8003d8c <_malloc_r+0xcc>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4638      	mov	r0, r7
 8003d10:	eb04 0803 	add.w	r8, r4, r3
 8003d14:	f000 f878 	bl	8003e08 <_sbrk_r>
 8003d18:	4580      	cmp	r8, r0
 8003d1a:	d13a      	bne.n	8003d92 <_malloc_r+0xd2>
 8003d1c:	6821      	ldr	r1, [r4, #0]
 8003d1e:	3503      	adds	r5, #3
 8003d20:	1a6d      	subs	r5, r5, r1
 8003d22:	f025 0503 	bic.w	r5, r5, #3
 8003d26:	3508      	adds	r5, #8
 8003d28:	2d0c      	cmp	r5, #12
 8003d2a:	bf38      	it	cc
 8003d2c:	250c      	movcc	r5, #12
 8003d2e:	4629      	mov	r1, r5
 8003d30:	4638      	mov	r0, r7
 8003d32:	f7ff ffa5 	bl	8003c80 <sbrk_aligned>
 8003d36:	3001      	adds	r0, #1
 8003d38:	d02b      	beq.n	8003d92 <_malloc_r+0xd2>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	442b      	add	r3, r5
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	e00e      	b.n	8003d60 <_malloc_r+0xa0>
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	1b52      	subs	r2, r2, r5
 8003d46:	d41e      	bmi.n	8003d86 <_malloc_r+0xc6>
 8003d48:	2a0b      	cmp	r2, #11
 8003d4a:	d916      	bls.n	8003d7a <_malloc_r+0xba>
 8003d4c:	1961      	adds	r1, r4, r5
 8003d4e:	42a3      	cmp	r3, r4
 8003d50:	6025      	str	r5, [r4, #0]
 8003d52:	bf18      	it	ne
 8003d54:	6059      	strne	r1, [r3, #4]
 8003d56:	6863      	ldr	r3, [r4, #4]
 8003d58:	bf08      	it	eq
 8003d5a:	6031      	streq	r1, [r6, #0]
 8003d5c:	5162      	str	r2, [r4, r5]
 8003d5e:	604b      	str	r3, [r1, #4]
 8003d60:	4638      	mov	r0, r7
 8003d62:	f104 060b 	add.w	r6, r4, #11
 8003d66:	f000 f865 	bl	8003e34 <__malloc_unlock>
 8003d6a:	f026 0607 	bic.w	r6, r6, #7
 8003d6e:	1d23      	adds	r3, r4, #4
 8003d70:	1af2      	subs	r2, r6, r3
 8003d72:	d0b6      	beq.n	8003ce2 <_malloc_r+0x22>
 8003d74:	1b9b      	subs	r3, r3, r6
 8003d76:	50a3      	str	r3, [r4, r2]
 8003d78:	e7b3      	b.n	8003ce2 <_malloc_r+0x22>
 8003d7a:	6862      	ldr	r2, [r4, #4]
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	bf0c      	ite	eq
 8003d80:	6032      	streq	r2, [r6, #0]
 8003d82:	605a      	strne	r2, [r3, #4]
 8003d84:	e7ec      	b.n	8003d60 <_malloc_r+0xa0>
 8003d86:	4623      	mov	r3, r4
 8003d88:	6864      	ldr	r4, [r4, #4]
 8003d8a:	e7b2      	b.n	8003cf2 <_malloc_r+0x32>
 8003d8c:	4634      	mov	r4, r6
 8003d8e:	6876      	ldr	r6, [r6, #4]
 8003d90:	e7b9      	b.n	8003d06 <_malloc_r+0x46>
 8003d92:	230c      	movs	r3, #12
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4638      	mov	r0, r7
 8003d98:	f000 f84c 	bl	8003e34 <__malloc_unlock>
 8003d9c:	e7a1      	b.n	8003ce2 <_malloc_r+0x22>
 8003d9e:	6025      	str	r5, [r4, #0]
 8003da0:	e7de      	b.n	8003d60 <_malloc_r+0xa0>
 8003da2:	bf00      	nop
 8003da4:	2000084c 	.word	0x2000084c

08003da8 <_realloc_r>:
 8003da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dac:	4680      	mov	r8, r0
 8003dae:	4614      	mov	r4, r2
 8003db0:	460e      	mov	r6, r1
 8003db2:	b921      	cbnz	r1, 8003dbe <_realloc_r+0x16>
 8003db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003db8:	4611      	mov	r1, r2
 8003dba:	f7ff bf81 	b.w	8003cc0 <_malloc_r>
 8003dbe:	b92a      	cbnz	r2, 8003dcc <_realloc_r+0x24>
 8003dc0:	f7ff ff12 	bl	8003be8 <_free_r>
 8003dc4:	4625      	mov	r5, r4
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dcc:	f000 f838 	bl	8003e40 <_malloc_usable_size_r>
 8003dd0:	4284      	cmp	r4, r0
 8003dd2:	4607      	mov	r7, r0
 8003dd4:	d802      	bhi.n	8003ddc <_realloc_r+0x34>
 8003dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dda:	d812      	bhi.n	8003e02 <_realloc_r+0x5a>
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4640      	mov	r0, r8
 8003de0:	f7ff ff6e 	bl	8003cc0 <_malloc_r>
 8003de4:	4605      	mov	r5, r0
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d0ed      	beq.n	8003dc6 <_realloc_r+0x1e>
 8003dea:	42bc      	cmp	r4, r7
 8003dec:	4622      	mov	r2, r4
 8003dee:	4631      	mov	r1, r6
 8003df0:	bf28      	it	cs
 8003df2:	463a      	movcs	r2, r7
 8003df4:	f7ff fed0 	bl	8003b98 <memcpy>
 8003df8:	4631      	mov	r1, r6
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f7ff fef4 	bl	8003be8 <_free_r>
 8003e00:	e7e1      	b.n	8003dc6 <_realloc_r+0x1e>
 8003e02:	4635      	mov	r5, r6
 8003e04:	e7df      	b.n	8003dc6 <_realloc_r+0x1e>
	...

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4d06      	ldr	r5, [pc, #24]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fd f83c 	bl	8000e90 <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000854 	.word	0x20000854

08003e28 <__malloc_lock>:
 8003e28:	4801      	ldr	r0, [pc, #4]	; (8003e30 <__malloc_lock+0x8>)
 8003e2a:	f000 b811 	b.w	8003e50 <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	20000858 	.word	0x20000858

08003e34 <__malloc_unlock>:
 8003e34:	4801      	ldr	r0, [pc, #4]	; (8003e3c <__malloc_unlock+0x8>)
 8003e36:	f000 b80c 	b.w	8003e52 <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	20000858 	.word	0x20000858

08003e40 <_malloc_usable_size_r>:
 8003e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e44:	1f18      	subs	r0, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bfbc      	itt	lt
 8003e4a:	580b      	ldrlt	r3, [r1, r0]
 8003e4c:	18c0      	addlt	r0, r0, r3
 8003e4e:	4770      	bx	lr

08003e50 <__retarget_lock_acquire_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <__retarget_lock_release_recursive>:
 8003e52:	4770      	bx	lr

08003e54 <_init>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr

08003e60 <_fini>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr
